<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aoaYaoa</title>
  
  <subtitle>灰色随想：记录生活，探索技术的个人空间</subtitle>
  <link href="https://aoayaoa.github.io/atom.xml" rel="self"/>
  
  <link href="https://aoayaoa.github.io/"/>
  <updated>2025-05-04T13:38:00.698Z</updated>
  <id>https://aoayaoa.github.io/</id>
  
  <author>
    <name>aoaYaoa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言学习总结</title>
    <link href="https://aoayaoa.github.io/2025/04/25/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://aoayaoa.github.io/2025/04/25/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2025-04-24T16:00:00.000Z</published>
    <updated>2025-05-04T13:38:00.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言学习总结"><a href="#Go语言学习总结" class="headerlink" title="Go语言学习总结"></a>Go语言学习总结</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%B8%80go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80">一、Go语言基础</a><ul><li><a href="#1-%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">1. 安装与环境配置</a></li><li><a href="#2-go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5">2. Go语言核心概念</a><ul><li><a href="#%E5%8C%85%E4%B8%8E%E6%A8%A1%E5%9D%97">包与模块</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">数据类型使用场景</a></li><li><a href="#%E5%A4%8D%E6%95%B0%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3">复数类型详解</a></li><li><a href="#%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F">变量与常量</a></li><li><a href="#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6">流程控制</a></li></ul></li><li><a href="#3-%E5%87%BD%E6%95%B0%E4%B8%8E%E6%96%B9%E6%B3%95">3. 函数与方法</a></li><li><a href="#4-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E6%8E%A5%E5%8F%A3">4. 结构体与接口</a></li><li><a href="#5-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B">5. 并发编程</a></li><li><a href="#%E9%80%9A%E9%81%93%E8%AF%A6%E8%A7%A3">6. 通道详解</a></li><li><a href="#context%E4%B8%8A%E4%B8%8B%E6%96%87">7. Context上下文</a></li></ul></li><li><a href="#%E4%BA%8C%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">二、项目架构与设计模式</a><ul><li><a href="#1-%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84">1. 分层架构</a></li><li><a href="#2-%E4%BB%93%E5%82%A8%E6%A8%A1%E5%BC%8Frepository-pattern">2. 仓储模式</a></li><li><a href="#3-%E6%9C%8D%E5%8A%A1%E5%B1%82service-layer">3. 服务层</a></li><li><a href="#4-%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86">4. 配置管理</a></li><li><a href="#5-%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%AE%BE%E8%AE%A1">5. 中间件设计</a></li><li><a href="#6-%E6%97%A5%E5%BF%97%E5%B7%A5%E5%85%B7">6. 日志工具</a></li></ul></li><li><a href="#%E4%B8%89web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91gin%E6%A1%86%E6%9E%B6">三、Web应用开发</a><ul><li><a href="#1-%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE">1. 路由设置</a></li><li><a href="#2-%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AE%9E%E7%8E%B0">2. 控制器实现</a></li><li><a href="#3-%E4%B8%BB%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3">3. 主程序入口</a></li></ul></li><li><a href="#%E5%9B%9B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83">四、最佳实践与编码规范</a><ul><li><a href="#1-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">1. 错误处理</a></li><li><a href="#2-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">2. 并发控制</a></li><li><a href="#3-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95">3. 单元测试</a></li><li><a href="#4-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">4. 性能优化</a></li><li><a href="#5-api%E8%AE%BE%E8%AE%A1">5. API设计</a></li></ul></li><li><a href="#%E4%BA%94%E8%BF%9B%E9%98%B6%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%89%A9%E5%B1%95">五、进阶主题与扩展</a><ul><li><a href="#1-%E9%83%A8%E7%BD%B2%E4%B8%8Ecicd">1. 部署与CI&#x2F;CD</a></li><li><a href="#2-%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%97%A5%E5%BF%97">2. 监控与日志</a></li><li><a href="#3-%E5%AE%89%E5%85%A8%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">3. 安全最佳实践</a></li></ul></li><li><a href="#%E5%85%AD%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">六、常见陷阱与解决方案</a><ul><li><a href="#1-%E5%88%9D%E5%AD%A6%E8%80%85%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF">1. 初学者常见错误</a></li><li><a href="#2-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8F%90%E7%A4%BA">2. 性能优化提示</a></li><li><a href="#3-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">3. 代码风格最佳实践</a></li></ul></li><li><a href="#%E4%B8%83%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B-go-118">七、泛型编程 (Go 1.18+)</a><ul><li><a href="#1-%E6%B3%9B%E5%9E%8B%E5%87%BD%E6%95%B0">1. 泛型函数</a></li><li><a href="#2-%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B">2. 泛型类型</a></li><li><a href="#3-%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B">3. 使用泛型类型</a></li><li><a href="#4-%E6%B3%9B%E5%9E%8B%E7%BA%A6%E6%9D%9F">4. 泛型约束</a></li><li><a href="#5-%E6%B3%9B%E5%9E%8B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">5. 泛型使用场景</a></li><li><a href="#6-%E6%B3%9B%E5%9E%8B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">6. 泛型最佳实践</a></li></ul></li><li><a href="#%E5%85%AB%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9E%E9%A1%BE">八、核心知识点回顾</a></li></ul><hr><h2 id="一、Go语言基础"><a href="#一、Go语言基础" class="headerlink" title="一、Go语言基础"></a>一、Go语言基础</h2><h3 id="1-安装与环境配置"><a href="#1-安装与环境配置" class="headerlink" title="1. 安装与环境配置"></a>1. 安装与环境配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载安装Go</span></span><br><span class="line">brew install go  <span class="comment"># macOS</span></span><br><span class="line"><span class="comment"># 或 apt-get install golang-go  # Ubuntu</span></span><br><span class="line"><span class="comment"># 或从 https://golang.org/dl/ 下载安装包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go  <span class="comment"># Go安装路径</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go       <span class="comment"># Go工作区</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$GOPATH</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">go version</span><br></pre></td></tr></table></figure><h3 id="2-Go语言核心概念"><a href="#2-Go语言核心概念" class="headerlink" title="2. Go语言核心概念"></a>2. Go语言核心概念</h3><h4 id="包与模块"><a href="#包与模块" class="headerlink" title="包与模块"></a>包与模块</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明包</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入包</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span>  <span class="comment">// 第三方包</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化模块</span></span><br><span class="line"><span class="comment">// go mod init go-app</span></span><br></pre></td></tr></table></figure><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型</span></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">10</span>            <span class="comment">// 整数</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="number">3.14</span>      <span class="comment">// 浮点数</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">bool</span> = <span class="literal">true</span>         <span class="comment">// 布尔值</span></span><br><span class="line"><span class="keyword">var</span> s <span class="type">string</span> = <span class="string">&quot;hello&quot;</span>    <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">var</span> r <span class="type">rune</span> = <span class="string">&#x27;你&#x27;</span>         <span class="comment">// Unicode字符</span></span><br><span class="line"><span class="keyword">var</span> by <span class="type">byte</span> = <span class="string">&#x27;A&#x27;</span>         <span class="comment">// ASCII字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合类型</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="type">int</span>                   <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> slice = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;       <span class="comment">// 切片</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>&#125;   <span class="comment">// 映射</span></span><br><span class="line"><span class="keyword">var</span> p *<span class="type">int</span>                       <span class="comment">// 指针</span></span><br></pre></td></tr></table></figure><h4 id="数据类型使用场景"><a href="#数据类型使用场景" class="headerlink" title="数据类型使用场景"></a>数据类型使用场景</h4><p><strong>数值类型</strong>：</p><ul><li><p><code>int</code>&#x2F;<code>int8</code>&#x2F;<code>int16</code>&#x2F;<code>int32</code>&#x2F;<code>int64</code>：用于表示整数值</p><ul><li>使用场景：循环计数器、数组索引、ID、年龄等</li><li>选择建议：通常使用<code>int</code>，Go会根据平台选择合适的位数(32位或64位)</li></ul></li><li><p><code>uint</code>&#x2F;<code>uint8</code>&#x2F;<code>uint16</code>&#x2F;<code>uint32</code>&#x2F;<code>uint64</code>：无符号整数</p><ul><li>使用场景：文件大小、内存大小、位操作等必须为非负数的场合</li><li><code>uint8</code>等同于<code>byte</code>，常用于处理二进制数据</li></ul></li><li><p><code>float32</code>&#x2F;<code>float64</code>：浮点数</p><ul><li>使用场景：科学计算、金融计算(注意精度问题)、坐标值等</li><li>选择建议：通常优先使用<code>float64</code>以获得更高精度</li></ul></li><li><p><code>complex64</code>&#x2F;<code>complex128</code>：复数</p><ul><li>使用场景：科学计算、信号处理、电气工程计算</li></ul></li></ul><p><strong>字符相关类型</strong>：</p><ul><li><p><code>string</code>：字符串</p><ul><li>使用场景：文本处理、用户输入、配置信息等</li><li>特点：不可变，UTF-8编码，可使用+连接或strings.Builder构建</li></ul></li><li><p><code>rune</code>：等同于<code>int32</code>，表示一个Unicode码点</p><ul><li>使用场景：处理国际化文本、需要遍历Unicode字符的场景</li><li>示例：<code>for _, r := range &quot;你好世界&quot; &#123; fmt.Printf(&quot;%c&quot;, r) &#125;</code></li></ul></li><li><p><code>byte</code>：等同于<code>uint8</code>，表示一个ASCII字符或二进制数据的一个字节</p><ul><li>使用场景：文件I&#x2F;O、网络传输、加密解密、图像处理等</li></ul></li></ul><p><strong>布尔类型</strong>：</p><ul><li><code>bool</code>：true或false<ul><li>使用场景：条件判断、标志位、状态表示</li><li>注意：Go中不允许将整数隐式转换为布尔值</li></ul></li></ul><p><strong>复合类型</strong>：</p><ul><li><p>数组<code>[n]T</code>：固定长度的元素序列</p><ul><li>使用场景：知道元素个数且不会变化的集合</li><li>注意：作为函数参数时会复制整个数组，通常使用切片代替</li></ul></li><li><p>切片<code>[]T</code>：动态数组</p><ul><li>使用场景：大多数需要序列的场合，如函数返回多个同类结果</li><li>特点：可动态增长，底层引用数组，传递时是引用传递</li></ul></li><li><p>映射<code>map[K]V</code>：键值对集合</p><ul><li>使用场景：需要通过键快速查找值，配置设置，缓存</li><li>特点：无序，键必须可比较（不能用切片作键）</li></ul></li><li><p>指针<code>*T</code>：指向变量的内存地址</p><ul><li>使用场景：需要修改函数外的变量，避免大对象复制</li><li>示例：<code>func updateValue(ptr *int) &#123; *ptr = 100 &#125;</code></li></ul></li><li><p>结构体<code>struct</code>：自定义复合类型</p><ul><li>使用场景：表示实体对象、数据模型、请求&#x2F;响应结构</li><li>示例：<code>type User struct &#123; Name string; Age int &#125;</code></li></ul></li><li><p>接口<code>interface</code>：方法集合</p><ul><li>使用场景：实现多态、依赖注入、抽象行为</li><li>零值：<code>nil</code>，代表没有具体类型实现</li></ul></li><li><p>通道<code>chan</code>：goroutine间通信的管道</p><ul><li>使用场景：并发编程，数据流控制，同步多个goroutine</li><li>示例：<code>ch := make(chan int, 10) // 有缓冲通道</code></li></ul></li><li><p>函数类型<code>func</code>：函数作为值传递</p><ul><li>使用场景：回调函数、策略模式实现、事件处理</li><li>示例：<code>var handler func(w http.ResponseWriter, r *http.Request)</code></li></ul></li></ul><p><strong>特殊类型</strong>：</p><ul><li><p><code>error</code>：错误接口</p><ul><li>使用场景：错误处理和传播</li><li>惯例：函数最后一个返回值通常是error</li></ul></li><li><p><code>nil</code>：零值</p><ul><li>适用类型：指针、切片、映射、通道、函数和接口</li></ul></li></ul><h4 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量声明</span></span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span>     <span class="comment">// 声明变量</span></span><br><span class="line">name = <span class="string">&quot;Go&quot;</span>         <span class="comment">// 赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Go&quot;</span>     <span class="comment">// 声明并初始化（类型推断）</span></span><br><span class="line">name := <span class="string">&quot;Go&quot;</span>        <span class="comment">// 短变量声明（函数内部使用）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量声明</span></span><br><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14159</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    StatusOK = <span class="number">200</span></span><br><span class="line">    StatusNotFound = <span class="number">404</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件语句</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">10</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> x &gt; <span class="number">5</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch语句</span></span><br><span class="line"><span class="keyword">switch</span> status &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Not Found&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    <span class="comment">// 传统for循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">    <span class="comment">// while风格循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">// 无限循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围循环</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> slice &#123;</span><br><span class="line">    <span class="comment">// 遍历切片</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">    <span class="comment">// 遍历映射</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-函数与方法"><a href="#3-函数与方法" class="headerlink" title="3. 函数与方法"></a>3. 函数与方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(a, b <span class="type">float64</span>)</span></span> (<span class="type">float64</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">&quot;除数不能为0&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法（带接收者的函数）</span></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Width, Height <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.Width * r.Height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针接收者（可修改接收者）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rectangle)</span></span> Scale(factor <span class="type">float64</span>) &#123;</span><br><span class="line">    r.Width *= factor</span><br><span class="line">    r.Height *= factor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-结构体与接口"><a href="#4-结构体与接口" class="headerlink" title="4. 结构体与接口"></a>4. 结构体与接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体定义</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID        <span class="type">uint</span>      <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">    Username  <span class="type">string</span>    <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">    Email     <span class="type">string</span>    <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">    Password  <span class="type">string</span>    <span class="string">`json:&quot;-&quot;`</span> <span class="comment">// 不输出到JSON</span></span><br><span class="line">    CreatedAt time.Time <span class="string">`json:&quot;created_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line">user := User&#123;</span><br><span class="line">    Username: <span class="string">&quot;zhang&quot;</span>,</span><br><span class="line">    Email:    <span class="string">&quot;zhang@example.com&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口定义</span></span><br><span class="line"><span class="keyword">type</span> UserRepository <span class="keyword">interface</span> &#123;</span><br><span class="line">    FindByID(id <span class="type">uint</span>) (*User, <span class="type">error</span>)</span><br><span class="line">    Create(user *User) <span class="type">error</span></span><br><span class="line">    Update(user *User) <span class="type">error</span></span><br><span class="line">    Delete(id <span class="type">uint</span>) <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口（隐式实现）</span></span><br><span class="line"><span class="keyword">type</span> MongoUserRepository <span class="keyword">struct</span> &#123;</span><br><span class="line">    db *mongodb.Database</span><br><span class="line">    collection *mongodb.Collection</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *MongoUserRepository)</span></span> FindByID(id <span class="type">uint</span>) (*User, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 实现代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-并发编程"><a href="#5-并发编程" class="headerlink" title="5. 并发编程"></a>5. 并发编程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Goroutine</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 在新的goroutine中执行</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通道</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)      <span class="comment">// 无缓冲通道</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)  <span class="comment">// 带缓冲通道</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送和接收</span></span><br><span class="line">ch &lt;- <span class="number">42</span>        <span class="comment">// 发送数据</span></span><br><span class="line">value := &lt;-ch   <span class="comment">// 接收数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Select语句</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> msg := &lt;-ch1:</span><br><span class="line">    <span class="comment">// 处理ch1接收的消息</span></span><br><span class="line"><span class="keyword">case</span> ch2 &lt;- <span class="number">42</span>:</span><br><span class="line">    <span class="comment">// 向ch2发送数据成功</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line">    <span class="comment">// 超时处理</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// 非阻塞操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步工具</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br></pre></td></tr></table></figure><h4 id="复数类型详解"><a href="#复数类型详解" class="headerlink" title="复数类型详解"></a>复数类型详解</h4><p>复数在Go中有两种类型：<code>complex64</code>和<code>complex128</code>，分别由float32和float64的实部和虚部组成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明复数</span></span><br><span class="line"><span class="keyword">var</span> c1 <span class="type">complex64</span> = <span class="number">1</span> + <span class="number">2i</span>      <span class="comment">// complex64类型</span></span><br><span class="line"><span class="keyword">var</span> c2 <span class="type">complex128</span> = <span class="number">3.14</span> + <span class="number">5.6i</span> <span class="comment">// complex128类型</span></span><br><span class="line">c3 := <span class="built_in">complex</span>(<span class="number">1.0</span>, <span class="number">2.0</span>)        <span class="comment">// 使用complex函数创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取实部和虚部</span></span><br><span class="line">realPart := <span class="built_in">real</span>(c1)  <span class="comment">// 获取实部：1.0</span></span><br><span class="line">imagPart := <span class="built_in">imag</span>(c1)  <span class="comment">// 获取虚部：2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复数运算</span></span><br><span class="line">sum := c1 + <span class="type">complex64</span>(c2)  <span class="comment">// 复数加法</span></span><br><span class="line">product := c1 * <span class="type">complex64</span>(c2)  <span class="comment">// 复数乘法</span></span><br><span class="line">conjugate := <span class="built_in">complex</span>(<span class="built_in">real</span>(c1), -<span class="built_in">imag</span>(c1))  <span class="comment">// 复数共轭</span></span><br></pre></td></tr></table></figure><p><strong>复数使用场景</strong>:</p><ul><li>傅里叶变换和频谱分析</li><li>信号处理</li><li>电气和电子工程计算</li><li>平面几何和向量计算</li><li>量子计算模拟</li></ul><p><strong>复数标准库</strong>:<br>Go提供了<code>math/cmplx</code>包用于复数计算:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;math/cmplx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算复数的绝对值</span></span><br><span class="line">abs := cmplx.Abs(<span class="number">2</span> + <span class="number">3i</span>)  <span class="comment">// 结果: 3.605551275463989</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算复数的相位角</span></span><br><span class="line">phase := cmplx.Phase(<span class="number">2</span> + <span class="number">2i</span>)  <span class="comment">// 结果: 0.7853981633974483 (π/4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他函数</span></span><br><span class="line">sqrt := cmplx.Sqrt(<span class="number">-1</span>)  <span class="comment">// 复数平方根: 0+1i</span></span><br><span class="line">exp := cmplx.Exp(<span class="number">1i</span> * math.Pi)  <span class="comment">// 欧拉公式: -1+0i</span></span><br></pre></td></tr></table></figure><h3 id="通道详解"><a href="#通道详解" class="headerlink" title="通道详解"></a>通道详解</h3><p>通道(Channel)是Go语言的一个核心特性，用于goroutine之间的通信和同步。</p><h4 id="通道基础"><a href="#通道基础" class="headerlink" title="通道基础"></a>通道基础</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建通道</span></span><br><span class="line">unbuffered := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)        <span class="comment">// 无缓冲通道</span></span><br><span class="line">buffered := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">10</span>)   <span class="comment">// 有缓冲通道，容量为10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据到通道 (会阻塞直到有人接收)</span></span><br><span class="line">unbuffered &lt;- <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从通道接收数据 (会阻塞直到有数据可接收)</span></span><br><span class="line">value := &lt;-unbuffered</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭通道 (通常由发送方完成)</span></span><br><span class="line"><span class="built_in">close</span>(buffered)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查通道是否关闭</span></span><br><span class="line">val, ok := &lt;-buffered  <span class="comment">// ok为false表示通道已关闭</span></span><br></pre></td></tr></table></figure><h4 id="通道类型与方向"><a href="#通道类型与方向" class="headerlink" title="通道类型与方向"></a>通道类型与方向</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双向通道 (可发送也可接收)</span></span><br><span class="line"><span class="keyword">chan</span> T</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读通道 (只能接收)</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> T</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只写通道 (只能发送)</span></span><br><span class="line"><span class="keyword">chan</span>&lt;- T</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(in &lt;-<span class="keyword">chan</span> <span class="type">int</span>, out <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// worker只能从in接收数据，向out发送数据</span></span><br><span class="line">    val := &lt;-in</span><br><span class="line">    out &lt;- val * <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓冲与非缓冲通道"><a href="#缓冲与非缓冲通道" class="headerlink" title="缓冲与非缓冲通道"></a>缓冲与非缓冲通道</h4><p><strong>无缓冲通道</strong>:</p><ul><li>发送操作会阻塞，直到有接收方准备好接收</li><li>接收操作会阻塞，直到有发送方发送数据</li><li>提供了同步保证 - 发送方知道接收方已经接收了数据</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)  <span class="comment">// 无缓冲通道</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这会导致死锁，因为没有goroutine能接收</span></span><br><span class="line">ch &lt;- <span class="number">1</span>  <span class="comment">// 阻塞在这里</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确使用需要另一个goroutine接收</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(&lt;-ch)  <span class="comment">// 接收数据</span></span><br><span class="line">&#125;()</span><br><span class="line">ch &lt;- <span class="number">1</span>  <span class="comment">// 发送数据后继续执行</span></span><br></pre></td></tr></table></figure><p><strong>有缓冲通道</strong>:</p><ul><li>发送操作只在缓冲区满时阻塞</li><li>接收操作只在缓冲区空时阻塞</li><li>可以用于解耦生产者和消费者</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)  <span class="comment">// 容量为3的缓冲通道</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会阻塞，因为通道有足够缓冲空间</span></span><br><span class="line">ch &lt;- <span class="number">1</span></span><br><span class="line">ch &lt;- <span class="number">2</span></span><br><span class="line">ch &lt;- <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四个发送会阻塞，直到有空间</span></span><br><span class="line"><span class="comment">// ch &lt;- 4  // 如果没有人接收，这里会导致死锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收值并释放缓冲空间</span></span><br><span class="line">fmt.Println(&lt;-ch)  <span class="comment">// 输出: 1</span></span><br><span class="line">fmt.Println(&lt;-ch)  <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure><h4 id="Select语句详解"><a href="#Select语句详解" class="headerlink" title="Select语句详解"></a>Select语句详解</h4><p><code>select</code>语句是Go中用于多通道操作的关键结构:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v1 := &lt;-ch1:</span><br><span class="line">    <span class="comment">// 从ch1接收到数据</span></span><br><span class="line"><span class="keyword">case</span> ch2 &lt;- v2:</span><br><span class="line">    <span class="comment">// 成功向ch2发送数据</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(<span class="number">1</span> * time.Second):</span><br><span class="line">    <span class="comment">// 超时处理</span></span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line">    <span class="comment">// 完成信号，通常用于取消</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// 如果所有通道都阻塞，执行这里(非阻塞操作)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>select特性</strong>:</p><ul><li>如果多个case同时就绪，随机选择一个执行</li><li>没有case就绪且无default时，select会阻塞</li><li>default使select变成非阻塞操作</li></ul><h4 id="通道的常见使用模式"><a href="#通道的常见使用模式" class="headerlink" title="通道的常见使用模式"></a>通道的常见使用模式</h4><p><strong>工作池模式</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, jobs &lt;-<span class="keyword">chan</span> <span class="type">int</span>, results <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="keyword">range</span> jobs &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;worker %d processing job %d\n&quot;</span>, id, j)</span><br><span class="line">        results &lt;- j * <span class="number">2</span>  <span class="comment">// 执行工作并发送结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line">    results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动3个worker</span></span><br><span class="line">    <span class="keyword">for</span> w := <span class="number">1</span>; w &lt;= <span class="number">3</span>; w++ &#123;</span><br><span class="line">        <span class="keyword">go</span> worker(w, jobs, results)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送工作</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++ &#123;</span><br><span class="line">        jobs &lt;- j</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(jobs)  <span class="comment">// 关闭通道表示没有更多工作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收集结果</span></span><br><span class="line">    <span class="keyword">for</span> a := <span class="number">1</span>; a &lt;= <span class="number">9</span>; a++ &#123;</span><br><span class="line">        &lt;-results</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>超时控制</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> res := &lt;-c:</span><br><span class="line">    fmt.Println(<span class="string">&quot;接收到结果:&quot;</span>, res)</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(<span class="number">1</span> * time.Second):</span><br><span class="line">    fmt.Println(<span class="string">&quot;操作超时&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>取消和终止</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">            <span class="comment">// 接收到取消信号</span></span><br><span class="line">            fmt.Println(<span class="string">&quot;工作取消&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// 继续工作</span></span><br><span class="line">            fmt.Println(<span class="string">&quot;工作中...&quot;</span>)</span><br><span class="line">            time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), <span class="number">1</span>*time.Second)</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> worker(ctx)</span><br><span class="line">    time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>限速器</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个限制每秒处理5个请求的限速器</span></span><br><span class="line">limiter := time.Tick(<span class="number">200</span> * time.Millisecond)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理请求</span></span><br><span class="line"><span class="keyword">for</span> req := <span class="keyword">range</span> requests &#123;</span><br><span class="line">    &lt;-limiter  <span class="comment">// 等待下一个令牌</span></span><br><span class="line">    <span class="keyword">go</span> process(req)  <span class="comment">// 处理请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通道常见陷阱与解决方案"><a href="#通道常见陷阱与解决方案" class="headerlink" title="通道常见陷阱与解决方案"></a>通道常见陷阱与解决方案</h4><ol><li><p><strong>从关闭的通道接收数据</strong>:</p><ul><li>从已关闭的通道接收会立即返回通道元素类型的零值</li><li>应使用<code>val, ok := &lt;-ch</code>形式检查通道状态</li></ul></li><li><p><strong>向关闭的通道发送数据</strong>:</p><ul><li>会导致panic</li><li>确保只有发送方关闭通道，接收方不应关闭</li></ul></li><li><p><strong>重复关闭通道</strong>:</p><ul><li>会导致panic</li><li>使用<code>sync.Once</code>确保只关闭一次，或使用专门的终止通道</li></ul></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用sync.Once安全关闭通道</span></span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"><span class="built_in">close</span> := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>泄漏的goroutine</strong>:<ul><li>当goroutine在通道上永久阻塞时发生</li><li>总是确保有终止条件，或使用context包管理生命周期</li></ul></li></ol><h3 id="7-Context上下文"><a href="#7-Context上下文" class="headerlink" title="7. Context上下文"></a>7. Context上下文</h3><p>Context是Go语言中用于跨API边界和进程间传递截止时间、取消信号和其他请求范围值的标准方式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Context</span></span><br><span class="line">ctx := context.Background()  <span class="comment">// 空Context，不会被取消</span></span><br><span class="line">ctx := context.TODO()        <span class="comment">// 临时Context，表示不确定使用哪种Context</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建带有截止时间的Context</span></span><br><span class="line">deadline := time.Now().Add(<span class="number">5</span> * time.Second)</span><br><span class="line">ctx, cancel := context.WithDeadline(parentCtx, deadline)</span><br><span class="line"><span class="keyword">defer</span> cancel()  <span class="comment">// 即使截止时间到了，也最好调用cancel</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建带有超时的Context</span></span><br><span class="line">ctx, cancel := context.WithTimeout(parentCtx, <span class="number">5</span> * time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建可取消的Context</span></span><br><span class="line">ctx, cancel := context.WithCancel(parentCtx)</span><br><span class="line"><span class="comment">// 在某个条件下取消</span></span><br><span class="line"><span class="keyword">if</span> shouldCancel &#123;</span><br><span class="line">    cancel()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建带值的Context</span></span><br><span class="line">ctx = context.WithValue(parentCtx, <span class="string">&quot;userID&quot;</span>, <span class="string">&quot;12345&quot;</span>)</span><br><span class="line"><span class="comment">// 获取Context中的值</span></span><br><span class="line"><span class="keyword">if</span> userID, ok := ctx.Value(<span class="string">&quot;userID&quot;</span>).(<span class="type">string</span>); ok &#123;</span><br><span class="line">    <span class="comment">// 使用userID</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Context使用规则</strong>:</p><ol><li>不要将Context存储在结构体中，而是显式传递给每个需要它的函数</li><li>不要传递nil Context，如果不确定使用哪个Context，使用context.TODO()</li><li>Context应该是第一个参数，通常命名为ctx</li><li>不要对同一个Context多次调用cancel函数</li><li>Context值应该是请求范围的数据，不要用于传递可选参数</li></ol><p><strong>实际应用示例</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleRequest</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 从请求创建Context</span></span><br><span class="line">    ctx := r.Context()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加超时</span></span><br><span class="line">    ctx, cancel := context.WithTimeout(ctx, <span class="number">2</span>*time.Second)</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用需要Context的函数</span></span><br><span class="line">    result, err := doSomethingSlowly(ctx)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Result: %s&quot;</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomethingSlowly</span><span class="params">(ctx context.Context)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建结果通道</span></span><br><span class="line">    resultCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在goroutine中执行耗时操作</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 模拟耗时操作</span></span><br><span class="line">        time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">        resultCh &lt;- <span class="string">&quot;操作完成&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用select监听多个通道</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> result := &lt;-resultCh:</span><br><span class="line">        <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, ctx.Err() <span class="comment">// 可能是DeadlineExceeded或Canceled</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Context在中间件中的应用</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loggingMiddleware</span><span class="params">(next http.Handler)</span></span> http.Handler &#123;</span><br><span class="line">    <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 从请求创建Context</span></span><br><span class="line">        ctx := r.Context()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加请求ID到Context</span></span><br><span class="line">        requestID := uuid.New().String()</span><br><span class="line">        ctx = context.WithValue(ctx, <span class="string">&quot;requestID&quot;</span>, requestID)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用新Context创建新请求</span></span><br><span class="line">        r = r.WithContext(ctx)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录请求开始</span></span><br><span class="line">        log.Printf(<span class="string">&quot;Request %s started&quot;</span>, requestID)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用下一个处理器</span></span><br><span class="line">        next.ServeHTTP(w, r)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录请求结束</span></span><br><span class="line">        log.Printf(<span class="string">&quot;Request %s completed&quot;</span>, requestID)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Context传递数据库事务</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Context键类型</span></span><br><span class="line"><span class="keyword">type</span> txKey <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将事务放入Context</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTx</span><span class="params">(ctx context.Context, tx *sql.Tx)</span></span> context.Context &#123;</span><br><span class="line">    <span class="keyword">return</span> context.WithValue(ctx, txKey&#123;&#125;, tx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从Context获取事务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTx</span><span class="params">(ctx context.Context)</span></span> (*sql.Tx, <span class="type">bool</span>) &#123;</span><br><span class="line">    tx, ok := ctx.Value(txKey&#123;&#125;).(*sql.Tx)</span><br><span class="line">    <span class="keyword">return</span> tx, ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateUser</span><span class="params">(ctx context.Context, user User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    tx, ok := GetTx(ctx)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="comment">// 没有事务，创建新事务</span></span><br><span class="line">        <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">        tx, err = db.BeginTx(ctx, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">defer</span> tx.Rollback()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行创建用户</span></span><br><span class="line">        <span class="keyword">if</span> err := insertUser(ctx, tx, user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tx.Commit()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在现有事务中执行</span></span><br><span class="line">    <span class="keyword">return</span> insertUser(ctx, tx, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、项目架构与设计模式"><a href="#二、项目架构与设计模式" class="headerlink" title="二、项目架构与设计模式"></a>二、项目架构与设计模式</h2><h3 id="1-分层架构"><a href="#1-分层架构" class="headerlink" title="1. 分层架构"></a>1. 分层架构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">go-app/</span><br><span class="line">├── config/                # 配置相关</span><br><span class="line">│   └── config.go          # 应用配置</span><br><span class="line">├── controller/            # 控制器层（处理HTTP请求）</span><br><span class="line">│   └── user_controller.go</span><br><span class="line">├── service/               # 服务层（业务逻辑）</span><br><span class="line">│   └── user_service.go</span><br><span class="line">├── database/              # 数据库相关</span><br><span class="line">│   ├── database.go        # 数据库初始化</span><br><span class="line">│   └── repositories/      # 数据访问层</span><br><span class="line">│       ├── repository.go  # 通用接口</span><br><span class="line">│       └── mongo_repository.go</span><br><span class="line">├── middleware/            # HTTP中间件</span><br><span class="line">│   ├── logger.go          # 日志中间件</span><br><span class="line">│   └── auth.go            # 认证中间件</span><br><span class="line">├── models/                # 数据模型</span><br><span class="line">│   └── user.go</span><br><span class="line">├── utils/                 # 工具函数</span><br><span class="line">│   └── logger.go          # 日志工具</span><br><span class="line">├── router/                # 路由设置</span><br><span class="line">│   └── router.go</span><br><span class="line">├── main.go                # 程序入口</span><br><span class="line">└── go.mod                 # 依赖管理</span><br></pre></td></tr></table></figure><h3 id="2-仓储模式（Repository-Pattern）"><a href="#2-仓储模式（Repository-Pattern）" class="headerlink" title="2. 仓储模式（Repository Pattern）"></a>2. 仓储模式（Repository Pattern）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用仓储接口</span></span><br><span class="line"><span class="keyword">type</span> Repository <span class="keyword">interface</span> &#123;</span><br><span class="line">    FindByID(id <span class="type">string</span>) (bson.M, <span class="type">error</span>)</span><br><span class="line">    FindAll(filter bson.M, skip, limit <span class="type">int64</span>, sort bson.D) ([]bson.M, <span class="type">int64</span>, <span class="type">error</span>)</span><br><span class="line">    Create(document <span class="keyword">interface</span>&#123;&#125;) (<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line">    Update(id <span class="type">string</span>, update bson.M) <span class="type">error</span></span><br><span class="line">    Delete(id <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MongoDB实现</span></span><br><span class="line"><span class="keyword">type</span> MongoRepository <span class="keyword">struct</span> &#123;</span><br><span class="line">    db         *mongodb.Database</span><br><span class="line">    collection *mongodb.Collection</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建MongoDB存储库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMongoRepository</span><span class="params">(db *mongodb.Database, collectionName <span class="type">string</span>)</span></span> *MongoRepository &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;MongoRepository&#123;</span><br><span class="line">        db:         db,</span><br><span class="line">        collection: db.Collection(collectionName),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *MongoRepository)</span></span> FindByID(id <span class="type">string</span>) (bson.M, <span class="type">error</span>) &#123;</span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), <span class="number">10</span>*time.Second)</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">    objID, err := primitive.ObjectIDFromHex(id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;无效的ID格式: %w&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result bson.M</span><br><span class="line">    err = r.collection.FindOne(ctx, bson.M&#123;<span class="string">&quot;_id&quot;</span>: objID&#125;).Decode(&amp;result)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err == mongodb.ErrNoDocuments &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;文档不存在&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-服务层（Service-Layer）"><a href="#3-服务层（Service-Layer）" class="headerlink" title="3. 服务层（Service Layer）"></a>3. 服务层（Service Layer）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户服务接口</span></span><br><span class="line"><span class="keyword">type</span> UserService <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetUserByID(id <span class="type">string</span>) (*User, <span class="type">error</span>)</span><br><span class="line">    CreateUser(user *User) (<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line">    UpdateUser(id <span class="type">string</span>, user *User) <span class="type">error</span></span><br><span class="line">    DeleteUser(id <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户服务实现</span></span><br><span class="line"><span class="keyword">type</span> UserServiceImpl <span class="keyword">struct</span> &#123;</span><br><span class="line">    repo Repository</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建用户服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUserService</span><span class="params">(repo Repository)</span></span> UserService &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;UserServiceImpl&#123;repo: repo&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *UserServiceImpl)</span></span> GetUserByID(id <span class="type">string</span>) (*User, <span class="type">error</span>) &#123;</span><br><span class="line">    doc, err := s.repo.FindByID(id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为用户对象</span></span><br><span class="line">    <span class="keyword">var</span> user User</span><br><span class="line">    <span class="comment">// ...处理转换逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;user, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-配置管理"><a href="#4-配置管理" class="headerlink" title="4. 配置管理"></a>4. 配置管理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.go</span></span><br><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置结构体</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">    Server <span class="keyword">struct</span> &#123;</span><br><span class="line">        Port         <span class="type">string</span>        <span class="string">`mapstructure:&quot;SERVER_PORT&quot;`</span></span><br><span class="line">        Mode         <span class="type">string</span>        <span class="string">`mapstructure:&quot;SERVER_MODE&quot;`</span></span><br><span class="line">        ReadTimeout  time.Duration <span class="string">`mapstructure:&quot;SERVER_READ_TIMEOUT&quot;`</span></span><br><span class="line">        WriteTimeout time.Duration <span class="string">`mapstructure:&quot;SERVER_WRITE_TIMEOUT&quot;`</span></span><br><span class="line">        IdleTimeout  time.Duration <span class="string">`mapstructure:&quot;SERVER_IDLE_TIMEOUT&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Database <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="comment">// MySQL配置...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MongoDB <span class="keyword">struct</span> &#123;</span><br><span class="line">        URI      <span class="type">string</span> <span class="string">`mapstructure:&quot;MONGODB_URI&quot;`</span></span><br><span class="line">        Database <span class="type">string</span> <span class="string">`mapstructure:&quot;MONGODB_DATABASE&quot;`</span></span><br><span class="line">        Username <span class="type">string</span> <span class="string">`mapstructure:&quot;MONGODB_USERNAME&quot;`</span></span><br><span class="line">        Password <span class="type">string</span> <span class="string">`mapstructure:&quot;MONGODB_PASSWORD&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JWT <span class="keyword">struct</span> &#123;</span><br><span class="line">        Secret <span class="type">string</span>        <span class="string">`mapstructure:&quot;JWT_SECRET&quot;`</span></span><br><span class="line">        Expire time.Duration <span class="string">`mapstructure:&quot;JWT_EXPIRE&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Logger <span class="keyword">struct</span> &#123;</span><br><span class="line">        Dir          <span class="type">string</span> <span class="string">`mapstructure:&quot;LOGGER_DIR&quot;`</span></span><br><span class="line">        FileName     <span class="type">string</span> <span class="string">`mapstructure:&quot;LOGGER_FILENAME&quot;`</span></span><br><span class="line">        MaxSize      <span class="type">int</span>    <span class="string">`mapstructure:&quot;LOGGER_MAX_SIZE&quot;`</span></span><br><span class="line">        MaxBackups   <span class="type">int</span>    <span class="string">`mapstructure:&quot;LOGGER_MAX_BACKUPS&quot;`</span></span><br><span class="line">        MaxAge       <span class="type">int</span>    <span class="string">`mapstructure:&quot;LOGGER_MAX_AGE&quot;`</span></span><br><span class="line">        Compress     <span class="type">bool</span>   <span class="string">`mapstructure:&quot;LOGGER_COMPRESS&quot;`</span></span><br><span class="line">        ConsoleOutput <span class="type">bool</span>  <span class="string">`mapstructure:&quot;LOGGER_CONSOLE_OUTPUT&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadConfig</span><span class="params">()</span></span> *Config &#123;</span><br><span class="line">    <span class="comment">// 获取环境变量</span></span><br><span class="line">    env := os.Getenv(<span class="string">&quot;APP_ENV&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> env == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        env = <span class="string">&quot;test&quot;</span> <span class="comment">// 默认测试环境</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置配置文件</span></span><br><span class="line">    viper.SetConfigName(<span class="string">&quot;.env.&quot;</span> + env)</span><br><span class="line">    viper.SetConfigType(<span class="string">&quot;env&quot;</span>)</span><br><span class="line">    viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    viper.AutomaticEnv()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    <span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;无法读取配置文件: &quot;</span> + err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析配置</span></span><br><span class="line">    <span class="keyword">var</span> config Config</span><br><span class="line">    <span class="keyword">if</span> err := viper.Unmarshal(&amp;config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;无法解析配置文件: &quot;</span> + err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-中间件设计"><a href="#5-中间件设计" class="headerlink" title="5. 中间件设计"></a>5. 中间件设计</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// middleware/logger.go</span></span><br><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;go-app/utils&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">    <span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Logger</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 开始时间</span></span><br><span class="line">        start := time.Now()</span><br><span class="line">        path := c.Request.URL.Path</span><br><span class="line">        query := c.Request.URL.RawQuery</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理请求</span></span><br><span class="line">        c.Next()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结束时间</span></span><br><span class="line">        end := time.Now()</span><br><span class="line">        latency := end.Sub(start)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取状态</span></span><br><span class="line">        status := c.Writer.Status()</span><br><span class="line">        clientIP := c.ClientIP()</span><br><span class="line">        method := c.Request.Method</span><br><span class="line">        userAgent := c.Request.UserAgent()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建日志字段</span></span><br><span class="line">        fields := []zap.Field&#123;</span><br><span class="line">            zap.Int(<span class="string">&quot;status&quot;</span>, status),</span><br><span class="line">            zap.String(<span class="string">&quot;method&quot;</span>, method),</span><br><span class="line">            zap.String(<span class="string">&quot;path&quot;</span>, path),</span><br><span class="line">            zap.String(<span class="string">&quot;query&quot;</span>, query),</span><br><span class="line">            zap.String(<span class="string">&quot;ip&quot;</span>, clientIP),</span><br><span class="line">            zap.String(<span class="string">&quot;user-agent&quot;</span>, userAgent),</span><br><span class="line">            zap.Duration(<span class="string">&quot;latency&quot;</span>, latency),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据状态码记录不同级别的日志</span></span><br><span class="line">        msg := fmt.Sprintf(<span class="string">&quot;[GIN] %d %s %s&quot;</span>, status, method, path)</span><br><span class="line">        <span class="keyword">if</span> status &gt;= <span class="number">500</span> &#123;</span><br><span class="line">            utils.Error(msg, fields...)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> status &gt;= <span class="number">400</span> &#123;</span><br><span class="line">            utils.Warn(msg, fields...)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            utils.Info(msg, fields...)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// middleware/middleware.go</span></span><br><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;go-app/config&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置所有中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupMiddlewares</span><span class="params">(r *gin.Engine, cfg *config.Config)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 日志中间件（放在最前面，记录所有请求）</span></span><br><span class="line">    r.Use(Logger())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局错误处理中间件</span></span><br><span class="line">    r.Use(ErrorHandler())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跨域中间件</span></span><br><span class="line">    r.Use(Cors())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 签名验证中间件</span></span><br><span class="line">    r.Use(Signature(&amp;SignatureConfig&#123;</span><br><span class="line">        AppKey:    cfg.Signature.AppKey,</span><br><span class="line">        AppSecret: cfg.Signature.AppSecret,</span><br><span class="line">        Expire:    cfg.Signature.Expire,</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-日志工具"><a href="#6-日志工具" class="headerlink" title="6. 日志工具"></a>6. 日志工具</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/logger.go</span></span><br><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;path/filepath&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">    <span class="string">&quot;go.uber.org/zap/zapcore&quot;</span></span><br><span class="line">    <span class="string">&quot;gopkg.in/natefinch/lumberjack.v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    logger      *zap.Logger</span><br><span class="line">    sugarLogger *zap.SugaredLogger</span><br><span class="line">    once        sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志配置</span></span><br><span class="line"><span class="keyword">type</span> LogConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">    LogDir        <span class="type">string</span> <span class="comment">// 日志目录</span></span><br><span class="line">    LogFileName   <span class="type">string</span> <span class="comment">// 日志文件名</span></span><br><span class="line">    MaxSize       <span class="type">int</span>    <span class="comment">// 单个日志文件最大大小，单位MB</span></span><br><span class="line">    MaxBackups    <span class="type">int</span>    <span class="comment">// 最大保留旧日志文件数</span></span><br><span class="line">    MaxAge        <span class="type">int</span>    <span class="comment">// 日志文件保留天数</span></span><br><span class="line">    Compress      <span class="type">bool</span>   <span class="comment">// 是否压缩旧日志文件</span></span><br><span class="line">    ConsoleOutput <span class="type">bool</span>   <span class="comment">// 是否输出到控制台</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认日志配置</span></span><br><span class="line"><span class="keyword">var</span> defaultLogConfig = LogConfig&#123;</span><br><span class="line">    LogDir:        <span class="string">&quot;logs&quot;</span>,</span><br><span class="line">    LogFileName:   <span class="string">&quot;app.log&quot;</span>,</span><br><span class="line">    MaxSize:       <span class="number">100</span>,</span><br><span class="line">    MaxBackups:    <span class="number">10</span>,</span><br><span class="line">    MaxAge:        <span class="number">30</span>,</span><br><span class="line">    Compress:      <span class="literal">true</span>,</span><br><span class="line">    ConsoleOutput: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">    InitLoggerWithConfig(defaultLogConfig)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用配置初始化日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLoggerWithConfig</span><span class="params">(config LogConfig)</span></span> &#123;</span><br><span class="line">    once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 确保日志目录存在</span></span><br><span class="line">        <span class="keyword">if</span> err := os.MkdirAll(config.LogDir, <span class="number">0755</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(<span class="string">&quot;无法创建日志目录: &quot;</span> + err.Error())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置编码器</span></span><br><span class="line">        encoderConfig := zapcore.EncoderConfig&#123;</span><br><span class="line">            TimeKey:        <span class="string">&quot;time&quot;</span>,</span><br><span class="line">            LevelKey:       <span class="string">&quot;level&quot;</span>,</span><br><span class="line">            NameKey:        <span class="string">&quot;logger&quot;</span>,</span><br><span class="line">            CallerKey:      <span class="string">&quot;caller&quot;</span>,</span><br><span class="line">            FunctionKey:    zapcore.OmitKey,</span><br><span class="line">            MessageKey:     <span class="string">&quot;msg&quot;</span>,</span><br><span class="line">            StacktraceKey:  <span class="string">&quot;stacktrace&quot;</span>,</span><br><span class="line">            LineEnding:     zapcore.DefaultLineEnding,</span><br><span class="line">            EncodeLevel:    zapcore.LowercaseLevelEncoder,</span><br><span class="line">            EncodeTime:     zapcore.ISO8601TimeEncoder,</span><br><span class="line">            EncodeDuration: zapcore.SecondsDurationEncoder,</span><br><span class="line">            EncodeCaller:   zapcore.ShortCallerEncoder,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志输出配置</span></span><br><span class="line">        <span class="comment">// ... [详细配置省略]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建日志记录器</span></span><br><span class="line">        logger = zap.New(core, zap.AddCaller(), zap.AddCallerSkip(<span class="number">1</span>))</span><br><span class="line">        sugarLogger = logger.Sugar()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取日志记录器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetLogger</span><span class="params">()</span></span> *zap.Logger &#123;</span><br><span class="line">    <span class="keyword">if</span> logger == <span class="literal">nil</span> &#123;</span><br><span class="line">        InitLogger()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Info</span><span class="params">(msg <span class="type">string</span>, fields ...zap.Field)</span></span> &#123;</span><br><span class="line">    GetLogger().Info(msg, fields...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Error</span><span class="params">(msg <span class="type">string</span>, fields ...zap.Field)</span></span> &#123;</span><br><span class="line">    GetLogger().Error(msg, fields...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fatal</span><span class="params">(msg <span class="type">string</span>, fields ...zap.Field)</span></span> &#123;</span><br><span class="line">    GetLogger().Fatal(msg, fields...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、Web应用开发（Gin框架）"><a href="#三、Web应用开发（Gin框架）" class="headerlink" title="三、Web应用开发（Gin框架）"></a>三、Web应用开发（Gin框架）</h2><h3 id="1-路由设置"><a href="#1-路由设置" class="headerlink" title="1. 路由设置"></a>1. 路由设置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/router.go</span></span><br><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;go-app/config&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/controller&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/database/repositories&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/middleware&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Setup</span><span class="params">(r *gin.Engine, cfg *config.Config, repoManager *repositories.RepositoryManager)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 公共路由组</span></span><br><span class="line">    public := r.Group(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证路由组</span></span><br><span class="line">    authorized := r.Group(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">    authorized.Use(middleware.JWTAuth(cfg))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户相关路由</span></span><br><span class="line">    setupUserRoutes(public, authorized, controller.NewUserController(repoManager.UserRepo, cfg))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 产品相关路由</span></span><br><span class="line">    setupProductRoutes(public, authorized, controller.NewProductController(repoManager.ProductRepo, cfg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupUserRoutes</span><span class="params">(public, authorized *gin.RouterGroup, controller *controller.UserController)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 公共接口</span></span><br><span class="line">    public.POST(<span class="string">&quot;/login&quot;</span>, controller.Login)</span><br><span class="line">    public.POST(<span class="string">&quot;/register&quot;</span>, controller.Register)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要认证的接口</span></span><br><span class="line">    users := authorized.Group(<span class="string">&quot;/users&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        users.GET(<span class="string">&quot;&quot;</span>, controller.GetUsers)</span><br><span class="line">        users.GET(<span class="string">&quot;/:id&quot;</span>, controller.GetUser)</span><br><span class="line">        users.PUT(<span class="string">&quot;/:id&quot;</span>, controller.UpdateUser)</span><br><span class="line">        users.DELETE(<span class="string">&quot;/:id&quot;</span>, controller.DeleteUser)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-控制器实现"><a href="#2-控制器实现" class="headerlink" title="2. 控制器实现"></a>2. 控制器实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller/user_controller.go</span></span><br><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;go-app/config&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/database/repositories&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/models&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/service&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserController <span class="keyword">struct</span> &#123;</span><br><span class="line">    userService service.UserService</span><br><span class="line">    cfg         *config.Config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUserController</span><span class="params">(userRepo repositories.UserRepository, cfg *config.Config)</span></span> *UserController &#123;</span><br><span class="line">    userService := service.NewUserService(userRepo, cfg)</span><br><span class="line">    <span class="keyword">return</span> &amp;UserController&#123;</span><br><span class="line">        userService: userService,</span><br><span class="line">        cfg:         cfg,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *UserController)</span></span> Login(ctx *gin.Context) &#123;</span><br><span class="line">    <span class="keyword">var</span> loginReq models.LoginRequest</span><br><span class="line">    <span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;loginReq); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        ctx.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    user, token, err := c.userService.Login(loginReq)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        ctx.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;用户名或密码错误&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;user&quot;</span>:  user,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: token,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *UserController)</span></span> GetUsers(ctx *gin.Context) &#123;</span><br><span class="line">    page, _ := strconv.Atoi(ctx.DefaultQuery(<span class="string">&quot;page&quot;</span>, <span class="string">&quot;1&quot;</span>))</span><br><span class="line">    pageSize, _ := strconv.Atoi(ctx.DefaultQuery(<span class="string">&quot;pageSize&quot;</span>, <span class="string">&quot;10&quot;</span>))</span><br><span class="line"></span><br><span class="line">    users, total, err := c.userService.GetUsers(page, pageSize)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: users,</span><br><span class="line">        <span class="string">&quot;meta&quot;</span>: gin.H&#123;</span><br><span class="line">            <span class="string">&quot;total&quot;</span>:     total,</span><br><span class="line">            <span class="string">&quot;page&quot;</span>:      page,</span><br><span class="line">            <span class="string">&quot;page_size&quot;</span>: pageSize,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他方法...</span></span><br></pre></td></tr></table></figure><h3 id="3-主程序入口"><a href="#3-主程序入口" class="headerlink" title="3. 主程序入口"></a>3. 主程序入口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/signal&quot;</span></span><br><span class="line">    <span class="string">&quot;syscall&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;go-app/config&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/database&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/database/repositories&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/middleware&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/router&quot;</span></span><br><span class="line">    <span class="string">&quot;go-app/utils&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/joho/godotenv&quot;</span></span><br><span class="line">    <span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 加载环境变量</span></span><br><span class="line">    <span class="keyword">if</span> err := godotenv.Load(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;警告: .env文件未找到，使用系统环境变量&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载配置</span></span><br><span class="line">    cfg := config.LoadConfig()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化日志</span></span><br><span class="line">    initLogger(cfg)</span><br><span class="line">    <span class="keyword">defer</span> utils.Sync() <span class="comment">// 确保日志写入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置运行模式</span></span><br><span class="line">    gin.SetMode(cfg.Server.Mode)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据库连接</span></span><br><span class="line">    err := database.InitDB()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        utils.Error(<span class="string">&quot;MySQL数据库初始化失败&quot;</span>, zap.Error(err))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化MongoDB连接</span></span><br><span class="line">    _, err = database.InitMongoDB(cfg)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        utils.Error(<span class="string">&quot;MongoDB初始化失败&quot;</span>, zap.Error(err))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建存储库管理器</span></span><br><span class="line">    repoManager := repositories.NewRepositoryManager(database.DB, database.MongoDB)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Gin引擎</span></span><br><span class="line">    r := gin.New()</span><br><span class="line">    r.Use(gin.Recovery())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置中间件</span></span><br><span class="line">    middleware.SetupMiddlewares(r, cfg)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置路由</span></span><br><span class="line">    router.Setup(r, cfg, repoManager)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置HTTP服务器</span></span><br><span class="line">    server := &amp;http.Server&#123;</span><br><span class="line">        Addr:         <span class="string">&quot;:&quot;</span> + cfg.Server.Port,</span><br><span class="line">        Handler:      r,</span><br><span class="line">        ReadTimeout:  cfg.Server.ReadTimeout,</span><br><span class="line">        WriteTimeout: cfg.Server.WriteTimeout,</span><br><span class="line">        IdleTimeout:  cfg.Server.IdleTimeout,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动HTTP服务器</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        utils.Info(fmt.Sprintf(<span class="string">&quot;服务器启动于 http://localhost:%s&quot;</span>, cfg.Server.Port))</span><br><span class="line">        <span class="keyword">if</span> err := server.ListenAndServe(); err != <span class="literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class="line">            utils.Fatal(<span class="string">&quot;服务器启动失败&quot;</span>, zap.Error(err))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待中断信号</span></span><br><span class="line">    quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">    signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)</span><br><span class="line">    &lt;-quit</span><br><span class="line"></span><br><span class="line">    utils.Info(<span class="string">&quot;正在关闭服务器...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLogger</span><span class="params">(cfg *config.Config)</span></span> &#123;</span><br><span class="line">    logConfig := utils.LogConfig&#123;</span><br><span class="line">        LogDir:        <span class="string">&quot;logs&quot;</span>,</span><br><span class="line">        LogFileName:   <span class="string">&quot;app.log&quot;</span>,</span><br><span class="line">        MaxSize:       <span class="number">100</span>,</span><br><span class="line">        MaxBackups:    <span class="number">10</span>,</span><br><span class="line">        MaxAge:        <span class="number">30</span>,</span><br><span class="line">        Compress:      <span class="literal">true</span>,</span><br><span class="line">        ConsoleOutput: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用配置文件的设置（如果有）</span></span><br><span class="line">    <span class="keyword">if</span> cfg.Logger.Dir != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        logConfig.LogDir = cfg.Logger.Dir</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...其他配置项</span></span><br><span class="line"></span><br><span class="line">    utils.InitLoggerWithConfig(logConfig)</span><br><span class="line">    utils.Info(<span class="string">&quot;应用程序启动&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、最佳实践与编码规范"><a href="#四、最佳实践与编码规范" class="headerlink" title="四、最佳实践与编码规范"></a>四、最佳实践与编码规范</h2><h3 id="1-错误处理"><a href="#1-错误处理" class="headerlink" title="1. 错误处理"></a>1. 错误处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本错误检查</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    result, err := someOperation()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;操作失败: %w&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理结果...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义错误类型</span></span><br><span class="line"><span class="keyword">type</span> NotFoundError <span class="keyword">struct</span> &#123;</span><br><span class="line">    Resource <span class="type">string</span></span><br><span class="line">    ID       <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *NotFoundError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%s ID=%s 不存在&quot;</span>, e.Resource, e.ID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误类型判断</span></span><br><span class="line"><span class="keyword">if</span> errors.Is(err, sql.ErrNoRows) &#123;</span><br><span class="line">    <span class="comment">// 处理记录不存在的情况</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取原始错误</span></span><br><span class="line"><span class="keyword">var</span> notFoundErr *NotFoundError</span><br><span class="line"><span class="keyword">if</span> errors.As(err, &amp;notFoundErr) &#123;</span><br><span class="line">    <span class="comment">// 处理特定类型的错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-并发控制"><a href="#2-并发控制" class="headerlink" title="2. 并发控制"></a>2. 并发控制</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Context控制超时和取消</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processWithTimeout</span><span class="params">(data []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">    results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="built_in">len</span>(data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> data &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(item <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">                <span class="keyword">return</span> <span class="comment">// 超时或被取消</span></span><br><span class="line">            <span class="keyword">case</span> results &lt;- processItem(item):</span><br><span class="line">                <span class="comment">// 处理完成</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收集结果...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用WaitGroup同步多个goroutine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processItems</span><span class="params">(items []<span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    results := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="built_in">len</span>(items))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, item := <span class="keyword">range</span> items &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>, item <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            results[i] = processItem(item)</span><br><span class="line">        &#125;(i, item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait() <span class="comment">// 等待所有处理完成</span></span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用worker池模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">workerPool</span><span class="params">(tasks &lt;-<span class="keyword">chan</span> Task, results <span class="keyword">chan</span>&lt;- Result, numWorkers <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动固定数量的worker</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numWorkers; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(workerID <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="keyword">for</span> task := <span class="keyword">range</span> tasks &#123;</span><br><span class="line">                results &lt;- processTask(task)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="built_in">close</span>(results)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-单元测试"><a href="#3-单元测试" class="headerlink" title="3. 单元测试"></a>3. 单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service/user_service_test.go</span></span><br><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;go-app/models&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/stretchr/testify/mock&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟用户存储库</span></span><br><span class="line"><span class="keyword">type</span> MockUserRepository <span class="keyword">struct</span> &#123;</span><br><span class="line">    mock.Mock</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MockUserRepository)</span></span> FindByID(id <span class="type">string</span>) (*models.User, <span class="type">error</span>) &#123;</span><br><span class="line">    args := m.Called(id)</span><br><span class="line">    <span class="keyword">if</span> args.Get(<span class="number">0</span>) == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, args.Error(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> args.Get(<span class="number">0</span>).(*models.User), args.Error(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试获取用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    mockRepo := <span class="built_in">new</span>(MockUserRepository)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置模拟行为</span></span><br><span class="line">    mockRepo.On(<span class="string">&quot;FindByID&quot;</span>, <span class="string">&quot;1&quot;</span>).Return(&amp;models.User&#123;</span><br><span class="line">        ID:       <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        Username: <span class="string">&quot;testuser&quot;</span>,</span><br><span class="line">    &#125;, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建服务</span></span><br><span class="line">    service := NewUserService(mockRepo, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行测试</span></span><br><span class="line">    user, err := service.GetUserByID(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断言结果</span></span><br><span class="line">    assert.NoError(t, err)</span><br><span class="line">    assert.NotNil(t, user)</span><br><span class="line">    assert.Equal(t, <span class="string">&quot;1&quot;</span>, user.ID)</span><br><span class="line">    assert.Equal(t, <span class="string">&quot;testuser&quot;</span>, user.Username)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证模拟调用</span></span><br><span class="line">    mockRepo.AssertExpectations(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-性能优化"><a href="#4-性能优化" class="headerlink" title="4. 性能优化"></a>4. 性能优化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用适当的数据结构</span></span><br><span class="line"><span class="comment">// 例如，使用sync.Map代替加锁的map</span></span><br><span class="line"><span class="keyword">var</span> cache sync.Map</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取缓存</span></span><br><span class="line">value, ok := cache.Load(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">    <span class="comment">// 使用缓存的值</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 计算新值</span></span><br><span class="line">    newValue := computeExpensiveValue()</span><br><span class="line">    cache.Store(<span class="string">&quot;key&quot;</span>, newValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用字符串拼接</span></span><br><span class="line"><span class="comment">// 低效方式</span></span><br><span class="line">s := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">    s += <span class="string">&quot;x&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高效方式</span></span><br><span class="line"><span class="keyword">var</span> sb strings.Builder</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">    sb.WriteString(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">s := sb.String()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 避免不必要的内存分配</span></span><br><span class="line">preallocated := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, expectedSize) <span class="comment">// 预分配容量</span></span><br></pre></td></tr></table></figure><h3 id="5-API设计"><a href="#5-API设计" class="headerlink" title="5. API设计"></a>5. API设计</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RESTful API设计</span></span><br><span class="line"><span class="comment">// GET /api/users      - 获取所有用户</span></span><br><span class="line"><span class="comment">// GET /api/users/:id  - 获取单个用户</span></span><br><span class="line"><span class="comment">// POST /api/users     - 创建用户</span></span><br><span class="line"><span class="comment">// PUT /api/users/:id  - 更新用户</span></span><br><span class="line"><span class="comment">// DELETE /api/users/:id - 删除用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一的响应格式</span></span><br><span class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</span><br><span class="line">    Code    <span class="type">int</span>         <span class="string">`json:&quot;code&quot;`</span></span><br><span class="line">    Message <span class="type">string</span>      <span class="string">`json:&quot;message&quot;`</span></span><br><span class="line">    Data    <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;data,omitempty&quot;`</span></span><br><span class="line">    Meta    <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;meta,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUsers</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    users, total, err := userService.GetUsers(page, pageSize)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        c.JSON(http.StatusInternalServerError, Response&#123;</span><br><span class="line">            Code:    <span class="number">500</span>,</span><br><span class="line">            Message: <span class="string">&quot;获取用户列表失败&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.JSON(http.StatusOK, Response&#123;</span><br><span class="line">        Code:    <span class="number">200</span>,</span><br><span class="line">        Message: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">        Data:    users,</span><br><span class="line">        Meta: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            <span class="string">&quot;total&quot;</span>:     total,</span><br><span class="line">            <span class="string">&quot;page&quot;</span>:      page,</span><br><span class="line">            <span class="string">&quot;page_size&quot;</span>: pageSize,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、进阶主题与扩展"><a href="#五、进阶主题与扩展" class="headerlink" title="五、进阶主题与扩展"></a>五、进阶主题与扩展</h2><h3 id="1-部署与CI-CD"><a href="#1-部署与CI-CD" class="headerlink" title="1. 部署与CI&#x2F;CD"></a>1. 部署与CI&#x2F;CD</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">golang:1.19-alpine</span> <span class="string">AS</span> <span class="string">builder</span></span><br><span class="line"></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/app</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">.</span> <span class="string">.</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">go</span> <span class="string">mod</span> <span class="string">download</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">go</span> <span class="string">build</span> <span class="string">-o</span> <span class="string">app</span></span><br><span class="line"></span><br><span class="line"><span class="string">FROM</span> <span class="string">alpine:latest</span></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/app</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">--from=builder</span> <span class="string">/app/app</span> <span class="string">.</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">--from=builder</span> <span class="string">/app/configs</span> <span class="string">./configs</span></span><br><span class="line"></span><br><span class="line"><span class="string">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="string">CMD</span> [<span class="string">&quot;./app&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">APP_ENV=prod</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongodb</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mongodb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo-data:/data/db</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;27017:27017&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mongo-data:</span></span><br></pre></td></tr></table></figure><h3 id="2-监控与日志"><a href="#2-监控与日志" class="headerlink" title="2. 监控与日志"></a>2. 监控与日志</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指标收集</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/prometheus/client_golang/prometheus&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    httpRequestsTotal = prometheus.NewCounterVec(</span><br><span class="line">        prometheus.CounterOpts&#123;</span><br><span class="line">            Name: <span class="string">&quot;http_requests_total&quot;</span>,</span><br><span class="line">            Help: <span class="string">&quot;HTTP请求总数&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        []<span class="type">string</span>&#123;<span class="string">&quot;method&quot;</span>, <span class="string">&quot;path&quot;</span>, <span class="string">&quot;status&quot;</span>&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    httpRequestDuration = prometheus.NewHistogramVec(</span><br><span class="line">        prometheus.HistogramOpts&#123;</span><br><span class="line">            Name:    <span class="string">&quot;http_request_duration_seconds&quot;</span>,</span><br><span class="line">            Help:    <span class="string">&quot;HTTP请求处理时间&quot;</span>,</span><br><span class="line">            Buckets: prometheus.DefBuckets,</span><br><span class="line">        &#125;,</span><br><span class="line">        []<span class="type">string</span>&#123;<span class="string">&quot;method&quot;</span>, <span class="string">&quot;path&quot;</span>&#125;,</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    prometheus.MustRegister(httpRequestsTotal)</span><br><span class="line">    prometheus.MustRegister(httpRequestDuration)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Gin中添加指标端点</span></span><br><span class="line">r.GET(<span class="string">&quot;/metrics&quot;</span>, gin.WrapH(promhttp.Handler()))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志聚合与分析</span></span><br><span class="line"><span class="comment">// 1. 使用ELK/EFK堆栈</span></span><br><span class="line"><span class="comment">// 2. 使用OpenTelemetry进行分布式追踪</span></span><br></pre></td></tr></table></figure><h3 id="3-安全最佳实践"><a href="#3-安全最佳实践" class="headerlink" title="3. 安全最佳实践"></a>3. 安全最佳实践</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全最佳实践</span></span><br><span class="line"><span class="comment">// 1. 密码哈希</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hashPassword</span><span class="params">(password <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    hash, err := bcrypt.GenerateFromPassword([]<span class="type">byte</span>(password), bcrypt.DefaultCost)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(hash), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">verifyPassword</span><span class="params">(hashedPassword, password <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    err := bcrypt.CompareHashAndPassword([]<span class="type">byte</span>(hashedPassword), []<span class="type">byte</span>(password))</span><br><span class="line">    <span class="keyword">return</span> err == <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. CSRF保护</span></span><br><span class="line">r.Use(csrf.Middleware(csrf.Options&#123;</span><br><span class="line">    Secret: <span class="string">&quot;32-byte-long-auth-key&quot;</span>,</span><br><span class="line">    ErrorFunc: <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.JSON(http.StatusForbidden, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;CSRF token mismatch&quot;</span>&#125;)</span><br><span class="line">        c.Abort()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 安全标头</span></span><br><span class="line">r.Use(secure.New(secure.Options&#123;</span><br><span class="line">    AllowedHosts:          []<span class="type">string</span>&#123;<span class="string">&quot;example.com&quot;</span>, <span class="string">&quot;ssl.example.com&quot;</span>&#125;,</span><br><span class="line">    SSLRedirect:           <span class="literal">true</span>,</span><br><span class="line">    SSLHost:               <span class="string">&quot;ssl.example.com&quot;</span>,</span><br><span class="line">    STSSeconds:            <span class="number">315360000</span>,</span><br><span class="line">    STSIncludeSubdomains:  <span class="literal">true</span>,</span><br><span class="line">    FrameDeny:             <span class="literal">true</span>,</span><br><span class="line">    ContentTypeNosniff:    <span class="literal">true</span>,</span><br><span class="line">    BrowserXssFilter:      <span class="literal">true</span>,</span><br><span class="line">    ContentSecurityPolicy: <span class="string">&quot;default-src &#x27;self&#x27;&quot;</span>,</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><hr><h2 id="六、常见陷阱与解决方案"><a href="#六、常见陷阱与解决方案" class="headerlink" title="六、常见陷阱与解决方案"></a>六、常见陷阱与解决方案</h2><h3 id="1-初学者常见错误"><a href="#1-初学者常见错误" class="headerlink" title="1. 初学者常见错误"></a>1. 初学者常见错误</h3><blockquote><p>⚠️ <strong>陷阱</strong>: 在循环中使用 goroutine 时闭包捕获迭代变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(i)  <span class="comment">// 大多数情况下会打印出同一个值(10)</span></span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    i := i  <span class="comment">// 在循环内部创建新变量</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(i)  <span class="comment">// 每个 goroutine 有自己的 i 值</span></span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者通过参数传递</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(i)  <span class="comment">// i 作为参数传入</span></span><br><span class="line">    &#125;(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>⚠️ <strong>陷阱</strong>: nil 切片与空切片的混淆</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 []<span class="type">int</span>         <span class="comment">// nil 切片，s1 == nil 为 true</span></span><br><span class="line">s2 := []<span class="type">int</span>&#123;&#125;        <span class="comment">// 空切片，s2 == nil 为 false，但 len(s2) == 0</span></span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>) <span class="comment">// 空切片，s3 == nil 为 false，但 len(s3) == 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：虽然 nil 切片和空切片行为相似，都可以安全地调用 append</span></span><br><span class="line"><span class="comment">// 但是在序列化(如JSON)或比较时可能产生不同结果</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>⚠️ <strong>陷阱</strong>: 未检查 map 中键是否存在</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">value := m[<span class="string">&quot;b&quot;</span>] <span class="comment">// 如果键不存在，返回值类型的零值(这里是0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line">value, exists := m[<span class="string">&quot;b&quot;</span>] <span class="comment">// exists 将为 false</span></span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line">    <span class="comment">// 键存在</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 键不存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>⚠️ <strong>陷阱</strong>: 并发访问 map 引起 panic</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可能导致 panic 的并发代码</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        m[fmt.Sprintf(<span class="string">&quot;key%d&quot;</span>, i)] = i <span class="comment">// 写入 map</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        _ = m[fmt.Sprintf(<span class="string">&quot;key%d&quot;</span>, i)] <span class="comment">// 读取 map</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例：使用 sync.Map 或互斥锁</span></span><br><span class="line"><span class="keyword">var</span> m sync.Map</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入时</span></span><br><span class="line">mu.Lock()</span><br><span class="line">m[<span class="string">&quot;key&quot;</span>] = value</span><br><span class="line">mu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取时</span></span><br><span class="line">mu.Lock()</span><br><span class="line">value := m[<span class="string">&quot;key&quot;</span>]</span><br><span class="line">mu.Unlock()</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-性能优化提示"><a href="#2-性能优化提示" class="headerlink" title="2. 性能优化提示"></a>2. 性能优化提示</h3><blockquote><p>🚀 <strong>性能提示</strong>: 预分配内存以减少分配次数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 低效方式</span></span><br><span class="line">s := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">    s = <span class="built_in">append</span>(s, i) <span class="comment">// 可能导致多次重新分配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高效方式</span></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">10000</span>) <span class="comment">// 预分配容量</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">    s = <span class="built_in">append</span>(s, i) <span class="comment">// 不会重新分配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>🚀 <strong>性能提示</strong>: 在热路径上避免使用反射</p><p>反射在Go中是强大的特性，但性能代价很高。对于频繁调用的代码，尽量避免使用反射。</p><p>考虑使用代码生成、接口或类型断言等替代方案。</p></blockquote><blockquote><p>🚀 <strong>性能提示</strong>: 减少垃圾回收压力</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重用对象</span></span><br><span class="line"><span class="keyword">var</span> bufPool = sync.Pool&#123;</span><br><span class="line">    New: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 从池中获取</span></span><br><span class="line">    buf := bufPool.Get().(*bytes.Buffer)</span><br><span class="line">    <span class="keyword">defer</span> bufPool.Put(buf) <span class="comment">// 使用完放回池中</span></span><br><span class="line"></span><br><span class="line">    buf.Reset() <span class="comment">// 重置缓冲区</span></span><br><span class="line">    <span class="comment">// 使用 buf...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-代码风格最佳实践"><a href="#3-代码风格最佳实践" class="headerlink" title="3. 代码风格最佳实践"></a>3. 代码风格最佳实践</h3><blockquote><p>💎 <strong>最佳实践</strong>: 使用命名返回值提高可读性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不使用命名返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(a, b <span class="type">float64</span>)</span></span> (<span class="type">float64</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;除数不能为0&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用命名返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(a, b <span class="type">float64</span>)</span></span> (result <span class="type">float64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">        err = errors.New(<span class="string">&quot;除数不能为0&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">// 自动返回 result=0, err=错误</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = a / b</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// 自动返回 result=计算结果, err=nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>💎 <strong>最佳实践</strong>: 优雅处理资源清理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">&quot;file.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close() <span class="comment">// 确保函数返回前关闭文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理文件...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个defer语句按LIFO顺序执行</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>💎 <strong>最佳实践</strong>: 有意义的错误处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐：丢弃错误</span></span><br><span class="line">_ = SomeFunction()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐：空的if err != nil</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err <span class="comment">// 没有添加上下文</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐：添加上下文</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;处理文件时出错: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐：根据错误类型分别处理</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> errors.Is(err, os.ErrNotExist) &#123;</span><br><span class="line">        <span class="comment">// 处理文件不存在的情况</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> errors.Is(err, os.ErrPermission) &#123;</span><br><span class="line">        <span class="comment">// 处理权限错误</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理其他错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="七、泛型编程-Go-1-18"><a href="#七、泛型编程-Go-1-18" class="headerlink" title="七、泛型编程 (Go 1.18+)"></a>七、泛型编程 (Go 1.18+)</h2><h3 id="1-泛型函数"><a href="#1-泛型函数" class="headerlink" title="1. 泛型函数"></a>1. 泛型函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型函数</span></span><br><span class="line"><span class="comment">// 约束T为可比较的数字类型(int, float等)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Min</span>[<span class="title">T</span> <span class="title">constraints</span>.<span class="title">Ordered</span>]<span class="params">(x, y T)</span></span> T &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line">minInt := Min[<span class="type">int</span>](<span class="number">10</span>, <span class="number">20</span>)      <span class="comment">// 显式指定类型</span></span><br><span class="line">minFloat := Min(<span class="number">10.5</span>, <span class="number">20.5</span>)     <span class="comment">// 类型推断为float64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型类型</span></span><br><span class="line"><span class="keyword">type</span> Stack[T any] <span class="keyword">struct</span> &#123;</span><br><span class="line">    elements []T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型类型的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack[T])</span></span> Push(value T) &#123;</span><br><span class="line">    s.elements = <span class="built_in">append</span>(s.elements, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack[T])</span></span> Pop() (T, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> zero T</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s.elements) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> zero, errors.New(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    value := s.elements[<span class="built_in">len</span>(s.elements)<span class="number">-1</span>]</span><br><span class="line">    s.elements = s.elements[:<span class="built_in">len</span>(s.elements)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> value, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型类型</span></span><br><span class="line">stringStack := Stack[<span class="type">string</span>]&#123;&#125;</span><br><span class="line">stringStack.Push(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">stringStack.Push(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">value, _ := stringStack.Pop() <span class="comment">// &quot;world&quot;</span></span><br></pre></td></tr></table></figure><p><strong>泛型约束</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用constraints包中的约束</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;golang.org/x/exp/constraints&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值类型约束</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span>[<span class="title">T</span> <span class="title">constraints</span>.<span class="title">Integer</span> | <span class="title">constraints</span>.<span class="title">Float</span>]<span class="params">(values []T)</span></span> T &#123;</span><br><span class="line">    <span class="keyword">var</span> sum T</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> values &#123;</span><br><span class="line">        sum += v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义约束</span></span><br><span class="line"><span class="keyword">type</span> Comparable <span class="keyword">interface</span> &#123;</span><br><span class="line">    comparable  <span class="comment">// 内建约束，表示可以用==和!=比较</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合约束</span></span><br><span class="line"><span class="keyword">type</span> Number <span class="keyword">interface</span> &#123;</span><br><span class="line">    constraints.Integer | constraints.Float</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带方法的约束</span></span><br><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构化类型约束</span></span><br><span class="line"><span class="keyword">type</span> HasAge <span class="keyword">interface</span> &#123;</span><br><span class="line">    Age() <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>泛型使用场景</strong>:</p><ul><li>通用容器类型（栈、队列、树等）</li><li>算法实现（排序、搜索等）</li><li>避免接口+类型断言或反射的性能开销</li><li>减少代码重复</li></ul><p><strong>泛型最佳实践</strong>:</p><ul><li>只在真正需要泛型的地方使用它</li><li>优先使用简单的约束</li><li>提供有意义的类型参数名（如<code>[K, V]</code>用于键值对）</li><li>不要过度设计泛型类型</li></ul><hr><h2 id="八、核心知识点回顾"><a href="#八、核心知识点回顾" class="headerlink" title="八、核心知识点回顾"></a>八、核心知识点回顾</h2><p>以下是Go语言学习过程中的核心知识点总结，作为快速参考和复习使用。</p><h3 id="1-语法与基础结构"><a href="#1-语法与基础结构" class="headerlink" title="1. 语法与基础结构"></a>1. 语法与基础结构</h3><table><thead><tr><th>知识点</th><th>关键要点</th><th>重要度</th></tr></thead><tbody><tr><td>基本语法</td><td>强类型，编译型，垃圾回收，并发支持</td><td>★★★★★</td></tr><tr><td>包管理</td><td>package声明，import导入，go mod管理</td><td>★★★★★</td></tr><tr><td>变量声明</td><td>var声明，:&#x3D;短声明，多变量声明，类型推断</td><td>★★★★★</td></tr><tr><td>基本类型</td><td>int&#x2F;uint, float, string, bool, byte, rune</td><td>★★★★★</td></tr><tr><td>复合类型</td><td>array, slice, map, struct, pointer, interface</td><td>★★★★★</td></tr><tr><td>控制流</td><td>if&#x2F;else, switch, for循环, range</td><td>★★★★★</td></tr></tbody></table><h3 id="2-函数与数据结构"><a href="#2-函数与数据结构" class="headerlink" title="2. 函数与数据结构"></a>2. 函数与数据结构</h3><table><thead><tr><th>知识点</th><th>关键要点</th><th>重要度</th></tr></thead><tbody><tr><td>函数定义</td><td>值传递，多返回值，命名返回值，可变参数</td><td>★★★★★</td></tr><tr><td>方法</td><td>值接收者vs指针接收者，方法集</td><td>★★★★★</td></tr><tr><td>结构体</td><td>字段，嵌套，标签，零值，初始化</td><td>★★★★★</td></tr><tr><td>接口</td><td>隐式实现，空接口，类型断言，接口组合</td><td>★★★★★</td></tr><tr><td>错误处理</td><td>error接口，error wrap&#x2F;unwrap</td><td>★★★★★</td></tr><tr><td>defer</td><td>资源清理，函数结束执行，LIFO顺序</td><td>★★★★☆</td></tr></tbody></table><h3 id="3-并发编程"><a href="#3-并发编程" class="headerlink" title="3. 并发编程"></a>3. 并发编程</h3><table><thead><tr><th>知识点</th><th>关键要点</th><th>重要度</th></tr></thead><tbody><tr><td>goroutine</td><td>轻量级线程，启动方式，生命周期</td><td>★★★★★</td></tr><tr><td>channel</td><td>有缓冲vs无缓冲，关闭通道，range通道</td><td>★★★★★</td></tr><tr><td>select</td><td>多通道操作，超时处理，非阻塞IO</td><td>★★★★★</td></tr><tr><td>sync包</td><td>Mutex, RWMutex, WaitGroup, Once, Map</td><td>★★★★☆</td></tr><tr><td>context</td><td>超时控制，取消操作，值传递</td><td>★★★★★</td></tr><tr><td>竞态检测</td><td>go build&#x2F;test -race，避免数据竞争</td><td>★★★★☆</td></tr></tbody></table><h3 id="4-工程实践"><a href="#4-工程实践" class="headerlink" title="4. 工程实践"></a>4. 工程实践</h3><table><thead><tr><th>知识点</th><th>关键要点</th><th>重要度</th></tr></thead><tbody><tr><td>项目结构</td><td>标准布局，DDD分层，模块化设计</td><td>★★★★☆</td></tr><tr><td>依赖管理</td><td>go.mod, go.sum, replace, 版本管理</td><td>★★★★☆</td></tr><tr><td>测试</td><td>表驱动测试，测试辅助函数，Mock测试</td><td>★★★★☆</td></tr><tr><td>文档</td><td>godoc, 示例测试，pkgsite</td><td>★★★☆☆</td></tr><tr><td>性能</td><td>pprof, trace, benchmark, 内存管理</td><td>★★★★☆</td></tr><tr><td>部署</td><td>交叉编译，Docker容器化，CI&#x2F;CD</td><td>★★★★☆</td></tr></tbody></table><h3 id="5-Web开发"><a href="#5-Web开发" class="headerlink" title="5. Web开发"></a>5. Web开发</h3><table><thead><tr><th>知识点</th><th>关键要点</th><th>重要度</th></tr></thead><tbody><tr><td>net&#x2F;http</td><td>ListenAndServe, Handler接口, ServeMux</td><td>★★★★☆</td></tr><tr><td>中间件</td><td>处理链，装饰器模式，恢复和日志</td><td>★★★★☆</td></tr><tr><td>数据库</td><td>database&#x2F;sql接口，ORM工具，事务处理</td><td>★★★★☆</td></tr><tr><td>API设计</td><td>RESTful, JSON处理，状态码，错误响应</td><td>★★★★☆</td></tr><tr><td>认证授权</td><td>JWT，OAuth2，会话管理</td><td>★★★★☆</td></tr><tr><td>并发模型</td><td>请求处理模型，goroutine管理</td><td>★★★★☆</td></tr></tbody></table><blockquote><p><strong>总结使用提示</strong>：</p><ul><li>重要度从★☆☆☆☆(最低)到★★★★★(最高)，表示在实际项目中的使用频率和重要性</li><li>这些知识点是相互关联的，应综合理解和应用</li><li>定期回顾这些核心知识点，巩固对Go语言的理解</li></ul></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Go语言学习总结&quot;&gt;&lt;a href=&quot;#Go语言学习总结&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习总结&quot;&gt;&lt;/a&gt;Go语言学习总结&lt;/h1&gt;&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://aoayaoa.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Deno学习记录</title>
    <link href="https://aoayaoa.github.io/2025/04/15/deno%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://aoayaoa.github.io/2025/04/15/deno%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2025-04-14T16:00:00.000Z</published>
    <updated>2025-04-16T02:50:03.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Deno学习记录-📘"><a href="#Deno学习记录-📘" class="headerlink" title="Deno学习记录 📘"></a>Deno学习记录 📘</h1><div align="left"><p><img src= "/img/loading.gif" data-lazy-src="https://img.shields.io/badge/Deno-v1.x-black?logo=deno" alt="Deno"><br><img src= "/img/loading.gif" data-lazy-src="https://img.shields.io/badge/TypeScript-v5.x-blue?logo=typescript" alt="TypeScript"><br><img src= "/img/loading.gif" data-lazy-src="https://img.shields.io/badge/MongoDB-v6.x-green?logo=mongodb" alt="MongoDB"><br><img src= "/img/loading.gif" data-lazy-src="https://img.shields.io/badge/Oak-v12.x-lightgrey" alt="Oak"></p><h2 id="📋-目录"><a href="#📋-目录" class="headerlink" title="📋 目录"></a>📋 目录</h2><h3 id="一、Deno基础技术"><a href="#一、Deno基础技术" class="headerlink" title="一、Deno基础技术"></a>一、Deno基础技术</h3><ul><li><a href="#%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0">项目概述</a></li><li><a href="#%E6%8A%80%E6%9C%AF%E6%A0%88">技术栈</a></li><li><a href="#deno%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95">Deno基础用法</a></li><li><a href="#%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86">权限管理</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">常用命令</a></li><li><a href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">环境变量</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%92%8C%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86">第三方库和依赖管理</a></li><li><a href="#deno%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97">Deno部署指南</a></li></ul><h3 id="二、项目具体实现"><a href="#二、项目具体实现" class="headerlink" title="二、项目具体实现"></a>二、项目具体实现</h3><ul><li><a href="#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84">项目结构</a></li><li><a href="#api%E8%B7%AF%E7%94%B1">API路由</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B">数据模型</a></li><li><a href="#mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C">MongoDB数据库操作</a></li><li><a href="#mbti%E6%B5%8B%E8%AF%95%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82">MBTI测试实现细节</a></li></ul><h3 id="三、最佳实践和扩展"><a href="#三、最佳实践和扩展" class="headerlink" title="三、最佳实践和扩展"></a>三、最佳实践和扩展</h3><ul><li><a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">注意事项和最佳实践</a></li><li><a href="#%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E4%B8%8Eui%E4%BC%98%E5%8C%96">前端展示与UI优化</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5">常见问题排查</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83">代码规范</a></li><li><a href="#%E6%89%A9%E5%B1%95%E5%92%8C%E6%94%B9%E8%BF%9B">扩展和改进</a></li><li><a href="#%E8%B5%84%E6%BA%90%E9%93%BE%E6%8E%A5">资源链接</a></li></ul><hr><h2 id="🚀-项目概述"><a href="#🚀-项目概述" class="headerlink" title="🚀 项目概述"></a>🚀 项目概述</h2><p>这是一个基于Deno运行时的后端服务项目，主要功能包括MBTI人格测试系统。项目采用TypeScript语言开发，使用Oak HTTP服务器框架处理HTTP请求，MongoDB作为数据存储解决方案。</p><hr><h2 id="💻-技术栈"><a href="#💻-技术栈" class="headerlink" title="💻 技术栈"></a>💻 技术栈</h2><table><thead><tr><th>分类</th><th>技术</th><th>描述</th></tr></thead><tbody><tr><td><strong>运行时环境</strong></td><td>Deno</td><td>安全的JavaScript和TypeScript运行时</td></tr><tr><td><strong>语言</strong></td><td>TypeScript</td><td>带有类型系统的JavaScript超集</td></tr><tr><td><strong>HTTP服务器框架</strong></td><td>Oak</td><td>受Koa启发的Deno中间件框架</td></tr><tr><td><strong>数据库</strong></td><td>MongoDB</td><td>NoSQL文档数据库</td></tr><tr><td><strong>ODM</strong></td><td>Mongoose</td><td>MongoDB对象模型工具</td></tr><tr><td><strong>API文档</strong></td><td>暂无</td><td>可考虑添加Swagger</td></tr><tr><td><strong>测试框架</strong></td><td>Deno内置测试工具</td><td>Deno自带的测试功能</td></tr></tbody></table><hr><h2 id="🛠️-环境准备"><a href="#🛠️-环境准备" class="headerlink" title="🛠️ 环境准备"></a>🛠️ 环境准备</h2><p>在开始项目之前，请准备以下环境：</p><h3 id="1-安装Deno"><a href="#1-安装Deno" class="headerlink" title="1. 安装Deno"></a>1. 安装Deno</h3><p>Deno 是一个现代的JavaScript和TypeScript运行时环境。推荐使用以下命令安装：</p><table><thead><tr><th>操作系统</th><th>命令</th></tr></thead><tbody><tr><td>macOS &#x2F; Linux</td><td>`curl -fsSL <a href="https://deno.land/install.sh">https://deno.land/install.sh</a></td></tr><tr><td>Windows</td><td>`irm <a href="https://deno.land/install.ps1">https://deno.land/install.ps1</a></td></tr></tbody></table><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deno --version</span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：更多安装选项（如Homebrew）请参考 Deno安装指南。</p></blockquote><h3 id="2-安装MongoDB"><a href="#2-安装MongoDB" class="headerlink" title="2. 安装MongoDB"></a>2. 安装MongoDB</h3><p>项目使用 MongoDB 作为数据库。您可以选择本地安装或使用Docker。</p><h4 id="2-1-本地安装MongoDB"><a href="#2-1-本地安装MongoDB" class="headerlink" title="2.1 本地安装MongoDB"></a>2.1 本地安装MongoDB</h4><p>请访问 MongoDB安装指南 安装。启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod</span><br></pre></td></tr></table></figure><h4 id="2-2-使用Docker运行MongoDB"><a href="#2-2-使用Docker运行MongoDB" class="headerlink" title="2.2 使用Docker运行MongoDB"></a>2.2 使用Docker运行MongoDB</h4><p>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 27017:27017 --name mongodb mongo:latest</span><br></pre></td></tr></table></figure><h2 id="🦕-Deno基础用法"><a href="#🦕-Deno基础用法" class="headerlink" title="🦕 Deno基础用法"></a>🦕 Deno基础用法</h2><h2 id="⚡-常用命令"><a href="#⚡-常用命令" class="headerlink" title="⚡ 常用命令"></a>⚡ 常用命令</h2><p>项目中定义了多个Deno任务，可以通过<code>deno task &lt;task_name&gt;</code>执行：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>deno task dev</code></td><td>开发模式启动</td></tr><tr><td><code>deno task start</code></td><td>生产模式启动</td></tr><tr><td><code>deno task hot-reload</code></td><td>热重载模式</td></tr><tr><td><code>deno task test</code></td><td>运行测试</td></tr><tr><td><code>deno task mongo:init</code></td><td>初始化MongoDB</td></tr><tr><td><code>deno task mongo:generate-mbti</code></td><td>生成MBTI测试数据</td></tr><tr><td><code>deno run task -- watch</code></td><td>监听文件变化</td></tr></tbody></table><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>Deno提供了简单直观的文件API：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步读取文件</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="title class_">Deno</span>.<span class="title function_">readTextFileSync</span>(<span class="string">&quot;./data/config.json&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取文件</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> text = <span class="keyword">await</span> <span class="title class_">Deno</span>.<span class="title function_">readTextFile</span>(<span class="string">&quot;./data/users.json&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> users = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(users);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;读取文件失败:&quot;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取二进制文件</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">Deno</span>.<span class="title function_">readFile</span>(<span class="string">&quot;./assets/image.png&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步写入文本文件</span></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&quot;Test User&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;test@example.com&quot;</span> &#125;;</span><br><span class="line"><span class="title class_">Deno</span>.<span class="title function_">writeTextFileSync</span>(<span class="string">&quot;./data/user.json&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步写入文件</span></span><br><span class="line"><span class="keyword">await</span> <span class="title class_">Deno</span>.<span class="title function_">writeTextFile</span>(<span class="string">&quot;./logs/app.log&quot;</span>, <span class="string">`[<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString()&#125;</span>] Server started\n`</span>, &#123; <span class="attr">append</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入二进制文件</span></span><br><span class="line"><span class="keyword">await</span> <span class="title class_">Deno</span>.<span class="title function_">writeFile</span>(<span class="string">&quot;./output/data.bin&quot;</span>, <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));</span><br></pre></td></tr></table></figure><h4 id="文件操作工具函数"><a href="#文件操作工具函数" class="headerlink" title="文件操作工具函数"></a>文件操作工具函数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断文件是否存在</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fileExists</span>(<span class="params"><span class="attr">path</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Deno</span>.<span class="title function_">stat</span>(path);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">Deno</span>.<span class="property">errors</span>.<span class="property">NotFound</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目录（如果不存在）</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">ensureDir</span>(<span class="params"><span class="attr">dir</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fileInfo = <span class="keyword">await</span> <span class="title class_">Deno</span>.<span class="title function_">stat</span>(dir);</span><br><span class="line">    <span class="keyword">if</span> (!fileInfo.<span class="property">isDirectory</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`路径存在但不是目录: <span class="subst">$&#123;dir&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">Deno</span>.<span class="property">errors</span>.<span class="property">NotFound</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title class_">Deno</span>.<span class="title function_">mkdir</span>(dir, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理静态资源"><a href="#处理静态资源" class="headerlink" title="处理静态资源"></a>处理静态资源</h3><p>在Oak HTTP服务器框架中使用静态文件中间件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Application</span>, <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&quot;oak&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; send &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/oak@v12.6.1/send.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Application</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态文件处理中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 处理静态文件请求</span></span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">request</span>.<span class="property">url</span>.<span class="property">pathname</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;/static&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> path = ctx.<span class="property">request</span>.<span class="property">url</span>.<span class="property">pathname</span>.<span class="title function_">replace</span>(<span class="string">&quot;/static&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">send</span>(ctx, path, &#123;</span><br><span class="line">        <span class="attr">root</span>: <span class="string">`<span class="subst">$&#123;Deno.cwd()&#125;</span>/public`</span>,</span><br><span class="line">        <span class="attr">index</span>: <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">status</span> !== <span class="number">404</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义静态文件服务函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">serveStaticFile</span>(<span class="params"><span class="attr">ctx</span>: <span class="title class_">Context</span>, <span class="attr">filePath</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fullPath = <span class="string">`<span class="subst">$&#123;Deno.cwd()&#125;</span>/public/<span class="subst">$&#123;filePath&#125;</span>`</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查文件是否存在</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title class_">Deno</span>.<span class="title function_">stat</span>(fullPath);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">Deno</span>.<span class="property">errors</span>.<span class="property">NotFound</span>) &#123;</span><br><span class="line">        ctx.<span class="property">response</span>.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">        ctx.<span class="property">response</span>.<span class="property">body</span> = &#123; <span class="attr">error</span>: <span class="string">&quot;File not found&quot;</span> &#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置内容类型</span></span><br><span class="line">    <span class="keyword">let</span> contentType = <span class="string">&quot;application/octet-stream&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (filePath.<span class="title function_">endsWith</span>(<span class="string">&quot;.html&quot;</span>)) contentType = <span class="string">&quot;text/html&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (filePath.<span class="title function_">endsWith</span>(<span class="string">&quot;.css&quot;</span>)) contentType = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (filePath.<span class="title function_">endsWith</span>(<span class="string">&quot;.js&quot;</span>)) contentType = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (filePath.<span class="title function_">endsWith</span>(<span class="string">&quot;.json&quot;</span>)) contentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (filePath.<span class="title function_">endsWith</span>(<span class="string">&quot;.png&quot;</span>)) contentType = <span class="string">&quot;image/png&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (filePath.<span class="title function_">endsWith</span>(<span class="string">&quot;.jpg&quot;</span>) || filePath.<span class="title function_">endsWith</span>(<span class="string">&quot;.jpeg&quot;</span>)) contentType = <span class="string">&quot;image/jpeg&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取并发送文件</span></span><br><span class="line">    <span class="keyword">const</span> content = <span class="keyword">await</span> <span class="title class_">Deno</span>.<span class="title function_">readFile</span>(fullPath);</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">headers</span>.<span class="title function_">set</span>(<span class="string">&quot;Content-Type&quot;</span>, contentType);</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span> = content;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`提供静态文件失败: <span class="subst">$&#123;filePath&#125;</span>`</span>, error);</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">status</span> = <span class="number">500</span>;</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span> = &#123; <span class="attr">error</span>: <span class="string">&quot;Internal server error&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/images/:filename&quot;</span>, <span class="title function_">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> filename = ctx.<span class="property">params</span>.<span class="property">filename</span>;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">serveStaticFile</span>(ctx, <span class="string">`images/<span class="subst">$&#123;filename&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用Web标准API"><a href="#使用Web标准API" class="headerlink" title="使用Web标准API"></a>使用Web标准API</h3><p>Deno使用Web标准API进行开发，无需额外的库：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用fetch API发起网络请求</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"><span class="attr">url</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP错误: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;请求失败:&quot;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用URL API解析URL</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;https://example.com/api/users?page=1&amp;limit=10&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&quot;page&quot;</span>)); <span class="comment">// &quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用EventTarget</span></span><br><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> <span class="title class_">EventTarget</span>();</span><br><span class="line">target.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到消息:&quot;</span>, event.<span class="property">detail</span>);</span><br><span class="line">&#125;);</span><br><span class="line">target.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&quot;message&quot;</span>, &#123; <span class="attr">detail</span>: <span class="string">&quot;Hello Deno!&quot;</span> &#125;));</span><br></pre></td></tr></table></figure><h3 id="使用Web-Worker"><a href="#使用Web-Worker" class="headerlink" title="使用Web Worker"></a>使用Web Worker</h3><p>Deno支持多线程处理：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="comment">// 创建Web Worker</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;./worker.ts&quot;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>).<span class="property">href</span>, &#123; <span class="attr">type</span>: <span class="string">&quot;module&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息到Worker</span></span><br><span class="line">worker.<span class="title function_">postMessage</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;process&quot;</span>, <span class="attr">data</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理Worker返回的消息</span></span><br><span class="line">worker.<span class="property">onmessage</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Worker结果:&quot;</span>, e.<span class="property">data</span>);</span><br><span class="line">  <span class="comment">// 完成后终止Worker</span></span><br><span class="line">  worker.<span class="title function_">terminate</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker.ts</span></span><br><span class="line"><span class="comment">// 接收并处理主线程消息</span></span><br><span class="line">self.<span class="property">onmessage</span> = <span class="title function_">async</span> (e) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="keyword">type</span>, data &#125; = e.<span class="property">data</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;process&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行耗时操作</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">processData</span>(data);</span><br><span class="line">    <span class="comment">// 返回结果给主线程</span></span><br><span class="line">    self.<span class="title function_">postMessage</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params"><span class="attr">numbers</span>: <span class="built_in">number</span>[]</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 模拟耗时计算</span></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>));</span><br><span class="line">  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, num</span>) =&gt;</span> sum + num, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行Shell命令"><a href="#执行Shell命令" class="headerlink" title="执行Shell命令"></a>执行Shell命令</h3><p>Deno提供API执行子进程：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单命令执行</span></span><br><span class="line"><span class="keyword">const</span> process = <span class="title class_">Deno</span>.<span class="title function_">run</span>(&#123;</span><br><span class="line">  <span class="attr">cmd</span>: [<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-la&quot;</span>],</span><br><span class="line">  <span class="attr">stdout</span>: <span class="string">&quot;piped&quot;</span>,</span><br><span class="line">  <span class="attr">stderr</span>: <span class="string">&quot;piped&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待命令完成并获取输出</span></span><br><span class="line"><span class="keyword">const</span> &#123; code &#125; = <span class="keyword">await</span> process.<span class="title function_">status</span>();</span><br><span class="line"><span class="keyword">if</span> (code === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> output = <span class="keyword">await</span> process.<span class="title function_">output</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">TextDecoder</span>().<span class="title function_">decode</span>(output));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> errorOutput = <span class="keyword">await</span> process.<span class="title function_">stderrOutput</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="keyword">new</span> <span class="title class_">TextDecoder</span>().<span class="title function_">decode</span>(errorOutput));</span><br><span class="line">&#125;</span><br><span class="line">process.<span class="title function_">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递环境变量</span></span><br><span class="line"><span class="keyword">const</span> process = <span class="title class_">Deno</span>.<span class="title function_">run</span>(&#123;</span><br><span class="line">  <span class="attr">cmd</span>: [<span class="string">&quot;printenv&quot;</span>, <span class="string">&quot;MY_VARIABLE&quot;</span>],</span><br><span class="line">  <span class="attr">env</span>: &#123; <span class="string">&quot;MY_VARIABLE&quot;</span>: <span class="string">&quot;Hello Deno!&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">stdout</span>: <span class="string">&quot;piped&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用WebSocket"><a href="#使用WebSocket" class="headerlink" title="使用WebSocket"></a>使用WebSocket</h3><p>Deno支持WebSocket进行实时通信：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端WebSocket</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Application</span> &#125; <span class="keyword">from</span> <span class="string">&quot;oak&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Server</span> &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std@0.196.0/http/server.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WebSocketServer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/websocket@v0.1.4/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建WebSocket服务器</span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新客户端连接&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 处理消息</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到消息:&quot;</span>, message);</span><br><span class="line">    <span class="comment">// 广播消息给所有客户端</span></span><br><span class="line">    wss.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (client.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">        client.<span class="title function_">send</span>(<span class="string">`服务器时间: <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString()&#125;</span>, 消息: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 处理连接关闭</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;客户端断开连接&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端WebSocket</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080&quot;</span>);</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接已建立&quot;</span>);</span><br><span class="line">  socket.<span class="title function_">send</span>(<span class="string">&quot;Hello Server!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到消息:&quot;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接已关闭&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="🔐-环境变量"><a href="#🔐-环境变量" class="headerlink" title="🔐 环境变量"></a>🔐 环境变量</h2><p>项目通过<code>.env</code>文件和<code>Deno.env.get()</code>方法管理环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MONGODB_URI=mongodb://[username]:[password]@[host]/</span><br><span class="line">MONGODB_DATABASE=database_name</span><br></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>警告</strong>: 切勿将包含敏感信息的.env文件提交到版本控制系统。</p></blockquote><hr><h2 id="🛡️-权限管理"><a href="#🛡️-权限管理" class="headerlink" title="🛡️ 权限管理"></a>🛡️ 权限管理</h2><p>Deno需要明确的权限才能访问系统资源：</p><table><thead><tr><th>权限标志</th><th>描述</th></tr></thead><tbody><tr><td><code>--allow-net</code></td><td>网络访问权限</td></tr><tr><td><code>--allow-env</code></td><td>环境变量访问权限</td></tr><tr><td><code>--allow-read</code></td><td>文件读取权限</td></tr><tr><td><code>--allow-write</code></td><td>文件写入权限</td></tr><tr><td><code>--allow-sys</code></td><td>系统信息访问权限</td></tr></tbody></table><p>在<code>deno.json</code>中，这些权限已通过task配置进行预设。</p><hr><h2 id="📦-第三方库和依赖管理"><a href="#📦-第三方库和依赖管理" class="headerlink" title="📦 第三方库和依赖管理"></a>📦 第三方库和依赖管理</h2><h3 id="常用第三方库"><a href="#常用第三方库" class="headerlink" title="常用第三方库"></a>常用第三方库</h3><table><thead><tr><th>库名</th><th>来源</th><th>作用</th><th>用法示例</th></tr></thead><tbody><tr><td><strong>Oak</strong></td><td>JSR</td><td>HTTP服务器框架</td><td><code>import &#123; Application &#125; from &quot;oak&quot;;</code></td></tr><tr><td><strong>Mongoose</strong></td><td>npm</td><td>MongoDB对象建模工具</td><td><code>import mongoose from &quot;mongoose&quot;;</code></td></tr><tr><td><strong>Zod</strong></td><td>npm</td><td>类型验证库</td><td><code>import &#123; z &#125; from &quot;zod&quot;;</code></td></tr><tr><td><strong>std&#x2F;assert</strong></td><td>JSR</td><td>断言库</td><td><code>import &#123; assertEquals &#125; from &quot;@std/assert&quot;;</code></td></tr><tr><td><strong>cliffy</strong></td><td>deno.land</td><td>CLI框架和工具</td><td><code>import &#123; Command &#125; from &quot;cliffy&quot;;</code></td></tr><tr><td><strong>Fresh</strong></td><td>JSR</td><td>Web框架</td><td><code>import &#123; defineConfig &#125; from &quot;fresh&quot;;</code></td></tr><tr><td><strong>MD5</strong></td><td>npm</td><td>哈希加密算法</td><td><code>import md5 from &quot;md5&quot;;</code></td></tr><tr><td><strong>AJV</strong></td><td>esm.sh</td><td>JSON Schema验证器</td><td><code>import Ajv from &quot;ajv&quot;;</code></td></tr><tr><td><strong>JWT</strong></td><td>deno.land</td><td>JSON Web Token处理</td><td><code>import &#123; create, verify &#125; from &quot;djwt&quot;;</code></td></tr></tbody></table><h3 id="数据验证与安全相关库"><a href="#数据验证与安全相关库" class="headerlink" title="数据验证与安全相关库"></a>数据验证与安全相关库</h3><h4 id="1-AJV-和-JSON-Schema"><a href="#1-AJV-和-JSON-Schema" class="headerlink" title="1. AJV 和 JSON Schema"></a>1. AJV 和 JSON Schema</h4><p><a href="https://ajv.js.org/">AJV</a>是一个高性能的JSON Schema验证器，用于验证数据结构是否符合预定义的模式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Ajv</span> <span class="keyword">from</span> <span class="string">&quot;ajv&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> addFormats <span class="keyword">from</span> <span class="string">&quot;ajv-formats&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化AJV</span></span><br><span class="line"><span class="keyword">const</span> ajv = <span class="keyword">new</span> <span class="title class_">Ajv</span>(&#123;</span><br><span class="line">  <span class="attr">allErrors</span>: <span class="literal">true</span>,      <span class="comment">// 报告所有错误（而不是第一个）</span></span><br><span class="line">  <span class="attr">removeAdditional</span>: <span class="literal">true</span>, <span class="comment">// 删除schema中未定义的属性</span></span><br><span class="line">  <span class="attr">useDefaults</span>: <span class="literal">true</span>     <span class="comment">// 使用模式中定义的默认值</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加格式验证</span></span><br><span class="line"><span class="title function_">addFormats</span>(ajv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义JSON Schema</span></span><br><span class="line"><span class="keyword">const</span> userSchema = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;string&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">name</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>, <span class="attr">minLength</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    <span class="attr">email</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>, <span class="attr">format</span>: <span class="string">&quot;email&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">age</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;number&quot;</span>, <span class="attr">minimum</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">required</span>: [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;email&quot;</span>],</span><br><span class="line">  <span class="attr">additionalProperties</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译schema以便重复使用</span></span><br><span class="line"><span class="keyword">const</span> validateUser = ajv.<span class="title function_">compile</span>(userSchema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用封装的验证工具</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validateData</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">unknown</span>, <span class="attr">schema</span>: <span class="built_in">object</span></span>): &#123; <span class="attr">isValid</span>: <span class="built_in">boolean</span>; <span class="attr">errors</span>: <span class="built_in">any</span>[] &#125; &#123;</span><br><span class="line">  <span class="keyword">const</span> validate = ajv.<span class="title function_">compile</span>(schema);</span><br><span class="line">  <span class="keyword">const</span> isValid = <span class="title function_">validate</span>(data);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isValid,</span><br><span class="line">    <span class="attr">errors</span>: isValid ? [] : (validate.<span class="property">errors</span> || [])</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">validateData</span>(userData, userSchema);</span><br><span class="line"><span class="keyword">if</span> (!result.<span class="property">isValid</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;数据验证失败:&quot;</span>, result.<span class="property">errors</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最佳实践：</strong></p><ul><li>集中管理所有JSON Schema定义</li><li>为复杂API创建可重用的验证函数</li><li>使用AJV的自定义关键字和格式拓展特定需求</li><li>在API端点处理前验证请求数据</li></ul><h4 id="2-MD5"><a href="#2-MD5" class="headerlink" title="2. MD5"></a>2. MD5</h4><p>MD5是一种广泛使用的哈希算法，在项目中常用于密码加密或生成唯一标识符：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">&quot;md5&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本使用</span></span><br><span class="line"><span class="keyword">const</span> hash = <span class="title function_">md5</span>(<span class="string">&quot;some-string&quot;</span>); <span class="comment">// 返回32字符的哈希字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于密码加密（推荐添加盐值）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hashPassword</span>(<span class="params"><span class="attr">password</span>: <span class="built_in">string</span>, <span class="attr">salt</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">md5</span>(password + salt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于生成API请求签名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateSignature</span>(<span class="params"><span class="attr">params</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;, <span class="attr">secretKey</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="comment">// 按字母顺序排序参数</span></span><br><span class="line">  <span class="keyword">const</span> sortedKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="title function_">sort</span>();</span><br><span class="line">  <span class="keyword">let</span> signStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 构建签名字符串</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> sortedKeys) &#123;</span><br><span class="line">    signStr += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>&amp;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 添加密钥并生成最终签名</span></span><br><span class="line">  signStr += secretKey;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">md5</span>(signStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>安全提示：</strong></p><ul><li>⚠️ MD5不再被认为是安全的密码哈希算法</li><li>对于密码存储，推荐使用更安全的算法如bcrypt或Argon2</li><li>MD5适用于非安全场景如缓存键生成、内容完整性校验等</li></ul><h4 id="3-JWT-JSON-Web-Token"><a href="#3-JWT-JSON-Web-Token" class="headerlink" title="3. JWT (JSON Web Token)"></a>3. JWT (JSON Web Token)</h4><p>JWT用于创建和验证令牌，常用于身份验证和授权：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; create, verify, decode &#125; <span class="keyword">from</span> <span class="string">&quot;djwt&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; crypto &#125; <span class="keyword">from</span> <span class="string">&quot;std/crypto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成密钥</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">generateKey</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">CryptoKey</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> crypto.<span class="property">subtle</span>.<span class="title function_">generateKey</span>(</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;HMAC&quot;</span>, <span class="attr">hash</span>: <span class="string">&quot;SHA-512&quot;</span> &#125;,</span><br><span class="line">    <span class="literal">true</span>,</span><br><span class="line">    [<span class="string">&quot;sign&quot;</span>, <span class="string">&quot;verify&quot;</span>]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建JWT令牌</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createToken</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">payload</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt;, </span></span><br><span class="line"><span class="params">  <span class="attr">expiresIn</span>: <span class="built_in">number</span> = <span class="number">60</span> * <span class="number">60</span> <span class="comment">// 1小时，以秒为单位</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="keyword">await</span> <span class="title function_">generateKey</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> jwt = <span class="keyword">await</span> <span class="title function_">create</span>(</span><br><span class="line">    &#123; <span class="attr">alg</span>: <span class="string">&quot;HS512&quot;</span>, <span class="attr">typ</span>: <span class="string">&quot;JWT&quot;</span> &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">      ...payload, </span><br><span class="line">      <span class="attr">exp</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() / <span class="number">1000</span>) + expiresIn </span><br><span class="line">    &#125;,</span><br><span class="line">    key</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> jwt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证JWT令牌</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">verifyToken</span>(<span class="params"><span class="attr">token</span>: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt; | <span class="literal">null</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="keyword">await</span> <span class="title function_">generateKey</span>(); <span class="comment">// 生产环境中应该重用密钥</span></span><br><span class="line">    <span class="keyword">const</span> payload = <span class="keyword">await</span> <span class="title function_">verify</span>(token, key);</span><br><span class="line">    <span class="keyword">return</span> payload;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;JWT验证失败:&quot;</span>, err);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> userToken = <span class="keyword">await</span> <span class="title function_">createToken</span>(&#123; <span class="attr">userId</span>: <span class="string">&quot;123&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;admin&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// 在请求头中使用: Authorization: Bearer &lt;token&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 身份验证中间件</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">authMiddleware</span>(<span class="params"><span class="attr">ctx</span>: <span class="title class_">Context</span>, <span class="attr">next</span>: <span class="title class_">Next</span></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> authHeader = ctx.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!authHeader || !authHeader.<span class="title function_">startsWith</span>(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;缺少有效的授权令牌&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> token = authHeader.<span class="title function_">replace</span>(<span class="string">&quot;Bearer &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> payload = <span class="keyword">await</span> <span class="title function_">verifyToken</span>(token);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!payload) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;无效的令牌&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将用户信息附加到上下文</span></span><br><span class="line">    ctx.<span class="property">state</span>.<span class="property">user</span> = payload;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">status</span> = <span class="number">401</span>;</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">code</span>: <span class="number">401</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;未授权访问&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JWT最佳实践：</strong></p><ul><li>设置合理的过期时间，避免令牌永久有效</li><li>仅在令牌中存储必要信息，避免存储敏感数据</li><li>使用HTTPS传输令牌</li><li>实现令牌刷新机制</li><li>考虑使用Redis等存储机制来支持令牌吊销</li></ul><h3 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h3><h4 id="JSON-Schema用于API验证"><a href="#JSON-Schema用于API验证" class="headerlink" title="JSON Schema用于API验证"></a>JSON Schema用于API验证</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/schemas/user.schema.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createUserSchema = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>, <span class="attr">minLength</span>: <span class="number">3</span>, <span class="attr">maxLength</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    <span class="attr">email</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>, <span class="attr">format</span>: <span class="string">&quot;email&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">password</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>, <span class="attr">minLength</span>: <span class="number">8</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">required</span>: [<span class="string">&quot;username&quot;</span>, <span class="string">&quot;email&quot;</span>, <span class="string">&quot;password&quot;</span>],</span><br><span class="line">  <span class="attr">additionalProperties</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/middlewares/validate.middleware.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Context</span>, <span class="title class_">Next</span> &#125; <span class="keyword">from</span> <span class="string">&quot;oak&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; validateSchema &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/json-schema.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">validateRequest</span>(<span class="params"><span class="attr">schema</span>: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">async</span> (<span class="attr">ctx</span>: <span class="title class_">Context</span>, <span class="attr">next</span>: <span class="title class_">Next</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> body = <span class="keyword">await</span> ctx.<span class="property">request</span>.<span class="title function_">body</span>().<span class="property">value</span>;</span><br><span class="line">      <span class="keyword">const</span> &#123; isValid, errors &#125; = <span class="title function_">validateSchema</span>(body, schema);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (!isValid) &#123;</span><br><span class="line">        ctx.<span class="property">response</span>.<span class="property">status</span> = <span class="number">400</span>;</span><br><span class="line">        ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">          <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">code</span>: <span class="number">400</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;请求数据验证失败&quot;</span>,</span><br><span class="line">          <span class="attr">errors</span>: errors</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      ctx.<span class="property">response</span>.<span class="property">status</span> = <span class="number">400</span>;</span><br><span class="line">      ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">code</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;无效的请求数据&quot;</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由中使用验证中间件</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/api/users&quot;</span>, <span class="title function_">validateRequest</span>(createUserSchema), userController.<span class="property">createUser</span>);</span><br></pre></td></tr></table></figure><h4 id="MD5用于生成唯一标识符"><a href="#MD5用于生成唯一标识符" class="headerlink" title="MD5用于生成唯一标识符"></a>MD5用于生成唯一标识符</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成测试ID</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateTestId</span>(<span class="params"><span class="attr">userId</span>: <span class="built_in">string</span>, <span class="attr">timestamp</span>: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">md5</span>(<span class="string">`<span class="subst">$&#123;userId&#125;</span>-<span class="subst">$&#123;timestamp&#125;</span>-<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>).<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MBTI测试提交</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">submitTest</span>(<span class="params"><span class="attr">testData</span>: <span class="title class_">MBTITestSubmission</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> testId = <span class="title function_">generateTestId</span>(testData.<span class="property">user_id</span>, now.<span class="title function_">getTime</span>());</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 存储测试数据...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSR-Deno包注册表"><a href="#JSR-Deno包注册表" class="headerlink" title="JSR (Deno包注册表)"></a>JSR (Deno包注册表)</h3><p>JSR是官方的Deno包注册表，提供TypeScript和JavaScript包：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从JSR导入包</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Application</span>, <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&quot;jsr:@oak/oak@^12.6.1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; assertEquals &#125; <span class="keyword">from</span> <span class="string">&quot;jsr:@std/assert@1&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="在项目中使用JSR"><a href="#在项目中使用JSR" class="headerlink" title="在项目中使用JSR"></a>在项目中使用JSR</h4><ol><li>在<code>deno.json</code>中配置imports：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;imports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@std/assert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jsr:@std/assert@1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;oak&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jsr:@oak/oak@^12.6.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fresh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jsr:@denoland/fresh@^2.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>然后在代码中导入：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Application</span> &#125; <span class="keyword">from</span> <span class="string">&quot;oak&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; assertEquals &#125; <span class="keyword">from</span> <span class="string">&quot;@std/assert&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="NPM支持"><a href="#NPM支持" class="headerlink" title="NPM支持"></a>NPM支持</h3><p>Deno支持直接使用NPM包，无需转换或额外工具：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接从npm导入</span></span><br><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">&quot;npm:mongoose@^8.0.0&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&quot;npm:zod@^3.22.4&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="在项目中使用NPM包"><a href="#在项目中使用NPM包" class="headerlink" title="在项目中使用NPM包"></a>在项目中使用NPM包</h4><ol><li>在<code>deno.json</code>中配置imports：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;imports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mongoose&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm:mongoose@^8.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;zod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm:zod@^3.22.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm:md5@^2.3.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>然后在代码中导入：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">&quot;mongoose&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="其他源导入"><a href="#其他源导入" class="headerlink" title="其他源导入"></a>其他源导入</h3><p>Deno还支持从URL直接导入：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从URL导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Command</span> &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/cliffy@v0.25.7/command/mod.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MySQLConnector</span> &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/mysql@v2.12.1/mod.ts&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="包版本管理"><a href="#包版本管理" class="headerlink" title="包版本管理"></a>包版本管理</h3><hr><h2 id="📁-项目结构"><a href="#📁-项目结构" class="headerlink" title="📁 项目结构"></a>📁 项目结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">├── main.ts                # 主入口文件</span><br><span class="line">├── src/</span><br><span class="line">│   ├── routes/            # 路由定义</span><br><span class="line">│   ├── controllers/       # 控制器</span><br><span class="line">│   ├── services/          # 服务层</span><br><span class="line">│   ├── middleware/        # 中间件</span><br><span class="line">│   ├── utils/             # 工具函数</span><br><span class="line">│   ├── scripts/           # 脚本文件</span><br><span class="line">│   └── examples/          # 示例代码</span><br><span class="line">├── deno.json              # Deno项目配置</span><br><span class="line">└── .env                   # 环境变量</span><br></pre></td></tr></table></figure><hr><h2 id="🔌-API路由"><a href="#🔌-API路由" class="headerlink" title="🔌 API路由"></a>🔌 API路由</h2><p>项目使用Oak HTTP服务器框架定义路由，主要API路由包括：</p><h3 id="MBTI测试API"><a href="#MBTI测试API" class="headerlink" title="MBTI测试API"></a>MBTI测试API</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MBTI测试相关路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/api/mbti/questions&quot;</span>, mbtiController.<span class="property">getQuestions</span>);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/api/mbti/types&quot;</span>, mbtiController.<span class="property">getAllTypes</span>);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/api/mbti/types/:type&quot;</span>, mbtiController.<span class="property">getTypeDetails</span>);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/api/mbti/roles&quot;</span>, mbtiController.<span class="property">getRoles</span>);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/api/mbti/test&quot;</span>, mbtiController.<span class="property">submitTest</span>);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/api/mbti/user/:userId/history&quot;</span>, authMiddleware, mbtiController.<span class="property">getUserTestHistory</span>);</span><br></pre></td></tr></table></figure><blockquote><p>📝 <strong>注意</strong>：用户历史记录API需要身份验证。</p></blockquote><hr><h2 id="📊-数据模型"><a href="#📊-数据模型" class="headerlink" title="📊 数据模型"></a>📊 数据模型</h2><h3 id="MBTI相关模型"><a href="#MBTI相关模型" class="headerlink" title="MBTI相关模型"></a>MBTI相关模型</h3><details><summary><b>MBTIQuestion</b>: MBTI测试问题</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MBTIQuestion</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">question</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">Array</span>&lt;&#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">text</span>: <span class="built_in">string</span>;</span><br><span class="line">  &#125;&gt;;</span><br><span class="line">  <span class="attr">dimension</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary><b>MBTIType</b>: MBTI人格类型</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MBTIType</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span>;       <span class="comment">// 如 &quot;INTJ-A&quot;</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;       <span class="comment">// 如 &quot;建筑师&quot;</span></span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;      <span class="comment">// 如 &quot;建筑师 (自信型)&quot;</span></span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">strengths</span>: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="attr">weaknesses</span>: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="attr">roles</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">careers</span>: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="attr">famousPeople</span>: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary><b>MBTIRole</b>: MBTI角色分类</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MBTIRole</span> &#123;</span><br><span class="line">  <span class="attr">role</span>: <span class="built_in">string</span>;      <span class="comment">// 如 &quot;分析师&quot;</span></span><br><span class="line">  <span class="attr">types</span>: <span class="built_in">string</span>[];   <span class="comment">// 如 [&quot;INTJ&quot;, &quot;INTP&quot;, &quot;ENTJ&quot;, &quot;ENTP&quot;]</span></span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">traits</span>: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span>;     <span class="comment">// 如 &quot;#88619A&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary><b>MBTITestResult</b>: 测试结果</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MBTITestResult</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span>;  <span class="comment">// 如 &quot;INTJ-A&quot;</span></span><br><span class="line">  <span class="attr">scores</span>: &#123;</span><br><span class="line">    <span class="attr">EI_E</span>: <span class="built_in">number</span>, <span class="attr">EI_I</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">SN_S</span>: <span class="built_in">number</span>, <span class="attr">SN_N</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">TF_T</span>: <span class="built_in">number</span>, <span class="attr">TF_F</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">JP_J</span>: <span class="built_in">number</span>, <span class="attr">JP_P</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">AT_A</span>: <span class="built_in">number</span>, <span class="attr">AT_T</span>: <span class="built_in">number</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🧩-MBTI测试实现细节"><a href="#🧩-MBTI测试实现细节" class="headerlink" title="🧩 MBTI测试实现细节"></a>🧩 MBTI测试实现细节</h2><h3 id="1-测试流程"><a href="#1-测试流程" class="headerlink" title="1. 测试流程"></a>1. 测试流程</h3><pre><code class="highlight mermaid">graph LR    A[获取问题] --&gt; B[提交答案]    B --&gt; C[计算结果]    C --&gt; D[保存结果]    D --&gt; E[查看历史]</code></pre><ol><li>用户获取测试问题 (<code>GET /api/mbti/questions</code>)</li><li>用户提交测试答案 (<code>POST /api/mbti/test</code>)</li><li>系统计算测试结果并保存</li><li>用户可查看测试历史 (<code>GET /api/mbti/user/:userId/history</code>)</li></ol><h3 id="2-结果计算逻辑"><a href="#2-结果计算逻辑" class="headerlink" title="2. 结果计算逻辑"></a>2. 结果计算逻辑</h3><details><summary>展开查看结果计算代码</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">calculateTestResult</span>(<span class="attr">responses</span>: <span class="title class_">MBTITestResponse</span>[]): <span class="title class_">MBTITestResult</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化分数</span></span><br><span class="line">  <span class="keyword">const</span> scores = &#123;</span><br><span class="line">    <span class="attr">EI_E</span>: <span class="number">0</span>, <span class="attr">EI_I</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">SN_S</span>: <span class="number">0</span>, <span class="attr">SN_N</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">TF_T</span>: <span class="number">0</span>, <span class="attr">TF_F</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">JP_J</span>: <span class="number">0</span>, <span class="attr">JP_P</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">AT_A</span>: <span class="number">0</span>, <span class="attr">AT_T</span>: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 累计每个维度的分数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> response <span class="keyword">of</span> responses) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (response.<span class="property">selected_value</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>: scores.<span class="property">EI_E</span>++; <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: scores.<span class="property">EI_I</span>++; <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// ...其他维度</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 确定每个维度的主导特质</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">E_I</span> = scores.<span class="property">EI_E</span> &gt; scores.<span class="property">EI_I</span> ? <span class="string">&#x27;E&#x27;</span> : <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">S_N</span> = scores.<span class="property">SN_S</span> &gt; scores.<span class="property">SN_N</span> ? <span class="string">&#x27;S&#x27;</span> : <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">T_F</span> = scores.<span class="property">TF_T</span> &gt; scores.<span class="property">TF_F</span> ? <span class="string">&#x27;T&#x27;</span> : <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">J_P</span> = scores.<span class="property">JP_J</span> &gt; scores.<span class="property">JP_P</span> ? <span class="string">&#x27;J&#x27;</span> : <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">A_T</span> = scores.<span class="property">AT_A</span> &gt; scores.<span class="property">AT_T</span> ? <span class="string">&#x27;A&#x27;</span> : <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 组合MBTI类型</span></span><br><span class="line">  <span class="keyword">const</span> mbtiType = <span class="string">`<span class="subst">$&#123;E_I&#125;</span><span class="subst">$&#123;S_N&#125;</span><span class="subst">$&#123;T_F&#125;</span><span class="subst">$&#123;J_P&#125;</span>-<span class="subst">$&#123;A_T&#125;</span>`</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: mbtiType,</span><br><span class="line">    scores</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-数据库集合"><a href="#3-数据库集合" class="headerlink" title="3. 数据库集合"></a>3. 数据库集合</h3><p>MBTI测试系统使用了以下MongoDB集合：</p><table><thead><tr><th>集合名称</th><th>用途</th></tr></thead><tbody><tr><td><code>mbti_questions</code></td><td>存储测试问题</td></tr><tr><td><code>mbti_types</code></td><td>存储MBTI类型描述</td></tr><tr><td><code>mbti_roles</code></td><td>存储MBTI角色分类</td></tr><tr><td><code>mbti_test_results</code></td><td>存储用户测试记录</td></tr></tbody></table><hr><h2 id="🗄️-MongoDB数据库操作"><a href="#🗄️-MongoDB数据库操作" class="headerlink" title="🗄️ MongoDB数据库操作"></a>🗄️ MongoDB数据库操作</h2><p>项目使用自定义的<code>MongoDBService</code>类进行数据库操作，主要方法如下：</p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化连接</span></span><br><span class="line"><span class="keyword">const</span> mongoDBService = <span class="keyword">new</span> <span class="title class_">MongoDBService</span>(&#123;</span><br><span class="line">  <span class="attr">uri</span>: <span class="string">&quot;mongodb://[username]:[password]@[host]/&quot;</span>,</span><br><span class="line">  <span class="attr">dbName</span>: <span class="string">&quot;database_name&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="keyword">await</span> mongoDBService.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="keyword">await</span> mongoDBService.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure><h3 id="基本CRUD操作"><a href="#基本CRUD操作" class="headerlink" title="基本CRUD操作"></a>基本CRUD操作</h3><details><summary>展开查看CRUD操作示例</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询文档</span></span><br><span class="line"><span class="keyword">const</span> documents = <span class="keyword">await</span> mongoDBService.<span class="title function_">find</span>(<span class="string">&quot;collection_name&quot;</span>, &#123; <span class="attr">field</span>: <span class="string">&quot;value&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据ID查询</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable language_">document</span> = <span class="keyword">await</span> mongoDBService.<span class="title function_">findById</span>(<span class="string">&quot;collection_name&quot;</span>, <span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入文档</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> mongoDBService.<span class="title function_">insertOne</span>(<span class="string">&quot;collection_name&quot;</span>, &#123; <span class="attr">field</span>: <span class="string">&quot;value&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量插入</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> mongoDBService.<span class="title function_">insertMany</span>(<span class="string">&quot;collection_name&quot;</span>, [&#123; <span class="attr">field</span>: <span class="string">&quot;value&quot;</span> &#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新文档</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> mongoDBService.<span class="title function_">updateOne</span>(</span><br><span class="line">  <span class="string">&quot;collection_name&quot;</span>, </span><br><span class="line">  &#123; <span class="attr">field</span>: <span class="string">&quot;value&quot;</span> &#125;, </span><br><span class="line">  &#123; <span class="attr">$set</span>: &#123; <span class="attr">field</span>: <span class="string">&quot;new_value&quot;</span> &#125; &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据ID更新</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> mongoDBService.<span class="title function_">updateById</span>(<span class="string">&quot;collection_name&quot;</span>, <span class="string">&quot;id&quot;</span>, &#123; <span class="attr">field</span>: <span class="string">&quot;value&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文档</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> mongoDBService.<span class="title function_">deleteOne</span>(<span class="string">&quot;collection_name&quot;</span>, &#123; <span class="attr">field</span>: <span class="string">&quot;value&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据ID删除</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> mongoDBService.<span class="title function_">deleteById</span>(<span class="string">&quot;collection_name&quot;</span>, <span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合查询</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> mongoDBService.<span class="title function_">aggregate</span>(<span class="string">&quot;collection_name&quot;</span>, [</span><br><span class="line">  &#123; <span class="attr">$match</span>: &#123; <span class="attr">field</span>: <span class="string">&quot;value&quot;</span> &#125; &#125;,</span><br><span class="line">  &#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="string">&quot;$field&quot;</span>, <span class="attr">count</span>: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125; &#125; &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="MBTI实际数据库操作示例"><a href="#MBTI实际数据库操作示例" class="headerlink" title="MBTI实际数据库操作示例"></a>MBTI实际数据库操作示例</h3><details><summary>查询所有MBTI类型</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">getAllTypes</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">MBTIType</span>[]&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">mongoDBService</span>.<span class="title function_">connect</span>();</span><br><span class="line">    <span class="keyword">const</span> types = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">mongoDBService</span>.<span class="title function_">find</span>(<span class="variable language_">this</span>.<span class="property">typesCollection</span>, &#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> types <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="title class_">MBTIType</span>[];</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">error</span>(<span class="string">&quot;获取所有MBTI类型失败:&quot;</span>, error);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">mongoDBService</span>.<span class="title function_">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>保存测试结果</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新用户，创建记录</span></span><br><span class="line"><span class="keyword">const</span> newUserData = &#123;</span><br><span class="line">  <span class="attr">user_id</span>: testData.<span class="property">user_id</span>,</span><br><span class="line">  <span class="attr">nickname</span>: testData.<span class="property">nickname</span> || testData.<span class="property">user_id</span>,</span><br><span class="line">  <span class="attr">tests</span>: [&#123;</span><br><span class="line">    <span class="attr">test_id</span>: testId,</span><br><span class="line">    <span class="attr">test_date</span>: now,</span><br><span class="line">    <span class="attr">completed</span>: isCompleted,</span><br><span class="line">    <span class="attr">responses</span>: testData.<span class="property">responses</span>,</span><br><span class="line">    <span class="attr">result</span>: testResult</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">test_count</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">latest_type</span>: testResult?.<span class="property">type</span> || <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">created_at</span>: now,</span><br><span class="line">  <span class="attr">updated_at</span>: now</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">mongoDBService</span>.<span class="title function_">insertOne</span>(<span class="variable language_">this</span>.<span class="property">testResultsCollection</span>, newUserData);</span><br></pre></td></tr></table></figure><details><summary>更新现有记录</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现有用户，更新记录</span></span><br><span class="line"><span class="keyword">const</span> userData = existingUsers[<span class="number">0</span>] <span class="keyword">as</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> tests = userData.<span class="property">tests</span> <span class="keyword">as</span> <span class="title class_">Array</span>&lt;<span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt;&gt; || [];</span><br><span class="line"></span><br><span class="line">tests.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">test_id</span>: testId,</span><br><span class="line">  <span class="attr">test_date</span>: now,</span><br><span class="line">  <span class="attr">completed</span>: isCompleted,</span><br><span class="line">  <span class="attr">responses</span>: testData.<span class="property">responses</span>,</span><br><span class="line">  <span class="attr">result</span>: testResult</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">updateData</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt; = &#123;</span><br><span class="line">  tests,</span><br><span class="line">  <span class="attr">test_count</span>: tests.<span class="property">length</span>,</span><br><span class="line">  <span class="attr">updated_at</span>: now</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果测试完成，更新最新类型</span></span><br><span class="line"><span class="keyword">if</span> (isCompleted &amp;&amp; testResult) &#123;</span><br><span class="line">  updateData.<span class="property">latest_type</span> = testResult.<span class="property">type</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">mongoDBService</span>.<span class="title function_">updateOne</span>(</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">testResultsCollection</span>,</span><br><span class="line">  &#123; <span class="attr">user_id</span>: testData.<span class="property">user_id</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">$set</span>: updateData &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> mongoDBService.<span class="title function_">paginate</span>(</span><br><span class="line">  <span class="string">&quot;collection_name&quot;</span>,   <span class="comment">// 集合名称</span></span><br><span class="line">  <span class="number">1</span>,                   <span class="comment">// 页码</span></span><br><span class="line">  <span class="number">10</span>,                  <span class="comment">// 每页记录数</span></span><br><span class="line">  &#123; <span class="attr">field</span>: <span class="string">&quot;value&quot;</span> &#125;,  <span class="comment">// 查询条件</span></span><br><span class="line">  &#123; <span class="attr">sort</span>: &#123; <span class="attr">field</span>: <span class="number">1</span> &#125; &#125; <span class="comment">// 排序选项</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="返回结果格式"><a href="#返回结果格式" class="headerlink" title="返回结果格式"></a>返回结果格式</h4><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td><code>data</code></td><td>数据数组</td></tr><tr><td><code>total</code></td><td>总记录数</td></tr><tr><td><code>page</code></td><td>当前页码</td></tr><tr><td><code>limit</code></td><td>每页记录数</td></tr><tr><td><code>pageCount</code></td><td>总页数</td></tr></tbody></table><hr><h2 id="🧰-MongoDB查询语法"><a href="#🧰-MongoDB查询语法" class="headerlink" title="🧰 MongoDB查询语法"></a>🧰 MongoDB查询语法</h2><h3 id="常用操作符"><a href="#常用操作符" class="headerlink" title="常用操作符"></a>常用操作符</h3><details><summary>展开查看常用查询操作符</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相等查询</span></span><br><span class="line">&#123; <span class="attr">field</span>: <span class="string">&quot;value&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不等查询</span></span><br><span class="line">&#123; <span class="attr">field</span>: &#123; <span class="attr">$ne</span>: <span class="string">&quot;value&quot;</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大于/小于</span></span><br><span class="line">&#123; <span class="attr">field</span>: &#123; <span class="attr">$gt</span>: <span class="number">10</span> &#125; &#125;  <span class="comment">// 大于</span></span><br><span class="line">&#123; <span class="attr">field</span>: &#123; <span class="attr">$lt</span>: <span class="number">10</span> &#125; &#125;  <span class="comment">// 小于</span></span><br><span class="line">&#123; <span class="attr">field</span>: &#123; <span class="attr">$gte</span>: <span class="number">10</span> &#125; &#125; <span class="comment">// 大于等于</span></span><br><span class="line">&#123; <span class="attr">field</span>: &#123; <span class="attr">$lte</span>: <span class="number">10</span> &#125; &#125; <span class="comment">// 小于等于</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IN查询</span></span><br><span class="line">&#123; <span class="attr">field</span>: &#123; <span class="attr">$in</span>: [<span class="string">&quot;value1&quot;</span>, <span class="string">&quot;value2&quot;</span>] &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑操作符</span></span><br><span class="line">&#123; <span class="attr">$and</span>: [&#123; <span class="attr">field1</span>: <span class="string">&quot;value1&quot;</span> &#125;, &#123; <span class="attr">field2</span>: <span class="string">&quot;value2&quot;</span> &#125;] &#125;</span><br><span class="line">&#123; <span class="attr">$or</span>: [&#123; <span class="attr">field1</span>: <span class="string">&quot;value1&quot;</span> &#125;, &#123; <span class="attr">field1</span>: <span class="string">&quot;value2&quot;</span> &#125;] &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则表达式</span></span><br><span class="line">&#123; <span class="attr">field</span>: &#123; <span class="attr">$regex</span>: <span class="string">&quot;pattern&quot;</span>, <span class="attr">$options</span>: <span class="string">&quot;i&quot;</span> &#125; &#125; <span class="comment">// i表示不区分大小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存在性检查</span></span><br><span class="line">&#123; <span class="attr">field</span>: &#123; <span class="attr">$exists</span>: <span class="literal">true</span> &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="更新操作符"><a href="#更新操作符" class="headerlink" title="更新操作符"></a>更新操作符</h3><details><summary>展开查看常用更新操作符</summary><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置字段值</span></span><br><span class="line">&#123; <span class="attr">$set</span>: &#123; <span class="attr">field</span>: <span class="string">&quot;new_value&quot;</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加数值</span></span><br><span class="line">&#123; <span class="attr">$inc</span>: &#123; <span class="attr">counter</span>: <span class="number">1</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到数组</span></span><br><span class="line">&#123; <span class="attr">$push</span>: &#123; <span class="attr">array_field</span>: <span class="string">&quot;new_item&quot;</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从数组移除</span></span><br><span class="line">&#123; <span class="attr">$pull</span>: &#123; <span class="attr">array_field</span>: <span class="string">&quot;item_to_remove&quot;</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到集合（不重复）</span></span><br><span class="line">&#123; <span class="attr">$addToSet</span>: &#123; <span class="attr">array_field</span>: <span class="string">&quot;new_unique_item&quot;</span> &#125; &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="📝-注意事项和最佳实践"><a href="#📝-注意事项和最佳实践" class="headerlink" title="📝 注意事项和最佳实践"></a>📝 注意事项和最佳实践</h2><h3 id="数据库连接管理"><a href="#数据库连接管理" class="headerlink" title="数据库连接管理"></a>数据库连接管理</h3><ul><li>✅ 始终在操作结束后关闭数据库连接（使用<code>finally</code>块）</li><li>✅ 使用try-catch-finally处理数据库操作可能出现的异常</li></ul><h3 id="错误处理和日志"><a href="#错误处理和日志" class="headerlink" title="错误处理和日志"></a>错误处理和日志</h3><ul><li>✅ 使用统一的Logger类进行日志记录</li><li>✅ 所有外部调用（数据库、API）都应有错误处理</li></ul><h3 id="MongoDB操作"><a href="#MongoDB操作" class="headerlink" title="MongoDB操作"></a>MongoDB操作</h3><ul><li>✅ 使用<code>countDocuments</code>而不是已废弃的<code>count</code>方法</li><li>✅ 使用<code>find</code>方法时添加合适的投影(projection)以减少数据传输</li><li>✅ 对大结果集使用分页查询</li></ul><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ul><li>🔒 敏感API使用<code>authMiddleware</code>进行保护</li><li>🔒 不要在代码中硬编码敏感信息（如数据库密码）</li></ul><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul><li>⚡ 大量文档使用批量操作（insertMany, updateMany）</li><li>⚡ 添加适当的索引以加速查询</li><li>⚡ 使用投影限制返回字段</li></ul><h3 id="特定项目注意事项"><a href="#特定项目注意事项" class="headerlink" title="特定项目注意事项"></a>特定项目注意事项</h3><ul><li>📋 MBTI测试需要至少16个问题才能完成</li><li>📋 每个用户可以有多个测试记录</li><li>📋 API响应格式保持一致（包含success, code, data&#x2F;message字段）</li></ul><hr><h3 id="API响应格式设计"><a href="#API响应格式设计" class="headerlink" title="API响应格式设计"></a>API响应格式设计</h3><p>为确保前端能高效处理API响应，所有API应遵循一致的响应格式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">success</span>: <span class="built_in">boolean</span>;     <span class="comment">// 请求是否成功</span></span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span>;         <span class="comment">// 状态码，与HTTP状态码保持一致</span></span><br><span class="line">  <span class="attr">data</span>?: T;             <span class="comment">// 成功时返回的数据</span></span><br><span class="line">  <span class="attr">message</span>?: <span class="built_in">string</span>;     <span class="comment">// 错误时的消息</span></span><br><span class="line">  <span class="attr">pagination</span>?: &#123;        <span class="comment">// 分页信息（如适用）</span></span><br><span class="line">    <span class="attr">total</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">page</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">limit</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">pageCount</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端实现建议"><a href="#前端实现建议" class="headerlink" title="前端实现建议"></a>前端实现建议</h3><ol><li><p><strong>MBTI测试界面设计</strong>:</p><ul><li>采用分步骤展示问题，减轻用户负担</li><li>进度指示器显示完成情况</li><li>使用直观的选项设计（如滑块、单选按钮）</li><li>结果页面突出显示用户的MBTI类型和特点</li></ul></li><li><p><strong>响应式设计</strong>:</p><ul><li>确保在移动设备和桌面设备上都有良好的用户体验</li><li>针对不同屏幕尺寸优化布局</li><li>考虑触摸操作的便利性</li></ul></li><li><p><strong>性能优化</strong>:</p><ul><li>实施懒加载技术，特别是对MBTI类型详情页面</li><li>缓存用户历史测试结果</li><li>优化图片和资源加载</li></ul></li><li><p><strong>交互体验优化</strong>:</p><ul><li>添加适当的动画和过渡效果</li><li>实现即时反馈机制</li><li>考虑离线支持，允许用户在无网络情况下完成测试</li></ul></li></ol><h3 id="用户体验优化建议"><a href="#用户体验优化建议" class="headerlink" title="用户体验优化建议"></a>用户体验优化建议</h3><ul><li>📱 <strong>引导式测试流程</strong>: 提供清晰的指引和说明</li><li>🎯 <strong>个性化结果展示</strong>: 根据用户的MBTI类型提供个性化的结果页面</li><li>🔄 <strong>社交分享功能</strong>: 允许用户分享他们的测试结果到社交媒体</li><li>🌓 <strong>主题定制</strong>: 提供浅色&#x2F;深色模式切换</li></ul><hr><h2 id="❓-常见问题排查"><a href="#❓-常见问题排查" class="headerlink" title="❓ 常见问题排查"></a>❓ 常见问题排查</h2><h3 id="MongoDB连接问题"><a href="#MongoDB连接问题" class="headerlink" title="MongoDB连接问题"></a>MongoDB连接问题</h3><ul><li>🔍 检查URI和数据库名称配置</li><li>🔍 确认MongoDB服务器运行状态</li><li>🔍 检查网络连接和防火墙设置</li></ul><h3 id="API返回空数据"><a href="#API返回空数据" class="headerlink" title="API返回空数据"></a>API返回空数据</h3><ul><li>🔍 检查数据库连接</li><li>🔍 确认集合中有数据</li><li>🔍 验证查询条件是否正确</li></ul><h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h3><ul><li>🔍 确认用户有正确的数据库权限</li><li>🔍 验证授权令牌是否有效</li></ul><h3 id="部署相关问题"><a href="#部署相关问题" class="headerlink" title="部署相关问题"></a>部署相关问题</h3><ul><li>🔍 确保目标环境包含所有必要的环境变量</li><li>🔍 检查运行命令是否包含所有必要的权限标志</li></ul><hr><h2 id="🚀-扩展和改进"><a href="#🚀-扩展和改进" class="headerlink" title="🚀 扩展和改进"></a>🚀 扩展和改进</h2><ol><li><strong>API文档</strong>: 考虑添加Swagger或类似工具</li><li><strong>缓存层</strong>: 为频繁访问的数据添加缓存</li><li><strong>监控</strong>: 添加性能监控和健康检查</li><li><strong>CI&#x2F;CD</strong>: 设置自动化测试和部署</li></ol><hr><p>建议在<code>deno.json</code>中集中管理所有依赖的版本，便于后续升级和维护：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;imports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;oak&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jsr:@oak/oak@^12.6.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mongoose&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm:mongoose@^8.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;std/&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://deno.land/std@0.196.0/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="🚢-Deno部署指南"><a href="#🚢-Deno部署指南" class="headerlink" title="🚢 Deno部署指南"></a>🚢 Deno部署指南</h2><h3 id="使用Deno-Deploy"><a href="#使用Deno-Deploy" class="headerlink" title="使用Deno Deploy"></a>使用Deno Deploy</h3><p><a href="https://deno.com/deploy">Deno Deploy</a>是官方的serverless平台，可以轻松部署Deno应用。</p><h4 id="1-使用deployctl工具"><a href="#1-使用deployctl工具" class="headerlink" title="1. 使用deployctl工具"></a>1. 使用deployctl工具</h4><p>首先安装deployctl工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deno install --allow-read --allow-write --allow-env --allow-net --allow-run --no-check -r -f https://deno.land/x/deploy/deployctl.ts</span><br></pre></td></tr></table></figure><h4 id="2-部署项目"><a href="#2-部署项目" class="headerlink" title="2. 部署项目"></a>2. 部署项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接部署</span></span><br><span class="line">deployctl deploy --project=your-project-name main.ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定环境变量</span></span><br><span class="line">deployctl deploy --project=your-project-name --env-file=.<span class="built_in">env</span> main.ts</span><br></pre></td></tr></table></figure><h4 id="3-通过deno-json配置"><a href="#3-通过deno-json配置" class="headerlink" title="3. 通过deno.json配置"></a>3. 通过deno.json配置</h4><p>项目的<code>deno.json</code>可以包含部署配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;project&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your-project-id&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;**/node_modules&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;entrypoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.ts&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deno task deploy</span><br></pre></td></tr></table></figure><h3 id="部署前的准备"><a href="#部署前的准备" class="headerlink" title="部署前的准备"></a>部署前的准备</h3><ol><li><p><strong>确保项目结构正确</strong>：</p><ul><li>入口文件应该是自包含的，或者能够访问所有依赖</li><li>确保所有路径正确（相对路径和绝对路径）</li></ul></li><li><p><strong>环境变量处理</strong>：</p><ul><li>部署环境需要设置所有必需的环境变量</li><li>可以在Deno Deploy控制台中配置环境变量</li><li>敏感信息不应硬编码或包含在版本控制中</li></ul></li><li><p><strong>文件系统限制</strong>：</p><ul><li>Deno Deploy不支持本地文件系统写入</li><li>所有文件操作应替换为存储服务(如MongoDB)或内存存储</li></ul></li><li><p><strong>网络访问和第三方服务</strong>：</p><ul><li>确保所有外部服务都能从Deno Deploy访问</li><li>使用适当的超时和重试策略处理间歇性连接问题</li></ul></li></ol><h3 id="注意事项和限制"><a href="#注意事项和限制" class="headerlink" title="注意事项和限制"></a>注意事项和限制</h3><ol><li><p><strong>冷启动</strong>:</p><ul><li>Serverless环境可能有冷启动延迟</li><li>关键服务应优化以快速初始化</li></ul></li><li><p><strong>执行时间限制</strong>:</p><ul><li>请求处理时间有限制，长时间操作应拆分或异步处理</li></ul></li><li><p><strong>内存限制</strong>:</p><ul><li>遵循内存最佳实践，避免内存泄漏</li><li>大型对象应分块处理或使用流处理</li></ul></li><li><p><strong>依赖项</strong>:</p><ul><li>确保所有依赖项都与Deno Deploy兼容</li><li>某些依赖于Node.js API的npm包可能不兼容</li><li>使用Deno标准库或专门的Deno包以获得最佳体验</li></ul></li><li><p><strong>数据库连接</strong>:</p><ul><li>使用连接池和合适的连接管理策略</li><li>防止连接泄漏，确保在请求结束时关闭连接</li></ul></li><li><p><strong>定时任务</strong>:</p><ul><li>Deno Deploy支持通过Cron触发器运行定时任务</li><li>对于复杂的调度需求，可能需要外部服务</li></ul></li></ol><h3 id="部署后的监控"><a href="#部署后的监控" class="headerlink" title="部署后的监控"></a>部署后的监控</h3><ul><li>使用Deno Deploy提供的日志和指标监控应用性能</li><li>考虑添加自定义日志记录以跟踪关键操作</li><li>实现健康检查端点以监控服务状态</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 健康检查端点示例</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/health&quot;</span>, <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="📐-代码规范"><a href="#📐-代码规范" class="headerlink" title="📐 代码规范"></a>📐 代码规范</h2><ul><li>📄 使用TSDoc风格的注释</li><li>🔄 保持一致的错误处理和日志记录模式</li><li>🧩 遵循模块化设计原则</li></ul><hr><h2 id="📚-资源链接"><a href="#📚-资源链接" class="headerlink" title="📚 资源链接"></a>📚 资源链接</h2><ul><li><a href="https://deno.land/manual">Deno官方文档</a></li><li><a href="https://deno.land/x/oak">Oak HTTP服务器框架文档</a></li><li><a href="https://www.mongodb.com/docs/">MongoDB文档</a></li><li><a href="https://mongoosejs.com/docs/">Mongoose文档</a></li><li><a href="https://www.myersbriggs.org/">MBTI官方网站</a></li><li><a href="https://www.16personalities.com/">16Personalities</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Deno学习记录-📘&quot;&gt;&lt;a href=&quot;#Deno学习记录-📘&quot; class=&quot;headerlink&quot; title=&quot;Deno学习记录 📘&quot;&gt;&lt;/a&gt;Deno学习记录 📘&lt;/h1&gt;&lt;div align=&quot;left&quot;&gt;

&lt;p&gt;&lt;img src= &quot;/im</summary>
      
    
    
    
    
    <category term="Deno" scheme="https://aoayaoa.github.io/tags/Deno/"/>
    
  </entry>
  
  <entry>
    <title>react总结</title>
    <link href="https://aoayaoa.github.io/2025/03/15/react/"/>
    <id>https://aoayaoa.github.io/2025/03/15/react/</id>
    <published>2025-03-14T16:00:00.000Z</published>
    <updated>2025-04-26T09:19:06.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-18-19-学习总结"><a href="#React-18-19-学习总结" class="headerlink" title="React 18&#x2F;19 学习总结"></a>React 18&#x2F;19 学习总结</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#react-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">React 基础概念</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">常见用法与最佳实践</a></li><li><a href="#hook-%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">Hook 详解与最佳实践</a></li><li><a href="#%E6%98%93%E9%94%99%E7%82%B9%E4%B8%8E%E9%99%B7%E9%98%B1">易错点与陷阱</a></li><li><a href="#%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">项目实践注意事项</a></li><li><a href="#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7">性能优化技巧</a></li><li><a href="#react-18-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7">React 18 核心特性</a></li><li><a href="#react-19-%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%8E%E5%B1%95%E6%9C%9B">React 19 新特性与展望</a></li><li><a href="#%E9%A2%9D%E5%A4%96%E8%B5%84%E6%BA%90">额外资源</a></li></ul><hr><h2 id="React-基础概念"><a href="#React-基础概念" class="headerlink" title="React 基础概念"></a>React 基础概念</h2><h3 id="组件与JSX"><a href="#组件与JSX" class="headerlink" title="组件与JSX"></a>组件与JSX</h3><p>React 的核心理念是将 UI 分解成独立、可复用的组件。每个组件都是一个自包含的模块，负责渲染 UI 的一部分。</p><div style="background-color: #f0f7fb; padding: 15px; border-left: 5px solid #3498db; margin-bottom: 15px;"><strong>关键概念</strong>：组件是 React 应用的构建块，可以使用函数组件或类组件创建。</div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSX 是 JavaScript 的语法扩展，它允许我们在 JavaScript 中编写类似 HTML 的代码。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSX 基本语法</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX 可以包含 JavaScript 表达式</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Josh&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX 属性使用驼峰命名</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span> <span class="attr">tabIndex</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h3 id="状态与生命周期"><a href="#状态与生命周期" class="headerlink" title="状态与生命周期"></a>状态与生命周期</h3><p>组件可以有自己的状态，并且会随着时间推移而改变。</p><div style="background-color: #fff8dc; padding: 15px; border-left: 5px solid #f1c40f; margin-bottom: 15px;"><strong>注意</strong>：理解组件生命周期对于正确管理状态和副作用至关重要。</div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类组件中的状态和生命周期</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timerID</span> = <span class="built_in">setInterval</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tick</span>(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timerID</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>React 事件使用驼峰命名约定，并传递一个函数作为事件处理程序。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件处理示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Toggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isToggleOn, setIsToggleOn] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用箭头函数避免绑定 this</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setIsToggleOn</span>(!isToggleOn);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isToggleOn ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件渲染和列表"><a href="#条件渲染和列表" class="headerlink" title="条件渲染和列表"></a>条件渲染和列表</h3><p>可以使用条件运算符、逻辑运算符或 if 语句来进行条件渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件渲染示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Greeting</span>(<span class="params">&#123; isLoggedIn &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isLoggedIn ? <span class="tag">&lt;<span class="name">UserGreeting</span> /&gt;</span> : <span class="tag">&lt;<span class="name">GuestGreeting</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      &#123;/* 或使用逻辑与 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;isLoggedIn &amp;&amp; <span class="tag">&lt;<span class="name">UserGreeting</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列表渲染通常使用 <code>map</code> 方法。</p><div style="background-color: #f8e5e5; padding: 15px; border-left: 5px solid #e74c3c; margin-bottom: 15px;"><strong>重要</strong>：在列表渲染时，每个子元素都需要一个唯一的 <code>key</code> 属性，以帮助 React 识别已更改的项目。</div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列表渲染示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">&#123; numbers &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;numbers.map(number =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;number&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见用法与最佳实践"><a href="#常见用法与最佳实践" class="headerlink" title="常见用法与最佳实践"></a>常见用法与最佳实践</h2><h3 id="函数组件与-Hooks"><a href="#函数组件与-Hooks" class="headerlink" title="函数组件与 Hooks"></a>函数组件与 Hooks</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐的函数组件写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserProfile</span>(<span class="params">&#123; userId &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 状态管理</span></span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setIsLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用 useEffect 处理副作用</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> isMounted = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">setIsLoading</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchUserData</span>(userId);</span><br><span class="line">        <span class="keyword">if</span> (isMounted) &#123;</span><br><span class="line">          <span class="title function_">setUser</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isMounted) &#123;</span><br><span class="line">          <span class="title function_">setIsLoading</span>(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">fetchUser</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isMounted = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [userId]); <span class="comment">// 依赖项数组</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (!user) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user.email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态管理最佳实践"><a href="#状态管理最佳实践" class="headerlink" title="状态管理最佳实践"></a>状态管理最佳实践</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在顶层组件中管理共享状态</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useState</span>(<span class="string">&#x27;light&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 提供状态变更函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleTheme</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTheme</span>(<span class="function"><span class="params">prevTheme</span> =&gt;</span> prevTheme === <span class="string">&#x27;light&#x27;</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 通过 context 或 props 向下传递</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">theme</span>, <span class="attr">toggleTheme</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Main</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 useReducer 处理复杂状态</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">taskReducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ADD_TASK&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> [...state, &#123; <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="attr">text</span>: action.<span class="property">payload</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;TOGGLE_TASK&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> state.<span class="title function_">map</span>(<span class="function"><span class="params">task</span> =&gt;</span> </span><br><span class="line">        task.<span class="property">id</span> === action.<span class="property">payload</span> ? &#123; ...task, <span class="attr">completed</span>: !task.<span class="property">completed</span> &#125; : task</span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DELETE_TASK&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> state.<span class="title function_">filter</span>(<span class="function"><span class="params">task</span> =&gt;</span> task.<span class="property">id</span> !== action.<span class="property">payload</span>);</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TaskList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [tasks, dispatch] = <span class="title function_">useReducer</span>(taskReducer, []);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AddTask</span> <span class="attr">onAdd</span>=<span class="string">&#123;text</span> =&gt;</span> dispatch(&#123; type: &#x27;ADD_TASK&#x27;, payload: text &#125;)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;tasks.map(task =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Task</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;task.id&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">task</span>=<span class="string">&#123;task&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onToggle</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;TOGGLE_TASK&#x27;, payload: task.id &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">          onDelete=&#123;() =&gt; dispatch(&#123; type: &#x27;DELETE_TASK&#x27;, payload: task.id &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义-Hooks"><a href="#自定义-Hooks" class="headerlink" title="自定义 Hooks"></a>自定义 Hooks</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建可复用的逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useLocalStorage</span>(<span class="params">key, initialValue</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [storedValue, setStoredValue] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> item = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">      <span class="keyword">return</span> item ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(item) : initialValue;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">      <span class="keyword">return</span> initialValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setValue</span> = value =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> valueToStore = value <span class="keyword">instanceof</span> <span class="title class_">Function</span> ? <span class="title function_">value</span>(storedValue) : value;</span><br><span class="line">      <span class="title function_">setStoredValue</span>(valueToStore);</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(valueToStore));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> [storedValue, setValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义 Hook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SettingsForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [settings, setSettings] = <span class="title function_">useLocalStorage</span>(<span class="string">&#x27;user-settings&#x27;</span>, &#123; <span class="attr">theme</span>: <span class="string">&#x27;light&#x27;</span>, <span class="attr">notifications</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用和普通 state 一样</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">select</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;settings.theme&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> setSettings(&#123;...settings, theme: e.target.value&#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;light&quot;</span>&gt;</span>浅色<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;dark&quot;</span>&gt;</span>深色<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hook-详解与最佳实践"><a href="#Hook-详解与最佳实践" class="headerlink" title="Hook 详解与最佳实践"></a>Hook 详解与最佳实践</h2><h3 id="常见-Hook-用法总结"><a href="#常见-Hook-用法总结" class="headerlink" title="常见 Hook 用法总结"></a>常见 Hook 用法总结</h3><table><tr>  <th>Hook</th>  <th>用途</th>  <th>使用场景</th></tr><tr>  <td><code>useState</code></td>  <td>管理组件状态</td>  <td>需要响应式更新的数据</td></tr><tr>  <td><code>useEffect</code></td>  <td>处理副作用</td>  <td>API请求、订阅、DOM操作</td></tr><tr>  <td><code>useContext</code></td>  <td>消费上下文</td>  <td>深层传递数据</td></tr><tr>  <td><code>useReducer</code></td>  <td>管理复杂状态</td>  <td>多个相关状态或复杂逻辑</td></tr><tr>  <td><code>useCallback</code></td>  <td>记忆化函数</td>  <td>优化子组件渲染</td></tr><tr>  <td><code>useMemo</code></td>  <td>记忆化计算值</td>  <td>避免复杂计算重复执行</td></tr><tr>  <td><code>useRef</code></td>  <td>保存可变引用</td>  <td>访问DOM、保存不触发渲染的值</td></tr></table><h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础用法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);  <span class="comment">// 声明状态变量和更新函数</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用函数初始化（惰性初始化）- 适用于昂贵计算</span></span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此函数只在组件首次渲染时执行</span></span><br><span class="line">    <span class="keyword">const</span> savedUser = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> savedUser ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(savedUser) : <span class="literal">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 管理多个状态</span></span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div style="background-color: #eafaf1; padding: 15px; border-left: 5px solid #2ecc71; margin: 15px 0;"><strong>💡 最佳实践</strong>：将相关状态分组到一个对象中，但注意更新时需要保持不可变性（使用展开运算符）。</div><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DataFetcher</span>(<span class="params">&#123; userId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1️⃣ 基础用法 - 组件挂载和依赖项变化时执行</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchData</span>(userId).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">setData</span>(data));</span><br><span class="line">  &#125;, [userId]); <span class="comment">// 依赖项数组</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2️⃣ 清理函数 - 组件卸载或依赖项变化前执行</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> subscription = <span class="title function_">subscribe</span>(userId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回清理函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">unsubscribe</span>(subscription);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [userId]);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3️⃣ 只在挂载时执行一次</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">logComponentMount</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">logComponentUnmount</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []); <span class="comment">// 空依赖数组</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 4️⃣ 每次渲染后执行</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">updateDocumentTitle</span>(<span class="string">`Data for <span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">  &#125;); <span class="comment">// 没有第二个参数</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;/* 渲染数据 */&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div style="background-color: #fff8dc; padding: 15px; border-left: 5px solid #f1c40f; margin: 15px 0;"><strong>⚠️ 注意</strong>：useEffect 依赖项数组必须包含所有在 effect 中使用的组件作用域中的值，否则会导致闭包陷阱。</div><h4 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建上下文</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title function_">createContext</span>(<span class="string">&#x27;light&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费上下文</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ThemeButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> theme = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> <span class="attr">theme</span> === <span class="string">&#x27;dark&#x27;</span> ? &#x27;#<span class="attr">000</span>&#x27; <span class="attr">:</span> &#x27;#<span class="attr">fff</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      主题按钮</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供上下文</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&quot;dark&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemeButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义reducer</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">todoReducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ADD_TODO&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> [...state, &#123; <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="attr">text</span>: action.<span class="property">text</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;TOGGLE_TODO&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> state.<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span></span><br><span class="line">        todo.<span class="property">id</span> === action.<span class="property">id</span> ? &#123; ...todo, <span class="attr">completed</span>: !todo.<span class="property">completed</span> &#125; : todo</span><br><span class="line">      );</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TodoApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// state: 当前状态, dispatch: 发送更新的函数</span></span><br><span class="line">  <span class="keyword">const</span> [todos, dispatch] = <span class="title function_">useReducer</span>(todoReducer, []); <span class="comment">// 初始状态为空数组</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用dispatch触发更新</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleAddTodo</span> = (<span class="params">text</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;ADD_TODO&#x27;</span>, text &#125;);  <span class="comment">// 发送action对象</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TodoForm</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleAddTodo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">dispatch</span>=<span class="string">&#123;dispatch&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div style="display: flex; margin: 20px 0; border: 1px solid #ddd; border-radius: 5px; overflow: hidden;">  <div style="background-color: #f9f9f9; padding: 15px; width: 50%; box-sizing: border-box;">    <strong>useReducer 适用场景</strong>    <ul>      <li>状态逻辑复杂</li>      <li>下一个状态依赖前一个状态</li>      <li>状态由多个子值组成的对象</li>    </ul>  </div>  <div style="background-color: #f0f0f0; padding: 15px; width: 50%; box-sizing: border-box;">    <strong>useState 适用场景</strong>    <ul>      <li>简单的状态逻辑</li>      <li>独立的状态更新</li>      <li>简单基本类型的状态</li>    </ul>  </div></div><h3 id="生命周期方法与Hooks对比"><a href="#生命周期方法与Hooks对比" class="headerlink" title="生命周期方法与Hooks对比"></a>生命周期方法与Hooks对比</h3><table><thead><tr><th align="left">类组件生命周期</th><th align="left">Hook替代方式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>constructor()</code></td><td align="left"><code>useState()</code>, <code>useReducer()</code></td><td align="left">使用useState或useReducer初始化状态</td></tr><tr><td align="left"><code>componentDidMount()</code></td><td align="left"><code>useEffect(() =&gt; &#123;&#125;, [])</code></td><td align="left">传入空依赖数组的useEffect</td></tr><tr><td align="left"><code>componentDidUpdate()</code></td><td align="left"><code>useEffect(() =&gt; &#123;&#125;, [deps])</code></td><td align="left">有依赖项的useEffect</td></tr><tr><td align="left"><code>componentWillUnmount()</code></td><td align="left"><code>useEffect</code>的清理函数</td><td align="left"><code>useEffect(() =&gt; &#123; return () =&gt; &#123;&#125; &#125;, [])</code></td></tr><tr><td align="left"><code>shouldComponentUpdate()</code></td><td align="left"><code>React.memo</code>, <code>useMemo</code></td><td align="left">使用React.memo包裹组件，或useMemo优化特定计算</td></tr><tr><td align="left"><code>getSnapshotBeforeUpdate()</code></td><td align="left">通常使用<code>useRef</code> + <code>useLayoutEffect</code></td><td align="left">组合使用这两个Hook模拟此功能</td></tr><tr><td align="left"><code>getDerivedStateFromProps()</code></td><td align="left"><code>useMemo</code> 或 直接在渲染期间计算</td><td align="left">在渲染过程中计算派生值</td></tr><tr><td align="left"><code>static getDerivedStateFromError()</code> <br /> <code>componentDidCatch()</code></td><td align="left">目前仍需要使用类组件的错误边界</td><td align="left">React团队计划提供Hook版本</td></tr></tbody></table><h3 id="为何生命周期被Hook取代？"><a href="#为何生命周期被Hook取代？" class="headerlink" title="为何生命周期被Hook取代？"></a>为何生命周期被Hook取代？</h3><h4 id="复杂性与关注点分离"><a href="#复杂性与关注点分离" class="headerlink" title="复杂性与关注点分离"></a>复杂性与关注点分离</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类组件中的生命周期混杂问题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDashboard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">user</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">posts</span>: [],</span><br><span class="line">      <span class="attr">isOnline</span>: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取用户数据</span></span><br><span class="line">    <span class="title function_">fetchUser</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; user &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取帖子数据</span></span><br><span class="line">    <span class="title function_">fetchPosts</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; posts &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置在线状态监听</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onlineListener</span> = onlineStatus.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">status</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">isOnline</span>: status &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">    <span class="comment">// 用户ID变化时更新</span></span><br><span class="line">    <span class="keyword">if</span> (prevProps.<span class="property">userId</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>) &#123;</span><br><span class="line">      <span class="comment">// 重复上面的数据获取逻辑</span></span><br><span class="line">      <span class="title function_">fetchUser</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; user &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="title function_">fetchPosts</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; posts &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 清理在线状态监听</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onlineListener</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 渲染方法...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hook方式：按关注点分离</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserDashboard</span>(<span class="params">&#123; userId &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 用户数据逻辑</span></span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchUser</span>(userId).<span class="title function_">then</span>(setUser);</span><br><span class="line">  &#125;, [userId]); <span class="comment">// 当userId变化时自动重新获取</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 帖子数据逻辑</span></span><br><span class="line">  <span class="keyword">const</span> [posts, setPosts] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchPosts</span>(userId).<span class="title function_">then</span>(setPosts);</span><br><span class="line">  &#125;, [userId]);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在线状态逻辑</span></span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> listener = onlineStatus.<span class="title function_">subscribe</span>(setIsOnline);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> listener.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  &#125;, []); <span class="comment">// 只在挂载和卸载时处理</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 渲染...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码重用和逻辑提取"><a href="#代码重用和逻辑提取" class="headerlink" title="代码重用和逻辑提取"></a>代码重用和逻辑提取</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类组件中重用逻辑困难</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserPostsA</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 重复的获取用户帖子逻辑</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fetchPosts</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; posts &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prevProps.<span class="property">userId</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>) &#123;</span><br><span class="line">      <span class="title function_">fetchPosts</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; posts &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 渲染方法...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserPostsB</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 几乎相同的逻辑复制</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fetchPosts</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; posts &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prevProps.<span class="property">userId</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>) &#123;</span><br><span class="line">      <span class="title function_">fetchPosts</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; posts &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 略有不同的渲染方法...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hook方式：逻辑提取到自定义Hook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">usePosts</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [posts, setPosts] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">fetchPosts</span>(userId)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setPosts</span>(data);</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, [userId]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123; posts, loading &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在多个组件中复用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserPostsA</span>(<span class="params">&#123; userId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; posts, loading &#125; = <span class="title function_">usePosts</span>(userId);</span><br><span class="line">  <span class="comment">// 组件特定的渲染逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserPostsB</span>(<span class="params">&#123; userId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; posts, loading &#125; = <span class="title function_">usePosts</span>(userId);</span><br><span class="line">  <span class="comment">// 不同的渲染逻辑...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="闭包与this问题"><a href="#闭包与this问题" class="headerlink" title="闭包与this问题"></a>闭包与this问题</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类组件中的this绑定问题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 需要手动绑定this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click me: &#123;this.state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hook中没有this问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不需要绑定，闭包自然捕获当前变量</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Click me: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一致性与可预测性"><a href="#一致性与可预测性" class="headerlink" title="一致性与可预测性"></a>一致性与可预测性</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类组件中的生命周期不一致性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`Count: <span class="subst">$&#123;<span class="variable language_">this</span>.state.count&#125;</span>`</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interval</span> = <span class="built_in">setInterval</span>(<span class="variable language_">this</span>.<span class="property">tick</span>, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`Count: <span class="subst">$&#123;<span class="variable language_">this</span>.state.count&#125;</span>`</span>;</span><br><span class="line">    <span class="comment">// 忘记检查props或state变化可能导致问题</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">interval</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  tick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hook带来的一致性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 统一处理标题更新效果</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`Count: <span class="subst">$&#123;count&#125;</span>`</span>;</span><br><span class="line">  &#125;, [count]); <span class="comment">// 明确依赖</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 定时器效果</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">  &#125;, []); <span class="comment">// 明确只执行一次</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：Hook的优势"><a href="#总结：Hook的优势" class="headerlink" title="总结：Hook的优势"></a>总结：Hook的优势</h3><ol><li><strong>关注点分离</strong>：可以按功能而非生命周期划分代码</li><li><strong>代码复用</strong>：自定义Hook使逻辑复用变得简单直观</li><li><strong>避免this</strong>：不需要理解JavaScript中的this绑定问题</li><li><strong>减少模板代码</strong>：不需要编写类、构造函数等模板代码</li><li><strong>优化编译</strong>：函数组件更容易被编译器优化</li><li><strong>更好的TypeScript支持</strong>：泛型和类型推断在函数组件中工作得更好</li><li><strong>一致性</strong>：使用相同模式处理不同种类的副作用</li><li><strong>避免重复</strong>：避免在不同生命周期方法中复制相同的代码</li><li><strong>更小的包体积</strong>：通常生成更小的代码</li></ol><h2 id="项目实践注意事项"><a href="#项目实践注意事项" class="headerlink" title="项目实践注意事项"></a>项目实践注意事项</h2><h3 id="合理的组件拆分"><a href="#合理的组件拆分" class="headerlink" title="合理的组件拆分"></a>合理的组件拆分</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误：臃肿的组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dashboard</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 大量状态和逻辑...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 大量 JSX... */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确：拆分为小型、专注的组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dashboard</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Sidebar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MainContent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Summary</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">RecentActivity</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Statistics</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">MainContent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据获取与状态管理"><a href="#数据获取与状态管理" class="headerlink" title="数据获取与状态管理"></a>数据获取与状态管理</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ 使用 React Query 等库管理数据获取状态</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, isLoading, error &#125; = <span class="title function_">useQuery</span>(<span class="string">&#x27;users&#x27;</span>, fetchUsers);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Error</span> <span class="attr">message</span>=<span class="string">&#123;error.message&#125;</span> /&gt;</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data.map(user =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 使用状态管理库处理全局状态</span></span><br><span class="line"><span class="comment">// 例如 Redux Toolkit</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice, configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterSlice.<span class="property">reducer</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="组件通信策略"><a href="#组件通信策略" class="headerlink" title="组件通信策略"></a>组件通信策略</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ 对于深层组件通信，使用 Context API</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title function_">createContext</span>(<span class="string">&#x27;light&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useState</span>(<span class="string">&#x27;light&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">theme</span>, <span class="attr">setTheme</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Main</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在深层组件中使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ThemedButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; theme, setTheme &#125; = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> <span class="attr">theme</span> === <span class="string">&#x27;light&#x27;</span> ? &#x27;#<span class="attr">fff</span>&#x27; <span class="attr">:</span> &#x27;#<span class="attr">000</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setTheme(theme === &#x27;light&#x27; ? &#x27;dark&#x27; : &#x27;light&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      切换主题</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误边界处理"><a href="#错误边界处理" class="headerlink" title="错误边界处理"></a>错误边界处理</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义错误边界组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">hasError</span>: <span class="literal">false</span>, <span class="attr">error</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span>, error &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidCatch</span>(<span class="params">error, errorInfo</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Caught error:&quot;</span>, error, errorInfo);</span><br><span class="line">    <span class="comment">// 可以发送到错误追踪服务</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">hasError</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">fallback</span> || <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>出错了<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用错误边界包裹可能出错的组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ErrorBoundary</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">p</span>&gt;</span>头部加载失败<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ErrorBoundary</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ErrorBoundary</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">p</span>&gt;</span>内容加载失败<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Content</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ErrorBoundary</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="性能优化技巧"><a href="#性能优化技巧" class="headerlink" title="性能优化技巧"></a>性能优化技巧</h2><div style="background-color: #eafaf1; padding: 20px; border-radius: 5px; margin: 20px 0;"><h3 style="margin-top: 0; color: #27ae60;">⚡ 性能优化核心原则</h3><ol>  <li><strong>减少渲染次数</strong>：避免不必要的重新渲染</li>  <li><strong>减少计算量</strong>：缓存计算结果和回调函数</li>  <li><strong>减少渲染量</strong>：只渲染用户可见的内容</li>  <li><strong>代码分割</strong>：按需加载代码</li>  <li><strong>资源优化</strong>：优化图片和其他资源</li></ol></div><h3 id="React-memo-useMemo-和-useCallback"><a href="#React-memo-useMemo-和-useCallback" class="headerlink" title="React.memo, useMemo 和 useCallback"></a>React.memo, useMemo 和 useCallback</h3><p>这些API帮助我们控制组件和值的重新计算，避免不必要的渲染和计算。</p><div style="display: flex; flex-wrap: wrap; gap: 20px; margin: 20px 0;">  <div style="flex: 1; min-width: 300px; border: 1px solid #ddd; border-radius: 5px; padding: 15px;">    <h4>React.memo</h4>    <p>记忆化组件，当props不变时跳过重新渲染</p>    <pre><code>const MemoComponent = React.memo(MyComponent);</code></pre>  </div>  <div style="flex: 1; min-width: 300px; border: 1px solid #ddd; border-radius: 5px; padding: 15px;">    <h4>useMemo</h4>    <p>记忆化计算结果，依赖项不变时跳过重新计算</p>    <pre><code>const result = useMemo(() => compute(a, b), [a, b]);</code></pre>  </div>  <div style="flex: 1; min-width: 300px; border: 1px solid #ddd; border-radius: 5px; padding: 15px;">    <h4>useCallback</h4>    <p>记忆化回调函数，依赖项不变时保持函数引用不变</p>    <pre><code>const handler = useCallback(() => doSomething(a), [a]);</code></pre>  </div></div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 React.memo 避免不必要的重渲染</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MemoizedComponent</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// 只有当 props 变化时才会重新渲染</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较函数 - 深度控制重新渲染的条件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">areEqual</span> = (<span class="params">prevProps, nextProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 只比较关心的 props</span></span><br><span class="line">  <span class="keyword">return</span> prevProps.<span class="property">id</span> === nextProps.<span class="property">id</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MemoizedWithCustomCompare</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">MyComponent</span>, areEqual);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配合 useCallback 使用以稳定化传递给子组件的函数引用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ParentComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不使用 useCallback 时，每次 ParentComponent 重新渲染，handleClick 都是新函数</span></span><br><span class="line">  <span class="comment">// 导致 MemoizedComponent 尽管使用了 React.memo 也会重新渲染</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用 useCallback 记忆化函数，保持引用稳定</span></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button clicked&#x27;</span>);</span><br><span class="line">  &#125;, []); <span class="comment">// 依赖项为空数组，handleClick 引用永远不变</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MemoizedComponent</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        更新计数: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div style="background-color: #fff8dc; padding: 15px; border-left: 5px solid #f1c40f; margin: 15px 0;"><strong>⚠️ 注意</strong>：过度优化可能导致代码复杂性增加。在应用这些技术前，确保你已经遇到了真正的性能问题。</div><h3 id="虚拟列表渲染"><a href="#虚拟列表渲染" class="headerlink" title="虚拟列表渲染"></a>虚拟列表渲染</h3><p>当需要渲染大量数据时，可以使用虚拟列表技术只渲染可视区域内的项目。</p><div style="text-align: center; margin: 20px 0;"><pre style="display: inline-block; text-align: left; background-color: #f9f9f9; padding: 15px; border-radius: 5px;">┌─────────────────────────┐│    可视区域 (例如600px)   │├─────────────────────────┤│ Item 1                  │ ◄── 只渲染这些可见项│ Item 2                  ││ Item 3                  ││ ...                     ││ Item 20                 │├─────────────────────────┤│                         ││  (其他1000个项不渲染)     │ ◄── 节省内存和CPU│                         │└─────────────────────────┘</pre></div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 react-window 实现虚拟列表</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FixedSizeList</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-window&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">VirtualizedList</span>(<span class="params">&#123; items &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// Row 组件复用 - 根据提供的 index 渲染不同的内容</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">Row</span> = (<span class="params">&#123; index, style &#125;</span>) =&gt; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Item &#123;items[index]&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">FixedSizeList</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">height</span>=<span class="string">&#123;500&#125;</span>        // <span class="attr">列表可视区域高度</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>        // <span class="attr">列表宽度</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">itemCount</span>=<span class="string">&#123;items.length&#125;</span>  // <span class="attr">总项目数量</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">itemSize</span>=<span class="string">&#123;35&#125;</span>       // <span class="attr">每项高度</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;Row&#125;  // 渲染每行的组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">FixedSizeList</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码分割与懒加载"><a href="#代码分割与懒加载" class="headerlink" title="代码分割与懒加载"></a>代码分割与懒加载</h3><div style="background-color: #f0f7fb; padding: 15px; border-left: 5px solid #3498db; margin: 15px 0;"><strong>💡 最佳实践</strong>：将应用拆分成较小的代码块，并按需加载，可以显著减少初始加载时间。</div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 React.lazy 和 Suspense 实现代码分割和懒加载</span></span><br><span class="line"><span class="comment">// 不导入整个组件，而是返回一个动态加载组件的Promise</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LazyComponent</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./LazyComponent&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// Suspense 在组件加载时显示 fallback 内容</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LazyComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于路由的代码分割 - 按页面拆分代码</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./routes/Home&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./routes/About&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-React-DevTools-进行性能分析"><a href="#使用-React-DevTools-进行性能分析" class="headerlink" title="使用 React DevTools 进行性能分析"></a>使用 React DevTools 进行性能分析</h3><div style="display: flex; flex-direction: column; gap: 10px; margin: 20px 0; background-color: #f9f9f9; padding: 15px; border-radius: 5px;">  <div><strong>性能分析步骤：</strong></div>  <div>1️⃣ 安装 React DevTools 扩展</div>  <div>2️⃣ 打开开发者工具，切换到 Profiler 选项卡</div>  <div>3️⃣ 点击录制按钮，执行要分析的操作</div>  <div>4️⃣ 停止录制，分析火焰图和排名图表</div>  <div>5️⃣ 找出重新渲染次数过多或渲染时间过长的组件</div>  <div>6️⃣ 使用 memo, useMemo, useCallback 等优化</div></div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Profiler API 进行程序化性能测量</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Profiler</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 性能数据回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onRenderCallback</span>(<span class="params"></span></span><br><span class="line"><span class="params">  id,            <span class="comment">// 发生提交的 Profiler 树的 &quot;id&quot;</span></span></span><br><span class="line"><span class="params">  phase,         <span class="comment">// &quot;mount&quot; (首次挂载) 或 &quot;update&quot; (重新渲染)</span></span></span><br><span class="line"><span class="params">  actualDuration, <span class="comment">// 本次更新中渲染花费的时间</span></span></span><br><span class="line"><span class="params">  baseDuration,  <span class="comment">// 估计不使用 memoization 的情况下渲染整个子树需要的时间</span></span></span><br><span class="line"><span class="params">  startTime,     <span class="comment">// 本次更新中 React 开始渲染的时间戳</span></span></span><br><span class="line"><span class="params">  commitTime,    <span class="comment">// 本次更新中 React 提交更新的时间戳</span></span></span><br><span class="line"><span class="params">  interactions   <span class="comment">// 属于本次更新的 interactions 集合</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 将性能数据发送到分析服务或记录到控制台</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`组件 <span class="subst">$&#123;id&#125;</span> <span class="subst">$&#123;phase&#125;</span> 渲染耗时: <span class="subst">$&#123;actualDuration&#125;</span>ms`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Profiler</span> <span class="attr">id</span>=<span class="string">&quot;App&quot;</span> <span class="attr">onRender</span>=<span class="string">&#123;onRenderCallback&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Profiler</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-18-核心特性"><a href="#React-18-核心特性" class="headerlink" title="React 18 核心特性"></a>React 18 核心特性</h2><h3 id="并发渲染-Concurrent-Rendering"><a href="#并发渲染-Concurrent-Rendering" class="headerlink" title="并发渲染 (Concurrent Rendering)"></a>并发渲染 (Concurrent Rendering)</h3><p>React 18 引入的最重要特性是并发渲染，这使 React 能够同时准备多个UI状态，而不会阻塞主线程。</p><h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Transition API 进行非阻塞更新</span></span><br><span class="line"><span class="keyword">import</span> &#123; startTransition, useTransition &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SearchResults</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [isPending, startTransition] = <span class="title function_">useTransition</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateQuery</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 紧急更新：立即响应用户输入</span></span><br><span class="line">    <span class="title function_">setInputValue</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 非紧急更新：可以被中断的搜索结果更新</span></span><br><span class="line">    <span class="title function_">startTransition</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setQuery</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;updateQuery&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isPending &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SearchResults</span> <span class="attr">query</span>=<span class="string">&#123;query&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动批处理-Automatic-Batching"><a href="#自动批处理-Automatic-Batching" class="headerlink" title="自动批处理 (Automatic Batching)"></a>自动批处理 (Automatic Batching)</h3><p>React 18 默认对所有更新进行批处理，包括事件处理程序、定时器、promises等，减少不必要的重新渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 React 18 之前</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 这些会导致两次单独的渲染</span></span><br><span class="line">  <span class="title function_">setCount</span>(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  <span class="title function_">setFlag</span>(<span class="function"><span class="params">f</span> =&gt;</span> !f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 18 中自动批处理 - 只有一次渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setCount</span>(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  <span class="title function_">setFlag</span>(<span class="function"><span class="params">f</span> =&gt;</span> !f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用批处理（如果需要）</span></span><br><span class="line"><span class="keyword">import</span> &#123; flushSync &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">flushSync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 立即渲染</span></span><br><span class="line">  <span class="title function_">flushSync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setFlag</span>(<span class="function"><span class="params">f</span> =&gt;</span> !f);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 再次立即渲染</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Suspense-改进"><a href="#Suspense-改进" class="headerlink" title="Suspense 改进"></a>Suspense 改进</h3><p>React 18 对 Suspense 组件进行了增强，支持服务端渲染和并发特性。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">Loading</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SomeComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新的客户端渲染-API"><a href="#新的客户端渲染-API" class="headerlink" title="新的客户端渲染 API"></a>新的客户端渲染 API</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 18 之前</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, container);</span><br><span class="line"></span><br><span class="line"><span class="comment">// React 18</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(container);</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><h3 id="useId-Hook"><a href="#useId-Hook" class="headerlink" title="useId Hook"></a>useId Hook</h3><p>生成服务端和客户端一致的唯一 ID。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NameFields</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title function_">useId</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">id</span>&#125;<span class="attr">-firstName</span>`&#125;&gt;</span>First Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">id</span>&#125;<span class="attr">-firstName</span>`&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">id</span>&#125;<span class="attr">-lastName</span>`&#125;&gt;</span>Last Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">id</span>&#125;<span class="attr">-lastName</span>`&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useDeferredValue"><a href="#useDeferredValue" class="headerlink" title="useDeferredValue"></a>useDeferredValue</h3><p>允许延迟更新非关键UI部分。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SearchResults</span>(<span class="params">&#123; query &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> deferredQuery = <span class="title function_">useDeferredValue</span>(query);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用 deferredQuery 进行搜索，这部分可能会&quot;滞后&quot;于输入</span></span><br><span class="line">  <span class="comment">// 但不会阻塞用户交互</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Results</span> <span class="attr">query</span>=<span class="string">&#123;deferredQuery&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-19-新特性与展望"><a href="#React-19-新特性与展望" class="headerlink" title="React 19 新特性与展望"></a>React 19 新特性与展望</h2><blockquote><p>注：React 19 仍在开发中，以下内容基于官方已公布信息和开发路线图。</p></blockquote><h3 id="新的-React-编译器"><a href="#新的-React-编译器" class="headerlink" title="新的 React 编译器"></a>新的 React 编译器</h3><p>React 19 将引入一个新的编译器，可以自动优化组件渲染，减少不必要的重新渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译前</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后 (示意，实际编译结果可能不同)</span></span><br><span class="line"><span class="comment">// 编译器会自动分析并优化组件渲染逻辑</span></span><br></pre></td></tr></table></figure><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>React 19 的一个主要新特性是 Actions，它将允许直接在组件中定义与服务器交互的逻辑。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 19 中的 Actions (示例)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 定义一个可以直接提交到服务器的动作</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">saveAction</span>(<span class="params">formData</span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use server&#x27;</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">saveToDatabase</span>(formData);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;saveAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hooks-的改进"><a href="#Hooks-的改进" class="headerlink" title="Hooks 的改进"></a>Hooks 的改进</h3><p>React 19 将进一步改进 Hooks API，以解决一些现有的限制和问题。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 19 中可能的新 Hook (示例)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value, setValue &#125; = <span class="title function_">useSignal</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前值: &#123;value&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setValue(value + 1)&#125;&gt;增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Asset-Loading"><a href="#Asset-Loading" class="headerlink" title="Asset Loading"></a>Asset Loading</h3><p>改进资源加载机制，更好地处理图片、字体等资源。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 19 中可能的资源加载API</span></span><br><span class="line"><span class="keyword">import</span> &#123; useAsset &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Avatar</span>(<span class="params">&#123; src &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> imgAsset = <span class="title function_">useAsset</span>(src);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (imgAsset.<span class="property">loading</span>) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Spinner</span> /&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (imgAsset.<span class="property">error</span>) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ErrorFallback</span> <span class="attr">error</span>=<span class="string">&#123;imgAsset.error&#125;</span> /&gt;</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;imgAsset.url&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="易错点与陷阱"><a href="#易错点与陷阱" class="headerlink" title="易错点与陷阱"></a>易错点与陷阱</h2><h3 id="常见的错误和陷阱"><a href="#常见的错误和陷阱" class="headerlink" title="常见的错误和陷阱"></a>常见的错误和陷阱</h3><ol><li><strong>状态管理</strong>：不正确的状态管理可能导致组件无法正确渲染或更新。</li><li><strong>事件处理</strong>：不正确的事件处理可能导致组件无法响应用户输入。</li><li><strong>条件渲染</strong>：不正确的条件渲染可能导致组件无法正确显示或隐藏。</li><li><strong>性能优化</strong>：不正确的性能优化可能导致应用性能下降。</li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><strong>使用正确的状态管理库</strong>：例如，Redux Toolkit 或 React Context API。</li><li><strong>正确处理事件</strong>：确保事件处理程序正确绑定和执行。</li><li><strong>使用条件渲染</strong>：确保条件逻辑正确，避免不必要的重新渲染。</li><li><strong>进行性能测试</strong>：使用 React DevTools 或 Profiler API 进行性能分析。</li></ol><h3 id="依赖项数组处理不当"><a href="#依赖项数组处理不当" class="headerlink" title="依赖项数组处理不当"></a>依赖项数组处理不当</h3><div style="background-color: #f8e5e5; padding: 15px; border-left: 5px solid #e74c3c; margin: 15px 0;"><strong>🚫 常见错误</strong>：在 useEffect 的依赖项数组中遗漏使用的变量，可能导致过时闭包问题。</div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误：缺少依赖项</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetchData</span>(userId);</span><br><span class="line">&#125;, []); <span class="comment">// 应该包含 userId</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确：包含所有依赖项</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetchData</span>(userId);</span><br><span class="line">&#125;, [userId]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 更好的做法：使用 useCallback 稳定化函数</span></span><br><span class="line"><span class="keyword">const</span> fetchUserData = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetchData</span>(userId);</span><br><span class="line">&#125;, [userId]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetchUserData</span>();</span><br><span class="line">&#125;, [fetchUserData]);</span><br></pre></td></tr></table></figure><h3 id="状态更新后无法立即获取最新值"><a href="#状态更新后无法立即获取最新值" class="headerlink" title="状态更新后无法立即获取最新值"></a>状态更新后无法立即获取最新值</h3><div style="display: flex; margin: 20px 0;">  <div style="background-color: #ffcccc; padding: 15px; border-radius: 5px 0 0 5px; width: 48%;">    <strong>❌ 问题</strong>    <p>React 状态更新是异步的，因此在调用 setState 之后立即尝试读取状态值会得到更新前的旧值。</p>  </div>  <div style="background-color: #ccffcc; padding: 15px; border-radius: 0 5px 5px 0; width: 48%;">    <strong>✅ 解决方案</strong>    <p>使用 useEffect 监听状态变化，或使用函数式更新回调访问最新状态。</p>  </div></div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误：状态更新后立即使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// 仍然是旧值，不会立即更新</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 错误地尝试基于更新后的状态执行操作</span></span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;达到10次点击！&#x27;</span>); <span class="comment">// 无法正确触发，因为count还是旧值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      点击次数: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确：使用useEffect监听状态变化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 当count变化时触发</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;达到10次点击！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      点击次数: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 另一种方式：使用函数式更新的回调</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function"><span class="params">prevCount</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newCount = prevCount + <span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 在这里可以访问到更新后的值</span></span><br><span class="line">      <span class="keyword">if</span> (newCount === <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;达到10次点击！&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> newCount;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      点击次数: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象和数组状态更新"><a href="#对象和数组状态更新" class="headerlink" title="对象和数组状态更新"></a>对象和数组状态更新</h3><div style="background-color: #f0f7fb; padding: 15px; border-left: 5px solid #3498db; margin: 15px 0;"><strong>💡 关键概念</strong>：React 使用浅比较来检测状态变化。当更新对象或数组状态时，必须创建新的引用，而不是修改现有引用。</div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误：直接修改状态对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserProfile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">      <span class="attr">street</span>: <span class="string">&#x27;朝阳区&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateStreet</span> = (<span class="params">newStreet</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 直接修改状态，不会触发重新渲染</span></span><br><span class="line">    user.<span class="property">address</span>.<span class="property">street</span> = newStreet;</span><br><span class="line">    <span class="title function_">setUser</span>(user); <span class="comment">// 这没用，因为引用没变</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ❌ 错误：数组操作同样的问题</span></span><br><span class="line">  <span class="keyword">const</span> [items, setItems] = <span class="title function_">useState</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addItem</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    items.<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// 直接修改数组</span></span><br><span class="line">    <span class="title function_">setItems</span>(items); <span class="comment">// 不会触发重新渲染，因为引用没变</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确：使用展开运算符创建新对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserProfile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">      <span class="attr">street</span>: <span class="string">&#x27;朝阳区&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateStreet</span> = (<span class="params">newStreet</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 正确地创建新对象</span></span><br><span class="line">    <span class="title function_">setUser</span>(&#123;</span><br><span class="line">      ...user,</span><br><span class="line">      <span class="attr">address</span>: &#123;</span><br><span class="line">        ...user.<span class="property">address</span>,</span><br><span class="line">        <span class="attr">street</span>: newStreet</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ✅ 正确：数组操作</span></span><br><span class="line">  <span class="keyword">const</span> [items, setItems] = <span class="title function_">useState</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addItem</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setItems</span>([...items, <span class="number">4</span>]); <span class="comment">// 创建新数组</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用数组的filter、map等不可变方法</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">removeItem</span> = (<span class="params">index</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setItems</span>(items.<span class="title function_">filter</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> i !== index));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件渲染中的Hook使用"><a href="#条件渲染中的Hook使用" class="headerlink" title="条件渲染中的Hook使用"></a>条件渲染中的Hook使用</h3><div style="background-color: #f8e5e5; padding: 15px; border: 2px dashed #e74c3c; margin: 15px 0; border-radius: 5px;"><strong>⚠️ Hook规则</strong>：<ol><li>只在函数组件或自定义Hook的顶层调用Hook</li><li>不要在循环、条件或嵌套函数中调用Hook</li><li>遵循这些规则确保Hook在每次渲染时都以相同的顺序被调用</li></ol></div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误：条件性调用Hooks</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ConditionalHook</span>(<span class="params">&#123; isLoggedIn &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    <span class="comment">// 错误：不能在条件语句中调用Hook</span></span><br><span class="line">    <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 错误：不能在循环中调用Hook</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [item, setItem] = <span class="title function_">useState</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 错误：不能在普通函数中调用Hook</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [clicked, setClicked] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确：Hooks必须在组件顶层无条件调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CorrectHookUsage</span>(<span class="params">&#123; isLoggedIn &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);  <span class="comment">// 始终调用，不管isLoggedIn的值</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 正确：条件语句在Hook调用之后</span></span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    <span class="comment">// 使用已声明的state</span></span><br><span class="line">    <span class="title function_">setName</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isLoggedIn &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎, &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>点击次数: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        点击</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="额外资源"><a href="#额外资源" class="headerlink" title="额外资源"></a>额外资源</h2><ol><li><a href="https://react.dev/">React 官方文档</a></li><li><a href="https://github.com/facebook/react">React GitHub 存储库</a></li><li><a href="https://reactjs.org/blog/">React 团队博客</a></li><li><a href="https://github.com/reactwg/react-18">React 18 工作组讨论</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;React-18-19-学习总结&quot;&gt;&lt;a href=&quot;#React-18-19-学习总结&quot; class=&quot;headerlink&quot; title=&quot;React 18&amp;#x2F;19 学习总结&quot;&gt;&lt;/a&gt;React 18&amp;#x2F;19 学习总结&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    
    <category term="react" scheme="https://aoayaoa.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>nginx 学习配置记录</title>
    <link href="https://aoayaoa.github.io/2025/01/07/nginx/"/>
    <id>https://aoayaoa.github.io/2025/01/07/nginx/</id>
    <published>2025-01-06T16:00:00.000Z</published>
    <updated>2025-04-14T08:05:46.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-Web-服务器配置"><a href="#Nginx-Web-服务器配置" class="headerlink" title="Nginx Web 服务器配置"></a>Nginx Web 服务器配置</h1><p>一个生产环境ready的Nginx配置模板，包含HTTP&#x2F;2、SSL、安全头信息和性能优化。</p><h2 id="📋-特性"><a href="#📋-特性" class="headerlink" title="📋 特性"></a>📋 特性</h2><ul><li>支持HTTP&#x2F;2以提升性能</li><li>自动HTTP到HTTPS重定向</li><li>现代SSL&#x2F;TLS配置与安全密码套件</li><li>静态文件缓存以提高性能</li><li>Gzip压缩以减少带宽使用</li><li>PHP-FPM支持PHP应用</li><li>后端服务的反向代理配置</li><li>包括HSTS在内的安全头信息</li><li>优化的性能设置</li></ul><h2 id="🚀-安装"><a href="#🚀-安装" class="headerlink" title="🚀 安装"></a>🚀 安装</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>Nginx (建议1.18+版本)</li><li>用于SSL&#x2F;TLS支持的OpenSSL</li><li>有效的SSL证书(用于HTTPS支持)</li></ul><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p><strong>安装Nginx:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line"><span class="built_in">sudo</span> yum install epel-release</span><br><span class="line"><span class="built_in">sudo</span> yum install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># macOS</span></span><br><span class="line">brew install nginx</span><br></pre></td></tr></table></figure></li><li><p><strong>替换默认Nginx配置:</strong></p><p>将<code>nginx.conf</code>文件复制到Nginx配置目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> nginx.conf /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></li><li><p><strong>创建SSL证书目录:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/nginx/ssl</span><br></pre></td></tr></table></figure></li><li><p><strong>安装SSL证书:</strong></p><p>将SSL证书和密钥文件放在<code>/etc/nginx/ssl/</code>目录中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> example.com.crt /etc/nginx/ssl/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> example.com.key /etc/nginx/ssl/</span><br></pre></td></tr></table></figure><p>如果你没有证书，可以使用Let’s Encrypt生成:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install certbot python3-certbot-nginx</span><br><span class="line"><span class="built_in">sudo</span> certbot --nginx -d example.com -d www.example.com</span><br></pre></td></tr></table></figure></li><li><p><strong>更新域名:</strong></p><p>编辑配置文件，将<code>example.com</code>替换为你的实际域名。</p></li><li><p><strong>测试配置:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nginx -t</span><br></pre></td></tr></table></figure></li><li><p><strong>重启Nginx:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure></li></ol><h2 id="⚙️-配置详情"><a href="#⚙️-配置详情" class="headerlink" title="⚙️ 配置详情"></a>⚙️ 配置详情</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>配置分为以下几个部分:</p><ul><li><strong>全局设置</strong>: 用户、进程、日志和PID文件</li><li><strong>事件块</strong>: 连接处理</li><li><strong>HTTP块</strong>: MIME类型、日志和性能优化</li><li><strong>Server块</strong>: 单个网站配置</li></ul><h3 id="关键配置元素"><a href="#关键配置元素" class="headerlink" title="关键配置元素"></a>关键配置元素</h3><h4 id="SSL-TLS设置"><a href="#SSL-TLS设置" class="headerlink" title="SSL&#x2F;TLS设置"></a>SSL&#x2F;TLS设置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">off</span>;</span><br></pre></td></tr></table></figure><h4 id="HSTS设置"><a href="#HSTS设置" class="headerlink" title="HSTS设置"></a>HSTS设置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000&quot;</span> always;</span><br></pre></td></tr></table></figure><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /api/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="comment"># 其他头信息...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔧-自定义"><a href="#🔧-自定义" class="headerlink" title="🔧 自定义"></a>🔧 自定义</h2><h3 id="添加新站点"><a href="#添加新站点" class="headerlink" title="添加新站点"></a>添加新站点</h3><ol><li><p>在<code>/etc/nginx/conf.d/example.conf</code>创建新的server块:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> newsite.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/newsite.com.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/newsite.com.key;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">root</span> /var/www/newsite.com;</span><br><span class="line">    <span class="comment"># 其他配置...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建HTTP到HTTPS重定向:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> newsite.com;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="调整性能设置"><a href="#调整性能设置" class="headerlink" title="调整性能设置"></a>调整性能设置</h3><p>你可以根据服务器资源调整以下设置:</p><ul><li><code>worker_processes</code>: 设置为CPU核心数</li><li><code>worker_connections</code>: 高流量站点可增加此值</li><li><code>keepalive_timeout</code>: 根据应用需求调整</li><li><code>client_max_body_size</code>: 根据上传需求设置</li></ul><h2 id="🛡️-安全考虑"><a href="#🛡️-安全考虑" class="headerlink" title="🛡️ 安全考虑"></a>🛡️ 安全考虑</h2><p>此配置包含几项安全增强:</p><ul><li>现代TLS协议和密码套件</li><li>HTTP严格传输安全(HSTS)</li><li>限制访问隐藏文件</li><li>防止MIME类型嗅探的头信息</li></ul><p>额外建议:</p><ul><li>为登录页面和API端点启用速率限制</li><li>考虑添加ModSecurity作为Web应用防火墙</li><li>实现Content-Security-Policy头信息</li><li>定期更新Nginx到最新版本</li></ul><h2 id="📊-监控和日志"><a href="#📊-监控和日志" class="headerlink" title="📊 监控和日志"></a>📊 监控和日志</h2><h3 id="日志位置"><a href="#日志位置" class="headerlink" title="日志位置"></a>日志位置</h3><ul><li>访问日志: <code>/var/log/nginx/access.log</code></li><li>错误日志: <code>/var/log/nginx/error.log</code></li></ul><h3 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看实时日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/nginx/error.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查语法错误</span></span><br><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Nginx状态</span></span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><h2 id="📝-许可"><a href="#📝-许可" class="headerlink" title="📝 许可"></a>📝 许可</h2><p>此配置基于MIT许可提供。你可以自由修改并用于你的项目。</p><h2 id="🙏-致谢"><a href="#🙏-致谢" class="headerlink" title="🙏 致谢"></a>🙏 致谢</h2><p>此配置整合了以下来源的最佳实践:</p><ul><li><a href="https://ssl-config.mozilla.org/">Mozilla SSL配置生成器</a></li><li><a href="https://www.acunetix.com/blog/web-security-zone/hardening-nginx/">Nginx加固指南</a></li><li>各种DevOps社区资源</li></ul><hr><p>⭐ 如果你觉得这个配置有用，请为仓库点星 ⭐ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx-Web-服务器配置&quot;&gt;&lt;a href=&quot;#Nginx-Web-服务器配置&quot; class=&quot;headerlink&quot; title=&quot;Nginx Web 服务器配置&quot;&gt;&lt;/a&gt;Nginx Web 服务器配置&lt;/h1&gt;&lt;p&gt;一个生产环境ready的Nginx配</summary>
      
    
    
    
    
    <category term="性能优化" scheme="https://aoayaoa.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Promise</title>
    <link href="https://aoayaoa.github.io/2024/12/13/Promise/"/>
    <id>https://aoayaoa.github.io/2024/12/13/Promise/</id>
    <published>2024-12-12T16:00:00.000Z</published>
    <updated>2025-03-07T03:59:37.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解-JavaScript-Promise：从入门到精通"><a href="#深入理解-JavaScript-Promise：从入门到精通" class="headerlink" title="深入理解 JavaScript Promise：从入门到精通"></a>深入理解 JavaScript Promise：从入门到精通</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Promise 是 JavaScript 中处理异步操作的核心机制，它的出现让我们告别了回调地狱，使异步代码更加清晰和易于维护。本文将深入探讨 Promise 的方方面面，从基础概念到高级应用，帮助你全面掌握这一重要特性。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#1-promise-%E5%9F%BA%E7%A1%80">1. Promise 基础</a></li><li><a href="#2-promise-%E7%8A%B6%E6%80%81">2. Promise 状态</a></li><li><a href="#3-promise-%E6%96%B9%E6%B3%95">3. Promise 方法</a></li><li><a href="#4-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4. 错误处理</a></li><li><a href="#5-promise-%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8">5. Promise 链式调用</a></li><li><a href="#6-promise-%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95">6. Promise 静态方法</a></li><li><a href="#7-asyncawait">7. async&#x2F;await</a></li><li><a href="#8-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">8. 实际应用场景</a></li><li><a href="#9-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">9. 最佳实践</a></li><li><a href="#10-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%92%8C%E9%99%B7%E9%98%B1">10. 常见问题和陷阱</a></li><li><a href="#11-%E6%9B%B4%E5%A4%9A%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">11. 更多实际应用场景</a></li><li><a href="#12-%E8%AF%A6%E7%BB%86%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97">12. 详细错误处理指南</a></li><li><a href="#13-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">13. 性能优化最佳实践</a></li><li><a href="#14-%E8%A1%A5%E5%85%85%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%BB%BA%E8%AE%AE">14. 补充最佳实践建议</a></li></ul><h2 id="1-Promise-基础"><a href="#1-Promise-基础" class="headerlink" title="1. Promise 基础"></a>1. Promise 基础</h2><h3 id="1-1-什么是-Promise？"><a href="#1-1-什么是-Promise？" class="headerlink" title="1.1 什么是 Promise？"></a>1.1 什么是 Promise？</h3><p>Promise 是异步编程的一种解决方案，比传统的回调函数更加优雅。它是一个代表了异步操作最终完成或失败的对象。通过 Promise，我们可以用同步操作的流程写法来处理异步操作，避免了回调函数层层嵌套的问题。</p><h3 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h3><p>Promise 的基本语法非常简单，让我们通过一个例子来了解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 异步操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 操作成功 */</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);  <span class="comment">// 成功时调用</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(error);   <span class="comment">// 失败时调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个构造函数接收一个执行器（executor）函数作为参数，该函数会立即执行。执行器函数接收两个参数：resolve 和 reject，它们是由 JavaScript 引擎提供的函数。</p><h3 id="1-3-基本用法"><a href="#1-3-基本用法" class="headerlink" title="1.3 基本用法"></a>1.3 基本用法</h3><p>Promise 对象创建后，我们可以通过它的方法来处理异步操作的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理成功情况</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功：&#x27;</span>, result);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误情况</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误：&#x27;</span>, error);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 总是执行</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作完成&#x27;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>这种链式调用的方式使得异步操作的流程更加清晰，代码更易于理解和维护。</p><h2 id="2-Promise-状态"><a href="#2-Promise-状态" class="headerlink" title="2. Promise 状态"></a>2. Promise 状态</h2><p>Promise 的状态是它的核心特性之一，理解 Promise 的状态对于正确使用它至关重要。</p><h3 id="2-1-三种状态"><a href="#2-1-三种状态" class="headerlink" title="2.1 三种状态"></a>2.1 三种状态</h3><p>Promise 有且仅有三种状态：</p><ul><li><strong>pending（进行中）</strong>：初始状态，既不是成功，也不是失败</li><li><strong>fulfilled（已成功）</strong>：操作成功完成</li><li><strong>rejected（已失败）</strong>：操作失败</li></ul><h3 id="2-2-状态转换"><a href="#2-2-状态转换" class="headerlink" title="2.2 状态转换"></a>2.2 状态转换</h3><p>Promise 的状态转换是单向的，一旦状态改变，就不会再变。这种特性称为”状态的不可逆性”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态转换示例</span></span><br><span class="line"><span class="keyword">const</span> successPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>);  <span class="comment">// pending -&gt; fulfilled</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> failedPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);   <span class="comment">// pending -&gt; rejected</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-状态的不可逆性"><a href="#2-3-状态的不可逆性" class="headerlink" title="2.3 状态的不可逆性"></a>2.3 状态的不可逆性</h3><p>一旦 Promise 的状态改变，后续的状态修改操作将被忽略：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>);    <span class="comment">// 状态变为 fulfilled</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);     <span class="comment">// 这行代码会被忽略</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;再次成功&#x27;</span>); <span class="comment">// 这行代码也会被忽略</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-Promise-方法"><a href="#3-Promise-方法" class="headerlink" title="3. Promise 方法"></a>3. Promise 方法</h2><p>Promise 提供了几个关键的实例方法，让我们能够优雅地处理异步操作的结果。</p><h3 id="3-1-then-方法"><a href="#3-1-then-方法" class="headerlink" title="3.1 then() 方法"></a>3.1 then() 方法</h3><p><code>then()</code> 是最常用的 Promise 方法，它可以接收两个回调函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理成功的情况</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功：&#x27;</span>, result);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理失败的情况（可选）</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败：&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-2-catch-方法"><a href="#3-2-catch-方法" class="headerlink" title="3.2 catch() 方法"></a>3.2 catch() 方法</h3><p><code>catch()</code> 方法用于处理 Promise 中的错误，它是 <code>.then(null, rejection)</code> 的语法糖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发生错误：&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-3-finally-方法"><a href="#3-3-finally-方法" class="headerlink" title="3.3 finally() 方法"></a>3.3 finally() 方法</h3><p><code>finally()</code> 方法用于指定无论 Promise 对象最后状态如何，都会执行的操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 清理工作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise 已完成&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4. 错误处理"></a>4. 错误处理</h2><h3 id="4-1-错误捕获方式"><a href="#4-1-错误捕获方式" class="headerlink" title="4.1 错误捕获方式"></a>4.1 错误捕获方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式 1：使用 catch</span></span><br><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 2：使用 then 的第二个参数</span></span><br><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="4-2-错误处理逻辑"><a href="#4-2-错误处理逻辑" class="headerlink" title="4.2 错误处理逻辑"></a>4.2 错误处理逻辑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 返回普通值 - 恢复到 fulfilled 状态</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;recovered&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 抛出错误 - 继续 rejected 状态</span></span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 返回 rejected promise - 继续 rejected 状态</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="5-Promise-链式调用"><a href="#5-Promise-链式调用" class="headerlink" title="5. Promise 链式调用"></a>5. Promise 链式调用</h2><h3 id="5-1-基本链式调用"><a href="#5-1-基本链式调用" class="headerlink" title="5.1 基本链式调用"></a>5.1 基本链式调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(step1)</span><br><span class="line">    .<span class="title function_">then</span>(step2)</span><br><span class="line">    .<span class="title function_">then</span>(step3)</span><br><span class="line">    .<span class="title function_">catch</span>(handleError);</span><br></pre></td></tr></table></figure><h3 id="5-2-值的传递"><a href="#5-2-值的传递" class="headerlink" title="5.2 值的传递"></a>5.2 值的传递</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)     <span class="comment">// 2</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>)     <span class="comment">// 4</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);   <span class="comment">// 输出: 4</span></span><br></pre></td></tr></table></figure><h3 id="5-3-Promise-链中的错误处理"><a href="#5-3-Promise-链中的错误处理" class="headerlink" title="5.3 Promise 链中的错误处理"></a>5.3 Promise 链中的错误处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetchUser</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!user.<span class="property">id</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid user&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fetchProfile</span>(user.<span class="property">id</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">profile</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">updateProfile</span>(profile);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理任何步骤中的错误</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="6-Promise-静态方法"><a href="#6-Promise-静态方法" class="headerlink" title="6. Promise 静态方法"></a>6. Promise 静态方法</h2><h3 id="6-1-Promise-resolve"><a href="#6-1-Promise-resolve" class="headerlink" title="6.1 Promise.resolve()"></a>6.1 Promise.resolve()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个立即 resolve 的 Promise</span></span><br><span class="line"><span class="keyword">const</span> resolved = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(value);</span><br></pre></td></tr></table></figure><h3 id="6-2-Promise-reject"><a href="#6-2-Promise-reject" class="headerlink" title="6.2 Promise.reject()"></a>6.2 Promise.reject()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个立即 reject 的 Promise</span></span><br><span class="line"><span class="keyword">const</span> rejected = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br></pre></td></tr></table></figure><h3 id="6-3-Promise-all"><a href="#6-3-Promise-all" class="headerlink" title="6.3 Promise.all()"></a>6.3 Promise.all()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待所有 Promise 完成</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2, promise3])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// results 是一个数组，包含所有 Promise 的结果</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="6-4-Promise-race"><a href="#6-4-Promise-race" class="headerlink" title="6.4 Promise.race()"></a>6.4 Promise.race()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回最先完成的 Promise 结果</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([promise1, promise2])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">firstResult</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// firstResult 是最先完成的 Promise 的结果</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="6-5-Promise-allSettled"><a href="#6-5-Promise-allSettled" class="headerlink" title="6.5 Promise.allSettled()"></a>6.5 Promise.allSettled()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待所有 Promise 完成（无论成功或失败）</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([promise1, promise2])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// results 包含所有 Promise 的状态和结果</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="7-async-await"><a href="#7-async-await" class="headerlink" title="7. async&#x2F;await"></a>7. async&#x2F;await</h2><h3 id="7-1-基本用法"><a href="#7-1-基本用法" class="headerlink" title="7.1 基本用法"></a>7.1 基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-与-Promise-的关系"><a href="#7-2-与-Promise-的关系" class="headerlink" title="7.2 与 Promise 的关系"></a>7.2 与 Promise 的关系</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise 方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// async/await 方式</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-实际应用场景"><a href="#8-实际应用场景" class="headerlink" title="8. 实际应用场景"></a>8. 实际应用场景</h2><h3 id="8-1-API-请求"><a href="#8-1-API-请求" class="headerlink" title="8.1 API 请求"></a>8.1 API 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching user:&#x27;</span>, error);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-并行请求"><a href="#8-2-并行请求" class="headerlink" title="8.2 并行请求"></a>8.2 并行请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchAllData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> [users, posts, comments] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">            <span class="title function_">fetchUsers</span>(),</span><br><span class="line">            <span class="title function_">fetchPosts</span>(),</span><br><span class="line">            <span class="title function_">fetchComments</span>()</span><br><span class="line">        ]);</span><br><span class="line">        <span class="keyword">return</span> &#123; users, posts, comments &#125;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-串行请求"><a href="#8-3-串行请求" class="headerlink" title="8.3 串行请求"></a>8.3 串行请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserAndPosts</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">fetchUser</span>(userId);</span><br><span class="line">        <span class="keyword">const</span> posts = <span class="keyword">await</span> <span class="title function_">fetchUserPosts</span>(user.<span class="property">id</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; user, posts &#125;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-最佳实践"><a href="#9-最佳实践" class="headerlink" title="9. 最佳实践"></a>9. 最佳实践</h2><h3 id="9-1-错误处理"><a href="#9-1-错误处理" class="headerlink" title="9.1 错误处理"></a>9.1 错误处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleAsyncOperation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">asyncOperation</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 记录错误</span></span><br><span class="line">        <span class="title function_">logError</span>(error);</span><br><span class="line">        <span class="comment">// 返回默认值或重新抛出</span></span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 清理工作</span></span><br><span class="line">        <span class="title function_">cleanup</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-Promise-超时处理"><a href="#9-2-Promise-超时处理" class="headerlink" title="9.2 Promise 超时处理"></a>9.2 Promise 超时处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeoutPromise</span>(<span class="params">promise, timeout</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">        promise,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">_, reject</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Timeout&#x27;</span>)), timeout)</span><br><span class="line">        )</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-取消操作"><a href="#9-3-取消操作" class="headerlink" title="9.3 取消操作"></a>9.3 取消操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCancellablePromise</span>(<span class="params">promise</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> isCancelled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> wrappedPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">            <span class="function"><span class="params">value</span> =&gt;</span> isCancelled ? <span class="title function_">reject</span>(<span class="string">&#x27;Cancelled&#x27;</span>) : <span class="title function_">resolve</span>(value),</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> isCancelled ? <span class="title function_">reject</span>(<span class="string">&#x27;Cancelled&#x27;</span>) : <span class="title function_">reject</span>(error)</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">promise</span>: wrappedPromise,</span><br><span class="line">        <span class="attr">cancel</span>: <span class="function">() =&gt;</span> &#123; isCancelled = <span class="literal">true</span>; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-常见问题和陷阱"><a href="#10-常见问题和陷阱" class="headerlink" title="10. 常见问题和陷阱"></a>10. 常见问题和陷阱</h2><h3 id="10-1-Promise-执行顺序"><a href="#10-1-Promise-执行顺序" class="headerlink" title="10.1 Promise 执行顺序"></a>10.1 Promise 执行顺序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误理解：认为 Promise 中的所有操作都是异步的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>));</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出: 1, 4, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ⚠️ 特别注意：Promise 中的同步和异步操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步代码1&#x27;</span>); <span class="comment">// Promise 构造函数中的代码是同步执行的</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;同步代码2&#x27;</span>);     <span class="comment">// resolve/reject 是同步执行的</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步代码3&#x27;</span>); <span class="comment">// 这行也会同步执行</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步微任务1&#x27;</span>); <span class="comment">// then 回调是异步微任务</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步微任务2&#x27;</span>); <span class="comment">// 链式调用的 then 也是异步微任务</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结束&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序：</span></span><br><span class="line"><span class="comment">// 开始</span></span><br><span class="line"><span class="comment">// 同步代码1</span></span><br><span class="line"><span class="comment">// 同步代码2</span></span><br><span class="line"><span class="comment">// 同步代码3</span></span><br><span class="line"><span class="comment">// 结束</span></span><br><span class="line"><span class="comment">// 异步微任务1</span></span><br><span class="line"><span class="comment">// 异步微任务2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更复杂的执行顺序示例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>); <span class="comment">// 宏任务</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Promise 1&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// 微任务</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Promise 2&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// 微任务</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Promise 3&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// 微任务</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序：</span></span><br><span class="line"><span class="comment">// script start</span></span><br><span class="line"><span class="comment">// script end</span></span><br><span class="line"><span class="comment">// Promise 1</span></span><br><span class="line"><span class="comment">// Promise 3</span></span><br><span class="line"><span class="comment">// Promise 2</span></span><br><span class="line"><span class="comment">// setTimeout</span></span><br></pre></td></tr></table></figure><h3 id="10-1-1-Promise-中的同步和异步操作"><a href="#10-1-1-Promise-中的同步和异步操作" class="headerlink" title="10.1.1 Promise 中的同步和异步操作"></a>10.1.1 Promise 中的同步和异步操作</h3><ol><li><p><strong>同步执行的部分</strong>：</p><ul><li>Promise 构造函数中的代码</li><li>resolve() 或 reject() 的调用</li><li>直接在 Promise 中的代码</li></ul></li><li><p><strong>异步微任务</strong>：</p><ul><li>.then() 的回调</li><li>.catch() 的回调</li><li>.finally() 的回调</li></ul></li><li><p><strong>执行顺序规则</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例：混合同步和异步操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1 - 同步&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2 - 同步&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;3 - 同步&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4 - 同步&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5 - 异步微任务&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;6 - 同步&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;7 - 同步&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8 - 异步微任务&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;9 - 异步宏任务&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;10 - 同步&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序：</span></span><br><span class="line"><span class="comment">// 1 - 同步</span></span><br><span class="line"><span class="comment">// 2 - 同步</span></span><br><span class="line"><span class="comment">// 4 - 同步</span></span><br><span class="line"><span class="comment">// 10 - 同步</span></span><br><span class="line"><span class="comment">// 5 - 异步微任务</span></span><br><span class="line"><span class="comment">// 6 - 同步</span></span><br><span class="line"><span class="comment">// 8 - 异步微任务</span></span><br><span class="line"><span class="comment">// 9 - 异步宏任务</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注意事项</strong>：</p><ul><li>Promise 构造函数是同步执行的</li><li>resolve&#x2F;reject 的调用是同步的，但其触发的 then&#x2F;catch 是异步的</li><li>微任务优先于宏任务执行</li><li>同一轮事件循环中的微任务会在下一个宏任务之前执行完</li></ul></li><li><p><strong>实际应用示例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1 - 同步&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2 - 同步&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;3 - 同步&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4 - 同步&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> p; <span class="comment">// await 后面的代码会被转换成 then 的回调（微任务）</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5 - 异步&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">example</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;6 - 同步&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序：</span></span><br><span class="line"><span class="comment">// 1 - 同步</span></span><br><span class="line"><span class="comment">// 2 - 同步</span></span><br><span class="line"><span class="comment">// 4 - 同步</span></span><br><span class="line"><span class="comment">// 6 - 同步</span></span><br><span class="line"><span class="comment">// 5 - 异步</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-2-Promise-错误处理"><a href="#10-2-Promise-错误处理" class="headerlink" title="10.2 Promise 错误处理"></a>10.2 Promise 错误处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line">promise.<span class="title function_">then</span>(success).<span class="title function_">catch</span>(error).<span class="title function_">then</span>(next);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(success)</span><br><span class="line">    .<span class="title function_">then</span>(next)</span><br><span class="line">    .<span class="title function_">catch</span>(error);</span><br></pre></td></tr></table></figure><h3 id="10-3-内存泄漏"><a href="#10-3-内存泄漏" class="headerlink" title="10.3 内存泄漏"></a>10.3 内存泄漏</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 避免这样</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 永远不会 resolve 或 reject</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议这样</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 添加超时处理</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Timeout&#x27;</span>)), <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="10-4-Promise-嵌套"><a href="#10-4-Promise-嵌套" class="headerlink" title="10.4 Promise 嵌套"></a>10.4 Promise 嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 避免嵌套</span></span><br><span class="line"><span class="title function_">fetchUser</span>().<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchPosts</span>(user.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fetchComments</span>(posts[<span class="number">0</span>].<span class="property">id</span>).<span class="title function_">then</span>(<span class="function"><span class="params">comments</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 处理数据</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用链式调用</span></span><br><span class="line"><span class="title function_">fetchUser</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> <span class="title function_">fetchPosts</span>(user.<span class="property">id</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">posts</span> =&gt;</span> <span class="title function_">fetchComments</span>(posts[<span class="number">0</span>].<span class="property">id</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">comments</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理数据</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="10-5-常见易错点和特别提示"><a href="#10-5-常见易错点和特别提示" class="headerlink" title="10.5 常见易错点和特别提示"></a>10.5 常见易错点和特别提示</h3><h4 id="1-Promise-构造函数中的代码立即执行"><a href="#1-Promise-构造函数中的代码立即执行" class="headerlink" title="1. Promise 构造函数中的代码立即执行"></a>1. Promise 构造函数中的代码立即执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误理解：认为 Promise 中的代码是异步执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise 内部&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;完成&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结束&#x27;</span>);</span><br><span class="line"><span class="comment">// 实际输出：</span></span><br><span class="line"><span class="comment">// 开始</span></span><br><span class="line"><span class="comment">// Promise 内部</span></span><br><span class="line"><span class="comment">// 结束</span></span><br></pre></td></tr></table></figure><h4 id="2-resolve-reject-后的代码仍会执行"><a href="#2-resolve-reject-后的代码仍会执行" class="headerlink" title="2. resolve&#x2F;reject 后的代码仍会执行"></a>2. resolve&#x2F;reject 后的代码仍会执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误示例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;完成&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这里仍会执行&#x27;</span>); <span class="comment">// 这行代码会执行</span></span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 显式返回也无法阻止后续代码执行</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确做法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="string">&#x27;完成&#x27;</span>); <span class="comment">// 使用 return 来确保后续代码不执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-then-catch-返回值的问题"><a href="#3-then-catch-返回值的问题" class="headerlink" title="3. then&#x2F;catch 返回值的问题"></a>3. then&#x2F;catch 返回值的问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.1 错误恢复模式</span></span><br><span class="line"><span class="comment">// ❌ 错误理解：认为错误一旦发生，后续的 then 都不会执行</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;initial error&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不会执行&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获错误:&quot;</span>, error);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;recovered&quot;</span>;  <span class="comment">// 返回普通值，Promise 变为 fulfilled 状态</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;会执行，值为:&quot;</span>, result); <span class="comment">// 会执行，因为上一个 then 返回了正常值</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不会执行，因为错误已经被处理&quot;</span>); <span class="comment">// 不会执行</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2 错误传播模式</span></span><br><span class="line"><span class="comment">// ❌ 错误理解：认为使用了 catch 就一定能捕获所有错误</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;error1&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不会执行&quot;</span>),</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获 error1&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;error2&quot;</span>;  <span class="comment">// 抛出新错误，Promise 变为 rejected 状态</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不会执行&quot;</span>),</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获 error2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;error3&quot;</span>);  <span class="comment">// 返回 rejected promise</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不会执行&quot;</span>),</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获 error3&quot;</span>);</span><br><span class="line">        <span class="comment">// 没有返回值，默认返回 undefined，Promise 变为 fulfilled 状态</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;会执行&quot;</span>),</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不会执行&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.3 Promise 状态转换规则</span></span><br><span class="line"><span class="comment">// ✅ 正确理解：Promise 状态转换取决于返回值</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 情况1：返回普通值（包括 undefined）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;normal&quot;</span>;  <span class="comment">// Promise 变为 fulfilled 状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况2：抛出错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();  <span class="comment">// Promise 变为 rejected 状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况3：返回 resolved 的 Promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;ok&quot;</span>);  <span class="comment">// Promise 变为 fulfilled 状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况4：返回 rejected 的 Promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;fail&quot;</span>);  <span class="comment">// Promise 变为 rejected 状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况5：不返回任何值</span></span><br><span class="line">        <span class="comment">// 默认返回 undefined，Promise 变为 fulfilled 状态</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.4 错误处理最佳实践</span></span><br><span class="line"><span class="comment">// ✅ 推荐做法：根据错误类型决定是恢复还是继续传播</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleError</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">riskyOperation</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">isRecoverable</span>) &#123;</span><br><span class="line">            <span class="comment">// 可恢复错误，返回默认值</span></span><br><span class="line">            <span class="keyword">return</span> defaultValue;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不可恢复错误，继续传播</span></span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.5 注意事项总结：</span></span><br><span class="line"><span class="comment">// 1. then 的第二个参数（错误处理函数）只处理当前 Promise 的错误</span></span><br><span class="line"><span class="comment">// 2. 错误处理函数的返回值决定了下一个 Promise 的状态</span></span><br><span class="line"><span class="comment">// 3. 返回普通值会将 Promise 转为 fulfilled 状态</span></span><br><span class="line"><span class="comment">// 4. 抛出错误或返回 rejected Promise 会将 Promise 转为 rejected 状态</span></span><br><span class="line"><span class="comment">// 5. 不返回值默认返回 undefined，Promise 变为 fulfilled 状态</span></span><br></pre></td></tr></table></figure><h4 id="4-Promise-all-的错误处理"><a href="#4-Promise-all-的错误处理" class="headerlink" title="4. Promise.all 的错误处理"></a>4. Promise.all 的错误处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误用法：未考虑部分 Promise 失败的情况</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2, promise3])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果任何一个 Promise 失败，这里都不会执行</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确做法：为每个 Promise 添加错误处理</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">    promise1.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> (&#123; <span class="attr">error</span>: err &#125;)),</span><br><span class="line">    promise2.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> (&#123; <span class="attr">error</span>: err &#125;)),</span><br><span class="line">    promise3.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> (&#123; <span class="attr">error</span>: err &#125;))</span><br><span class="line">])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 即使部分 Promise 失败，这里也会执行</span></span><br><span class="line">    results.<span class="title function_">forEach</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">error</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理错误情况</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="5-async-await-常见错误"><a href="#5-async-await-常见错误" class="headerlink" title="5. async&#x2F;await 常见错误"></a>5. async&#x2F;await 常见错误</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误：在普通函数中使用 await</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>(); <span class="comment">// 语法错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ 错误：忘记错误处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>(); <span class="comment">// 如果出错，将导致未捕获的异常</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确做法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-特别提示"><a href="#6-特别提示" class="headerlink" title="6. 特别提示"></a>6. 特别提示</h4><ol><li><p><strong>Promise 状态变化</strong></p><ul><li>Promise 状态一旦改变就不可逆</li><li>只有 pending 状态可以变为 fulfilled 或 rejected</li><li>状态变化后的值不可变</li></ul></li><li><p><strong>链式调用注意事项</strong></p><ul><li>每个 then&#x2F;catch 都返回新的 Promise</li><li>返回值会被自动包装成 Promise</li><li>没有显式返回值时，默认返回 undefined</li></ul></li><li><p><strong>错误处理最佳实践</strong></p><ul><li>总是在 Promise 链的末尾添加 catch</li><li>在适当的位置使用 finally 进行清理</li><li>避免在 Promise 链中静默失败</li></ul></li><li><p><strong>async&#x2F;await 使用建议</strong></p><ul><li>总是使用 try&#x2F;catch 包裹 await</li><li>注意 await 的位置，避免不必要的等待</li><li>并行操作使用 Promise.all</li></ul></li><li><p><strong>性能考虑</strong></p><ul><li>避免创建不必要的 Promise</li><li>注意内存泄漏（未处理的 Promise）</li><li>合理使用 Promise.all 进行并行处理</li></ul></li></ol><h3 id="10-6-高级注意事项和陷阱"><a href="#10-6-高级注意事项和陷阱" class="headerlink" title="10.6 高级注意事项和陷阱"></a>10.6 高级注意事项和陷阱</h3><h4 id="1-Promise-resolve-reject-的特殊行为"><a href="#1-Promise-resolve-reject-的特殊行为" class="headerlink" title="1. Promise.resolve&#x2F;reject 的特殊行为"></a>1. Promise.resolve&#x2F;reject 的特殊行为</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误理解：认为 Promise.resolve 总是同步执行</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>))  <span class="comment">// Promise 嵌套的情况</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ⚠️ 特别注意：传入 thenable 对象</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;</span><br><span class="line">    <span class="attr">then</span>: <span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));  <span class="comment">// 42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：Promise.resolve 会展平 Promise</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(p1); <span class="comment">// p2 和 p1 是同一个 Promise</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 === p2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="2-Promise-的并发控制"><a href="#2-Promise-的并发控制" class="headerlink" title="2. Promise 的并发控制"></a>2. Promise 的并发控制</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误做法：无控制地并发请求</span></span><br><span class="line">urls.<span class="title function_">map</span>(<span class="function"><span class="params">url</span> =&gt;</span> <span class="title function_">fetch</span>(url));  <span class="comment">// 可能导致服务器压力过大</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确做法：控制并发数量</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchWithConcurrency</span>(<span class="params">urls, concurrency = <span class="number">3</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> results = [];</span><br><span class="line">    <span class="keyword">const</span> executing = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">        <span class="keyword">const</span> promise = <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>());</span><br><span class="line">        results.<span class="title function_">push</span>(promise);</span><br><span class="line">        </span><br><span class="line">        executing.<span class="title function_">add</span>(promise);</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">clean</span> = (<span class="params"></span>) =&gt; executing.<span class="title function_">delete</span>(promise);</span><br><span class="line">        promise.<span class="title function_">then</span>(clean, clean);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (executing.<span class="property">size</span> &gt;= concurrency) &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>(executing);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(results);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> urls = [<span class="string">&#x27;url1&#x27;</span>, <span class="string">&#x27;url2&#x27;</span>, <span class="string">&#x27;url3&#x27;</span>, <span class="string">&#x27;url4&#x27;</span>, <span class="string">&#x27;url5&#x27;</span>];</span><br><span class="line"><span class="title function_">fetchWithConcurrency</span>(urls, <span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有请求完成&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="3-循环中的-Promise-处理"><a href="#3-循环中的-Promise-处理" class="headerlink" title="3. 循环中的 Promise 处理"></a>3. 循环中的 Promise 处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误做法：在循环中使用 await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">wrong</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> urls = [<span class="string">&#x27;url1&#x27;</span>, <span class="string">&#x27;url2&#x27;</span>, <span class="string">&#x27;url3&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">fetch</span>(url);  <span class="comment">// 串行执行，效率低</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确做法：并行执行</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">right</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> urls = [<span class="string">&#x27;url1&#x27;</span>, <span class="string">&#x27;url2&#x27;</span>, <span class="string">&#x27;url3&#x27;</span>];</span><br><span class="line">    <span class="keyword">const</span> promises = urls.<span class="title function_">map</span>(<span class="function"><span class="params">url</span> =&gt;</span> <span class="title function_">fetch</span>(url));</span><br><span class="line">    <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 需要按顺序执行时的正确做法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sequential</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> urls = [<span class="string">&#x27;url1&#x27;</span>, <span class="string">&#x27;url2&#x27;</span>, <span class="string">&#x27;url3&#x27;</span>];</span><br><span class="line">    <span class="keyword">const</span> results = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        results.<span class="title function_">push</span>(<span class="keyword">await</span> result.<span class="title function_">json</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Promise-竞态问题处理"><a href="#4-Promise-竞态问题处理" class="headerlink" title="4. Promise 竞态问题处理"></a>4. Promise 竞态问题处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 潜在问题：多个请求的响应顺序不确定</span></span><br><span class="line"><span class="keyword">let</span> currentData;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">    currentData = <span class="keyword">await</span> response.<span class="title function_">json</span>();  <span class="comment">// 可能被后发先至的请求覆盖</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确做法：使用标记或取消机制</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createFetchWithAbort</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentController = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentController) &#123;</span><br><span class="line">            currentController.<span class="title function_">abort</span>();  <span class="comment">// 取消之前的请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        currentController = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;</span><br><span class="line">                <span class="attr">signal</span>: currentController.<span class="property">signal</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error.<span class="property">name</span> === <span class="string">&#x27;AbortError&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 请求被取消，忽略错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> fetchWithAbort = <span class="title function_">createFetchWithAbort</span>();</span><br><span class="line"><span class="title function_">fetchWithAbort</span>(<span class="string">&#x27;id1&#x27;</span>);</span><br><span class="line"><span class="title function_">fetchWithAbort</span>(<span class="string">&#x27;id2&#x27;</span>); <span class="comment">// id1 的请求会被取消</span></span><br></pre></td></tr></table></figure><h4 id="5-async-await-与-Promise-混用的陷阱"><a href="#5-async-await-与-Promise-混用的陷阱" class="headerlink" title="5. async&#x2F;await 与 Promise 混用的陷阱"></a>5. async&#x2F;await 与 Promise 混用的陷阱</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误做法：混合使用可能导致错误处理混乱</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mixed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">somePromise</span>()</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">process</span>(data))  <span class="comment">// 这里的错误不会被 catch 捕获</span></span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">handle</span>(err));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 这里捕获不到 .then 中的错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确做法：统一使用 async/await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">consistent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">somePromise</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">process</span>(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handle</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 如果必须混用，确保错误处理的完整性</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mixedButSafe</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">somePromise</span>()</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">async</span> data =&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">process</span>(data);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> error; <span class="comment">// 确保错误能被外层 catch 捕获</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handle</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-Promise-内存泄漏的其他情况"><a href="#6-Promise-内存泄漏的其他情况" class="headerlink" title="6. Promise 内存泄漏的其他情况"></a>6. Promise 内存泄漏的其他情况</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 潜在问题：事件监听器中的 Promise</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataLoader</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listener</span> = <span class="variable language_">this</span>.<span class="property">handleData</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        eventEmitter.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="variable language_">this</span>.<span class="property">listener</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">processData</span>(data);  <span class="comment">// 如果组件被销毁，这个 Promise 可能永远挂着</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确做法：确保清理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataLoader</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">abortController</span> = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listener</span> = <span class="variable language_">this</span>.<span class="property">handleData</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        eventEmitter.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="variable language_">this</span>.<span class="property">listener</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">abortController</span>.<span class="property">signal</span>.<span class="property">aborted</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">processData</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">destroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">abortController</span>.<span class="title function_">abort</span>();</span><br><span class="line">        eventEmitter.<span class="title function_">off</span>(<span class="string">&#x27;data&#x27;</span>, <span class="variable language_">this</span>.<span class="property">listener</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 React 组件中的使用示例</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> loader = <span class="keyword">new</span> <span class="title class_">DataLoader</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> loader.<span class="title function_">destroy</span>(); <span class="comment">// 清理函数</span></span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><h4 id="7-特殊场景的注意事项"><a href="#7-特殊场景的注意事项" class="headerlink" title="7. 特殊场景的注意事项"></a>7. 特殊场景的注意事项</h4><ol><li><strong>Promise 链中的值传递</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误做法：没有正确传递值</span></span><br><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">process</span>(value);</span><br><span class="line">        <span class="comment">// 没有返回值，下一个 then 将收到 undefined</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// value 是 undefined</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确做法：确保正确传递值</span></span><br><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">process</span>(value);</span><br><span class="line">        <span class="keyword">return</span> value; <span class="comment">// 显式返回需要传递的值</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// value 是上一步返回的值</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Promise 的错误恢复链</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ 高级错误恢复模式</span></span><br><span class="line"><span class="title function_">fetchData</span>()</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">type</span> === <span class="string">&#x27;network&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">fetchFromCache</span>(); <span class="comment">// 尝试从缓存获取</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> error; <span class="comment">// 其他错误继续传播</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">type</span> === <span class="string">&#x27;cache&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">fetchFromBackup</span>(); <span class="comment">// 尝试从备份获取</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultValue; <span class="comment">// 最后的降级处理</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>条件 Promise 执行</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ 根据条件决定是否执行 Promise</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">conditionalFetch</span>(<span class="params">condition</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!condition) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/data&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Fetch failed:&#x27;</span>, error);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN Promise 文档</a></li><li><a href="https://promisesaplus.com/">JavaScript Promise 规范</a></li><li><a href="https://tc39.es/ecma262/#sec-promise-objects">ECMAScript Promise 规范</a></li></ul><h2 id="11-更多实际应用场景"><a href="#11-更多实际应用场景" class="headerlink" title="11. 更多实际应用场景"></a>11. 更多实际应用场景</h2><h3 id="11-1-文件上传与进度监控"><a href="#11-1-文件上传与进度监控" class="headerlink" title="11.1 文件上传与进度监控"></a>11.1 文件上传与进度监控</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uploadFileWithProgress</span>(<span class="params">file, onProgress</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span><br><span class="line"></span><br><span class="line">        xhr.<span class="property">upload</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> progress = (event.<span class="property">loaded</span> / event.<span class="property">total</span>) * <span class="number">100</span>;</span><br><span class="line">                <span class="title function_">onProgress</span>(progress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(xhr.<span class="property">response</span>));</span><br><span class="line">        xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Upload failed&#x27;</span>)));</span><br><span class="line">        xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;abort&#x27;</span>, <span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Upload aborted&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/api/upload&#x27;</span>);</span><br><span class="line">        xhr.<span class="title function_">send</span>(formData);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>);</span><br><span class="line">fileInput.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="title function_">async</span> (e) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> file = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">uploadFileWithProgress</span>(file, <span class="function">(<span class="params">progress</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Upload progress: <span class="subst">$&#123;progress&#125;</span>%`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Upload complete&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Upload error:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="11-2-带重试机制的API请求"><a href="#11-2-带重试机制的API请求" class="headerlink" title="11.2 带重试机制的API请求"></a>11.2 带重试机制的API请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchWithRetry</span>(<span class="params">url, options = &#123;&#125;, maxRetries = <span class="number">3</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">delay</span> = (<span class="params">ms</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxRetries; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, options);</span><br><span class="line">            <span class="keyword">if</span> (!response.<span class="property">ok</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! status: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i === maxRetries - <span class="number">1</span>) <span class="keyword">throw</span> error;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, i) * <span class="number">1000</span>); <span class="comment">// 指数退避</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Retrying... (<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>/<span class="subst">$&#123;maxRetries&#125;</span>)`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="title function_">fetchWithRetry</span>(<span class="string">&#x27;/api/data&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Success:&#x27;</span>, data))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Final error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure><h3 id="11-3-资源预加载"><a href="#11-3-资源预加载" class="headerlink" title="11.3 资源预加载"></a>11.3 资源预加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResourcePreloader</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">preload</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(url)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(url));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> promise = <span class="title function_">fetch</span>(url)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(url, data);</span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(url, promise);</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(url) || <span class="variable language_">this</span>.<span class="title function_">preload</span>(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> preloader = <span class="keyword">new</span> <span class="title class_">ResourcePreloader</span>();</span><br><span class="line"><span class="comment">// 预加载资源</span></span><br><span class="line">preloader.<span class="title function_">preload</span>(<span class="string">&#x27;/api/user/1&#x27;</span>);</span><br><span class="line">preloader.<span class="title function_">preload</span>(<span class="string">&#x27;/api/user/2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 稍后使用</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">displayUser</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userData = <span class="keyword">await</span> preloader.<span class="title function_">get</span>(<span class="string">`/api/user/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// 使用预加载的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-4-并发请求限制器"><a href="#11-4-并发请求限制器" class="headerlink" title="11.4 并发请求限制器"></a>11.4 并发请求限制器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RequestLimiter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">maxConcurrent = <span class="number">5</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxConcurrent</span> = maxConcurrent;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentRequests</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">add</span>(<span class="params">promiseFactory</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentRequests</span> &gt;= <span class="variable language_">this</span>.<span class="property">maxConcurrent</span>) &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(resolve));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentRequests</span>++;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">promiseFactory</span>();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currentRequests</span>--;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> next = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>();</span><br><span class="line">                <span class="title function_">next</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> limiter = <span class="keyword">new</span> <span class="title class_">RequestLimiter</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> urls = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">10</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> <span class="string">`/api/item/<span class="subst">$&#123;i&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">    urls.<span class="title function_">map</span>(<span class="function"><span class="params">url</span> =&gt;</span> </span><br><span class="line">        limiter.<span class="title function_">add</span>(<span class="function">() =&gt;</span> <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>()))</span><br><span class="line">    )</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;All requests completed&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="12-详细错误处理指南"><a href="#12-详细错误处理指南" class="headerlink" title="12. 详细错误处理指南"></a>12. 详细错误处理指南</h2><h3 id="12-1-错误类型分类"><a href="#12-1-错误类型分类" class="headerlink" title="12.1 错误类型分类"></a>12.1 错误类型分类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(message);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;NetworkError&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValidationError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(message);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;ValidationError&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeoutError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(message);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;TimeoutError&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchWithErrorHandling</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (response.<span class="property">status</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationError</span>(<span class="string">&#x27;Resource not found&#x27;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationError</span>(<span class="string">&#x27;Unauthorized&#x27;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NetworkError</span>(<span class="string">&#x27;Service unavailable&#x27;</span>);</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! status: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">ValidationError</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理验证错误</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Validation error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">NetworkError</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理网络错误</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Network error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">            <span class="keyword">throw</span> error; <span class="comment">// 重新抛出网络错误</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 处理其他错误</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Unexpected error:&#x27;</span>, error);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-2-全局错误处理"><a href="#12-2-全局错误处理" class="headerlink" title="12.2 全局错误处理"></a>12.2 全局错误处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorHandler</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">handle</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">ValidationError</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理验证错误</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleValidationError</span>(error);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">NetworkError</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理网络错误</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleNetworkError</span>(error);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">TimeoutError</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理超时错误</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleTimeoutError</span>(error);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 处理未知错误</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleUnknownError</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">handleValidationError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Validation Error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">        <span class="comment">// 显示用户友好的错误消息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">handleNetworkError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Network Error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">        <span class="comment">// 尝试重新连接</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">handleTimeoutError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Timeout Error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">        <span class="comment">// 提示用户重试</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">handleUnknownError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Unknown Error:&#x27;</span>, error);</span><br><span class="line">        <span class="comment">// 记录错误并通知开发团队</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;unhandledrejection&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ErrorHandler</span>.<span class="title function_">handle</span>(event.<span class="property">reason</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="13-性能优化最佳实践"><a href="#13-性能优化最佳实践" class="headerlink" title="13. 性能优化最佳实践"></a>13. 性能优化最佳实践</h2><h3 id="13-1-Promise-批处理"><a href="#13-1-Promise-批处理" class="headerlink" title="13.1 Promise 批处理"></a>13.1 Promise 批处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PromiseBatcher</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">batchSize = <span class="number">100</span>, interval = <span class="number">50</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">batchSize</span> = batchSize;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">interval</span> = interval;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pending</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(&#123; item, resolve, reject &#125;);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">process</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">process</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pending</span> || <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pending</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="variable language_">this</span>.<span class="property">interval</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> batch = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">batchSize</span>);</span><br><span class="line">        <span class="keyword">const</span> items = batch.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; item &#125;</span>) =&gt;</span> item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">processBatch</span>(items);</span><br><span class="line">            batch.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; resolve &#125;, index</span>) =&gt;</span> <span class="title function_">resolve</span>(results[index]));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            batch.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; reject &#125;</span>) =&gt;</span> <span class="title function_">reject</span>(error));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pending</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">process</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">processBatch</span>(<span class="params">items</span>) &#123;</span><br><span class="line">        <span class="comment">// 实现批处理逻辑</span></span><br><span class="line">        <span class="keyword">return</span> items.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`Processed <span class="subst">$&#123;item&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> batcher = <span class="keyword">new</span> <span class="title class_">PromiseBatcher</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    batcher.<span class="title function_">add</span>(i).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-2-Promise-缓存优化"><a href="#13-2-Promise-缓存优化" class="headerlink" title="13.2 Promise 缓存优化"></a>13.2 Promise 缓存优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PromiseCache</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">ttl = <span class="number">60000</span></span>) &#123; <span class="comment">// 默认缓存时间 1 分钟</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ttl</span> = ttl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">get</span>(<span class="params">key, promiseFactory</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> cached = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (cached &amp;&amp; <span class="title class_">Date</span>.<span class="title function_">now</span>() - cached.<span class="property">timestamp</span> &lt; <span class="variable language_">this</span>.<span class="property">ttl</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cached.<span class="property">data</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">promiseFactory</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, &#123;</span><br><span class="line">            data,</span><br><span class="line">            <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">invalidate</span>(<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">PromiseCache</span>();</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserWithCache</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache.<span class="title function_">get</span>(</span><br><span class="line">        <span class="string">`user_<span class="subst">$&#123;userId&#125;</span>`</span>,</span><br><span class="line">        <span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">json</span>())</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-3-内存优化"><a href="#13-3-内存优化" class="headerlink" title="13.3 内存优化"></a>13.3 内存优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MemoryEfficientPromise</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">batch</span>(<span class="params">items, processor, batchSize = <span class="number">100</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> results = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i += batchSize) &#123;</span><br><span class="line">            <span class="keyword">const</span> batch = items.<span class="title function_">slice</span>(i, i + batchSize);</span><br><span class="line">            <span class="keyword">const</span> batchResults = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">                batch.<span class="title function_">map</span>(processor)</span><br><span class="line">            );</span><br><span class="line">            results.<span class="title function_">push</span>(...batchResults);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 允许垃圾回收</span></span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">stream</span>(<span class="params">asyncIterable, processor</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> results = [];</span><br><span class="line">        <span class="keyword">for</span> <span class="title function_">await</span> (<span class="keyword">const</span> item <span class="keyword">of</span> asyncIterable) &#123;</span><br><span class="line">            results.<span class="title function_">push</span>(<span class="keyword">await</span> <span class="title function_">processor</span>(item));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 定期清理</span></span><br><span class="line">            <span class="keyword">if</span> (results.<span class="property">length</span> % <span class="number">1000</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">10000</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> i);</span><br><span class="line"><span class="title class_">MemoryEfficientPromise</span>.<span class="title function_">batch</span>(items, <span class="title function_">async</span> (item) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理每个项目</span></span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Processed items:&#x27;</span>, results.<span class="property">length</span>));</span><br></pre></td></tr></table></figure><h2 id="14-补充最佳实践建议"><a href="#14-补充最佳实践建议" class="headerlink" title="14. 补充最佳实践建议"></a>14. 补充最佳实践建议</h2><h3 id="14-1-Promise-链优化"><a href="#14-1-Promise-链优化" class="headerlink" title="14.1 Promise 链优化"></a>14.1 Promise 链优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ 优化 Promise 链</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">optimizedChain</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 并行执行无依赖的 Promise</span></span><br><span class="line">        <span class="keyword">const</span> [data1, data2] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">            <span class="title function_">fetchData1</span>(),</span><br><span class="line">            <span class="title function_">fetchData2</span>()</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 串行执行有依赖的 Promise</span></span><br><span class="line">        <span class="keyword">const</span> result1 = <span class="keyword">await</span> <span class="title function_">processData</span>(data1);</span><br><span class="line">        <span class="keyword">const</span> result2 = <span class="keyword">await</span> <span class="title function_">processData</span>(data2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 条件执行</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">needsExtra</span>(result1)) &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">extraProcessing</span>(result1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [result1, result2];</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 统一错误处理</span></span><br><span class="line">        <span class="title class_">ErrorHandler</span>.<span class="title function_">handle</span>(error);</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-2-资源管理"><a href="#14-2-资源管理" class="headerlink" title="14.2 资源管理"></a>14.2 资源管理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResourceManager</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">resources</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">locks</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">acquire</span>(<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">locks</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">locks</span>.<span class="title function_">get</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> lock = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">locks</span>.<span class="title function_">set</span>(key, resolve);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">resources</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">                <span class="keyword">const</span> resource = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">createResource</span>(key);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">resources</span>.<span class="title function_">set</span>(key, resource);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">resources</span>.<span class="title function_">get</span>(key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">locks</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">            lock.<span class="title function_">resolve</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">release</span>(<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">resources</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">const</span> resource = <span class="variable language_">this</span>.<span class="property">resources</span>.<span class="title function_">get</span>(key);</span><br><span class="line">            <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">cleanupResource</span>(resource);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">resources</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">createResource</span>(<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="comment">// 实现资源创建逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">cleanupResource</span>(<span class="params">resource</span>) &#123;</span><br><span class="line">        <span class="comment">// 实现资源清理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-3-监控和日志"><a href="#14-3-监控和日志" class="headerlink" title="14.3 监控和日志"></a>14.3 监控和日志</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PromiseMonitor</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">metrics</span> = &#123;</span><br><span class="line">            <span class="attr">total</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">failure</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">timing</span>: []</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">track</span>(<span class="params">promise, metadata = &#123;&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">total</span>++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> promise;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">success</span>++;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">recordTiming</span>(startTime, metadata);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">failure</span>++;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">recordError</span>(error, metadata);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">recordTiming</span>(<span class="params">startTime, metadata</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> duration = <span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">timing</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">            duration,</span><br><span class="line">            ...metadata,</span><br><span class="line">            <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">recordError</span>(<span class="params">error, metadata</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Promise Error:&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">error</span>: error.<span class="property">message</span>,</span><br><span class="line">            <span class="attr">stack</span>: error.<span class="property">stack</span>,</span><br><span class="line">            ...metadata,</span><br><span class="line">            <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getMetrics</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ...<span class="variable language_">this</span>.<span class="property">metrics</span>,</span><br><span class="line">            <span class="attr">successRate</span>: <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">success</span> / <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">total</span>,</span><br><span class="line">            <span class="attr">averageDuration</span>: <span class="variable language_">this</span>.<span class="title function_">calculateAverageDuration</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">calculateAverageDuration</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">timing</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> sum = <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">timing</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, &#123; duration &#125;</span>) =&gt;</span> acc + duration, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> sum / <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">timing</span>.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> monitor = <span class="keyword">new</span> <span class="title class_">PromiseMonitor</span>();</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">monitoredOperation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> monitor.<span class="title function_">track</span>(</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">&#x27;/api/data&#x27;</span>),</span><br><span class="line">        &#123; <span class="attr">operation</span>: <span class="string">&#x27;fetchData&#x27;</span>, <span class="attr">priority</span>: <span class="string">&#x27;high&#x27;</span> &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-4-测试最佳实践"><a href="#14-4-测试最佳实践" class="headerlink" title="14.4 测试最佳实践"></a>14.4 测试最佳实践</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise 测试辅助函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PromiseTestUtils</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">expectResolve</span>(<span class="params">promise</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> error;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> promise;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            error = e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">expect</span>(error).<span class="title function_">toBeUndefined</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">expectReject</span>(<span class="params">promise</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> error;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> promise;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            error = e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">expect</span>(error).<span class="title function_">toBeDefined</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">createDeferred</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> resolve, reject;</span><br><span class="line">        <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve = res;</span><br><span class="line">            reject = rej;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> &#123; promise, resolve, reject &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试示例</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Promise Tests&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;should handle successful operations&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; promise, resolve &#125; = <span class="title class_">PromiseTestUtils</span>.<span class="title function_">createDeferred</span>();</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>), <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">PromiseTestUtils</span>.<span class="title function_">expectResolve</span>(promise);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;should handle failures&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; promise, reject &#125; = <span class="title class_">PromiseTestUtils</span>.<span class="title function_">createDeferred</span>();</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fail&#x27;</span>)), <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">PromiseTestUtils</span>.<span class="title function_">expectReject</span>(promise);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解-JavaScript-Promise：从入门到精通&quot;&gt;&lt;a href=&quot;#深入理解-JavaScript-Promise：从入门到精通&quot; class=&quot;headerlink&quot; title=&quot;深入理解 JavaScript Promise：从入门到精通&quot;&gt;</summary>
      
    
    
    
    <category term="教程" scheme="https://aoayaoa.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Promise" scheme="https://aoayaoa.github.io/tags/Promise/"/>
    
    <category term="入门" scheme="https://aoayaoa.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Taro使用记录</title>
    <link href="https://aoayaoa.github.io/2024/09/08/taro/"/>
    <id>https://aoayaoa.github.io/2024/09/08/taro/</id>
    <published>2024-09-07T16:00:00.000Z</published>
    <updated>2025-04-16T04:30:22.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Deno学习记录-📘"><a href="#Deno学习记录-📘" class="headerlink" title="Deno学习记录 📘"></a>Deno学习记录 📘</h1><h1 id="📱-Taro-学习总结"><a href="#📱-Taro-学习总结" class="headerlink" title="📱 Taro 学习总结"></a>📱 Taro 学习总结</h1><p>Taro 是一个开放式跨端跨框架解决方案，助力开发者快速构建小程序、H5和原生应用</p><h2 id="📑-目录"><a href="#📑-目录" class="headerlink" title="📑 目录"></a>📑 目录</h2><ul><li><a href="#-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">基础概念</a></li><li><a href="#-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84">项目结构</a></li><li><a href="#-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8">基础使用</a></li><li><a href="#-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">小程序开发注意事项</a></li><li><a href="#-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">常见问题与解决方案</a></li><li><a href="#-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E4%B8%8E%E5%8F%91%E5%B8%83">小程序打包与发布</a></li><li><a href="#-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">性能优化最佳实践</a></li><li><a href="#-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%89%B9%E6%9C%89%E5%8A%9F%E8%83%BD">小程序特有功能</a></li><li><a href="#-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">最佳实践</a></li></ul><hr><h2 id="🔰-基础概念"><a href="#🔰-基础概念" class="headerlink" title="🔰 基础概念"></a>🔰 基础概念</h2><p>Taro 是一个开放式跨端跨框架解决方案，支持使用 React&#x2F;Vue&#x2F;Nerv 等框架来开发小程序、H5、RN 等应用。</p><hr><h2 id="📂-项目结构"><a href="#📂-项目结构" class="headerlink" title="📂 项目结构"></a>📂 项目结构</h2><p>一个典型的 Taro 项目结构：</p><table><thead><tr><th align="left">目录&#x2F;文件</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">📁 <code>config/</code></td><td align="left">项目编译配置目录</td></tr><tr><td align="left">📁 <code>src/</code></td><td align="left">源码目录</td></tr><tr><td align="left">├─ 📄 <code>app.config.ts</code></td><td align="left">全局配置文件</td></tr><tr><td align="left">├─ 📄 <code>app.ts</code></td><td align="left">入口文件</td></tr><tr><td align="left">├─ 📄 <code>app.scss</code></td><td align="left">全局样式文件</td></tr><tr><td align="left">├─ 📁 <code>pages/</code></td><td align="left">页面文件目录</td></tr><tr><td align="left">├─ 📁 <code>components/</code></td><td align="left">组件目录</td></tr><tr><td align="left">├─ 📁 <code>assets/</code></td><td align="left">静态资源目录</td></tr><tr><td align="left">├─ 📁 <code>utils/</code></td><td align="left">工具函数目录</td></tr><tr><td align="left">├─ 📁 <code>stores/</code></td><td align="left">状态管理目录</td></tr><tr><td align="left">└─ 📁 <code>services/</code></td><td align="left">服务接口目录</td></tr></tbody></table><hr><h2 id="🚀-基础使用"><a href="#🚀-基础使用" class="headerlink" title="🚀 基础使用"></a>🚀 基础使用</h2><h3 id="1️⃣-项目创建和启动"><a href="#1️⃣-项目创建和启动" class="headerlink" title="1️⃣ 项目创建和启动"></a>1️⃣ 项目创建和启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Taro CLI</span></span><br><span class="line">npm install -g @tarojs/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">taro init myApp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开发微信小程序</span></span><br><span class="line">npm run dev:weapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包微信小程序</span></span><br><span class="line">npm run build:weapp</span><br></pre></td></tr></table></figure><h3 id="2️⃣-配置文件"><a href="#2️⃣-配置文件" class="headerlink" title="2️⃣ 配置文件"></a>2️⃣ 配置文件</h3><p><code>app.config.ts</code> 用于项目全局配置：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 页面路径列表</span></span><br><span class="line">  <span class="attr">pages</span>: [</span><br><span class="line">    <span class="string">&#x27;pages/home/index&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pages/mine/index&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 全局窗口配置</span></span><br><span class="line">  <span class="attr">window</span>: &#123;</span><br><span class="line">    <span class="attr">backgroundTextStyle</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">    <span class="attr">navigationBarBackgroundColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    <span class="attr">navigationBarTitleText</span>: <span class="string">&#x27;WeChat&#x27;</span>,</span><br><span class="line">    <span class="attr">navigationBarTextStyle</span>: <span class="string">&#x27;black&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 底部 TabBar 配置</span></span><br><span class="line">  <span class="attr">tabBar</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#999&#x27;</span>,</span><br><span class="line">    <span class="attr">selectedColor</span>: <span class="string">&#x27;#dc2743&#x27;</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    <span class="attr">list</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">pagePath</span>: <span class="string">&#x27;pages/home/index&#x27;</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">        <span class="attr">iconPath</span>: <span class="string">&#x27;./assets/images/home.png&#x27;</span>,</span><br><span class="line">        <span class="attr">selectedIconPath</span>: <span class="string">&#x27;./assets/images/home-active.png&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">pagePath</span>: <span class="string">&#x27;pages/mine/index&#x27;</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;我的&#x27;</span>,</span><br><span class="line">        <span class="attr">iconPath</span>: <span class="string">&#x27;./assets/images/mine.png&#x27;</span>,</span><br><span class="line">        <span class="attr">selectedIconPath</span>: <span class="string">&#x27;./assets/images/mine-active.png&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3️⃣-应用入口"><a href="#3️⃣-应用入口" class="headerlink" title="3️⃣ 应用入口"></a>3️⃣ 应用入口</h3><p><code>app.ts</code> 是应用入口文件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./app.scss&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建应用实例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">onLaunch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 应用启动时触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App launched&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onShow</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 应用显示时触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App shown&#x27;</span>, options)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用状态管理</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="title class_">App</span>.<span class="title function_">use</span>(pinia)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><h3 id="4️⃣-页面开发"><a href="#4️⃣-页面开发" class="headerlink" title="4️⃣ 页面开发"></a>4️⃣ 页面开发</h3><p>每个页面通常包含三个文件：</p><ul><li><code>index.vue</code> - 页面组件</li><li><code>index.scss</code> - 页面样式</li><li><code>index.config.ts</code> - 页面配置</li></ul><p><strong>页面组件示例（Vue3）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view class=&quot;page&quot;&gt;</span><br><span class="line">    &lt;text&gt;&#123;&#123; message &#125;&#125;&lt;/text&gt;</span><br><span class="line">    &lt;button @tap=&quot;handleClick&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import Taro from &#x27;@tarojs/taro&#x27;</span><br><span class="line"></span><br><span class="line">const message = ref(&#x27;Hello World&#x27;)</span><br><span class="line"></span><br><span class="line">const handleClick = () =&gt; &#123;</span><br><span class="line">  Taro.showToast(&#123;</span><br><span class="line">    title: &#x27;点击成功&#x27;,</span><br><span class="line">    icon: &#x27;success&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.page &#123;</span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>页面配置示例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">navigationBarTitleText</span>: <span class="string">&#x27;页面标题&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="⚠️-小程序开发注意事项"><a href="#⚠️-小程序开发注意事项" class="headerlink" title="⚠️ 小程序开发注意事项"></a>⚠️ 小程序开发注意事项</h2><h3 id="📌-生命周期"><a href="#📌-生命周期" class="headerlink" title="📌 生命周期"></a>📌 生命周期</h3><h4 id="Taro-框架生命周期："><a href="#Taro-框架生命周期：" class="headerlink" title="Taro 框架生命周期："></a>Taro 框架生命周期：</h4><table><thead><tr><th align="left">生命周期</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">🔄 <code>onLaunch</code></td><td align="left">应用初始化</td></tr><tr><td align="left">👁️ <code>onShow</code></td><td align="left">应用显示</td></tr><tr><td align="left">🙈 <code>onHide</code></td><td align="left">应用隐藏</td></tr><tr><td align="left">❌ <code>onError</code></td><td align="left">应用发生错误</td></tr></tbody></table><h4 id="页面生命周期："><a href="#页面生命周期：" class="headerlink" title="页面生命周期："></a>页面生命周期：</h4><table><thead><tr><th align="left">生命周期</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">📥 <code>onLoad</code></td><td align="left">页面加载</td></tr><tr><td align="left">✅ <code>onReady</code></td><td align="left">页面初次渲染完成</td></tr><tr><td align="left">👁️ <code>onShow</code></td><td align="left">页面显示</td></tr><tr><td align="left">🙈 <code>onHide</code></td><td align="left">页面隐藏</td></tr><tr><td align="left">📤 <code>onUnload</code></td><td align="left">页面卸载</td></tr><tr><td align="left">⬇️ <code>onPullDownRefresh</code></td><td align="left">下拉刷新</td></tr><tr><td align="left">⬆️ <code>onReachBottom</code></td><td align="left">上拉触底</td></tr><tr><td align="left">📜 <code>onPageScroll</code></td><td align="left">页面滚动</td></tr><tr><td align="left">📤 <code>onShareAppMessage</code></td><td align="left">用户点击右上角分享</td></tr></tbody></table><h4 id="组合式-API-中使用生命周期："><a href="#组合式-API-中使用生命周期：" class="headerlink" title="组合式 API 中使用生命周期："></a>组合式 API 中使用生命周期：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDidShow, useDidHide &#125; <span class="keyword">from</span> <span class="string">&#x27;@tarojs/taro&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 生命周期</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件挂载&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件卸载&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Taro 页面生命周期</span></span><br><span class="line"><span class="title function_">useDidShow</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面显示&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">useDidHide</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面隐藏&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="📌-路由与导航"><a href="#📌-路由与导航" class="headerlink" title="📌 路由与导航"></a>📌 路由与导航</h3><p>Taro 导航 API：</p><table><thead><tr><th align="left">API</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">🔀 <code>Taro.navigateTo</code></td><td align="left">保留当前页面，跳转到应用内的某个页面</td></tr><tr><td align="left">🔄 <code>Taro.redirectTo</code></td><td align="left">关闭当前页面，跳转到应用内的某个页面</td></tr><tr><td align="left">📑 <code>Taro.switchTab</code></td><td align="left">跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</td></tr><tr><td align="left">◀️ <code>Taro.navigateBack</code></td><td align="left">关闭当前页面，返回上一页面或多级页面</td></tr><tr><td align="left">🔃 <code>Taro.reLaunch</code></td><td align="left">关闭所有页面，打开到应用内的某个页面</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例用法</span></span><br><span class="line"><span class="title class_">Taro</span>.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/pages/detail/index?id=123&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="📌-状态管理"><a href="#📌-状态管理" class="headerlink" title="📌 状态管理"></a>📌 状态管理</h3><p><strong>Pinia (Vue3)：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 store</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 store</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterStore = <span class="title function_">useCounterStore</span>()</span><br><span class="line">counterStore.<span class="title function_">increment</span>()</span><br></pre></td></tr></table></figure><h3 id="📌-数据存储"><a href="#📌-数据存储" class="headerlink" title="📌 数据存储"></a>📌 数据存储</h3><p>小程序数据存储 API：</p><table><thead><tr><th align="left">API</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">💾 <code>Taro.setStorage</code></td><td align="left">异步存储数据</td></tr><tr><td align="left">💾 <code>Taro.setStorageSync</code></td><td align="left">同步存储数据</td></tr><tr><td align="left">📂 <code>Taro.getStorage</code></td><td align="left">异步获取数据</td></tr><tr><td align="left">📂 <code>Taro.getStorageSync</code></td><td align="left">同步获取数据</td></tr><tr><td align="left">🗑️ <code>Taro.removeStorage</code></td><td align="left">异步移除数据</td></tr><tr><td align="left">🗑️ <code>Taro.removeStorageSync</code></td><td align="left">同步移除数据</td></tr><tr><td align="left">🧹 <code>Taro.clearStorage</code></td><td align="left">清除所有数据</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例用法</span></span><br><span class="line"><span class="title class_">Taro</span>.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> token = <span class="title class_">Taro</span>.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="📌-网络请求"><a href="#📌-网络请求" class="headerlink" title="📌 网络请求"></a>📌 网络请求</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本用法</span></span><br><span class="line"><span class="title class_">Taro</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/data&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;,</span><br><span class="line">  <span class="attr">header</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer token&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功：&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败：&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 用法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title class_">Taro</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/data&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功：&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败：&#x27;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="📌-UI-组件使用"><a href="#📌-UI-组件使用" class="headerlink" title="📌 UI 组件使用"></a>📌 UI 组件使用</h3><p>Taro 内置基础组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;!-- 文本 --&gt;</span><br><span class="line">    &lt;text&gt;文本内容&lt;/text&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 按钮 --&gt;</span><br><span class="line">    &lt;button type=&quot;primary&quot; @tap=&quot;handleClick&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 图片 --&gt;</span><br><span class="line">    &lt;image src=&quot;/assets/logo.png&quot; mode=&quot;aspectFit&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 滚动视图 --&gt;</span><br><span class="line">    &lt;scroll-view scroll-y style=&quot;height: 300px&quot;&gt;</span><br><span class="line">      &lt;view v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/view&gt;</span><br><span class="line">    &lt;/scroll-view&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 表单组件 --&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;inputValue&quot; placeholder=&quot;请输入&quot; /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="📌-小程序分享功能"><a href="#📌-小程序分享功能" class="headerlink" title="📌 小程序分享功能"></a>📌 小程序分享功能</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面内设置分享</span></span><br><span class="line"><span class="title class_">Taro</span>.<span class="title function_">useShareAppMessage</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;分享标题&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/pages/home/index?share=true&#x27;</span>,</span><br><span class="line">    <span class="attr">imageUrl</span>: <span class="string">&#x27;/assets/share.png&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分享到朋友圈</span></span><br><span class="line"><span class="title class_">Taro</span>.<span class="title function_">useShareTimeline</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;分享到朋友圈的标题&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>: <span class="string">&#x27;share=true&#x27;</span>,</span><br><span class="line">    <span class="attr">imageUrl</span>: <span class="string">&#x27;/assets/share.png&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="🚫-易错点与开发陷阱"><a href="#🚫-易错点与开发陷阱" class="headerlink" title="🚫 易错点与开发陷阱"></a>🚫 易错点与开发陷阱</h2><h3 id="⛔-生命周期使用错误"><a href="#⛔-生命周期使用错误" class="headerlink" title="⛔ 生命周期使用错误"></a>⛔ 生命周期使用错误</h3><blockquote><p>❌ <strong>不要在 <code>onLoad</code> 中使用 <code>useState</code> 等 hooks</strong><br>应在函数组件顶层使用</p></blockquote><blockquote><p>❌ <strong>不要在 <code>onLoad</code> 中直接修改 data</strong><br>可能导致视图不更新</p></blockquote><blockquote><p>❌ <strong>不要在小程序 App 的 <code>onLaunch</code> 里调用页面跳转相关的 API</strong></p></blockquote><h3 id="⛔-JSX-模板语法差异"><a href="#⛔-JSX-模板语法差异" class="headerlink" title="⛔ JSX&#x2F;模板语法差异"></a>⛔ JSX&#x2F;模板语法差异</h3><p>条件渲染：小程序不支持 <code>&amp;&amp;</code> 短路运算符条件渲染，应使用三元运算符</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ❌ 错误 */</span></span><br><span class="line">&#123; isShow &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">View</span>&gt;</span></span> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* ✅ 正确 */</span></span><br><span class="line">&#123; isShow ? <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">View</span>&gt;</span></span> : <span class="literal">null</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="⛔-事件处理"><a href="#⛔-事件处理" class="headerlink" title="⛔ 事件处理"></a>⛔ 事件处理</h3><blockquote><p>✅ <strong>事件名称使用小驼峰</strong>（onTap），而非原生小程序的连字符写法（bind:tap）<br>✅ <strong>阻止事件冒泡需使用 <code>stopPropagation</code></strong>，而非 <code>return false</code></p></blockquote><h3 id="⛔-样式问题"><a href="#⛔-样式问题" class="headerlink" title="⛔ 样式问题"></a>⛔ 样式问题</h3><blockquote><p>❌ <strong>选择器错误</strong>：小程序不支持所有 CSS 选择器（如一些伪类选择器）<br>⚠️ <strong>样式隔离</strong>：页面样式会影响到组件，需注意作用域<br>⚠️ <strong>rpx 计算</strong>：设计稿尺寸非 750px 时，需要做等比例换算</p></blockquote><h3 id="⛔-API-使用误区"><a href="#⛔-API-使用误区" class="headerlink" title="⛔ API 使用误区"></a>⛔ API 使用误区</h3><blockquote><p>⚠️ <code>Taro.navigateTo</code> 最多只能打开 10 层页面<br>⚠️ <code>Taro.setStorage</code> 存储的数据不能超过 10MB<br>⚠️ 微信小程序单个页面的逻辑层初始化耗时不能超过 20s</p></blockquote><hr><h2 id="🛠️-常见问题与解决方案"><a href="#🛠️-常见问题与解决方案" class="headerlink" title="🛠️ 常见问题与解决方案"></a>🛠️ 常见问题与解决方案</h2><h3 id="🎨-样式问题"><a href="#🎨-样式问题" class="headerlink" title="🎨 样式问题"></a>🎨 样式问题</h3><ul><li>Taro 中使用 <code>px</code> 单位会自动转换为小程序的 <code>rpx</code></li><li>如需使用原生单位，可使用 <code>Px</code> 或 <code>PX</code></li><li>推荐使用 SCSS&#x2F;SASS 预处理器</li></ul><h3 id="🔄-平台差异处理"><a href="#🔄-平台差异处理" class="headerlink" title="🔄 平台差异处理"></a>🔄 平台差异处理</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Taro</span> <span class="keyword">from</span> <span class="string">&#x27;@tarojs/taro&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前环境</span></span><br><span class="line"><span class="keyword">const</span> env = <span class="title class_">Taro</span>.<span class="title function_">getEnv</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断平台</span></span><br><span class="line"><span class="keyword">if</span> (env === <span class="title class_">Taro</span>.<span class="property">ENV_TYPE</span>.<span class="property">WEAPP</span>) &#123;</span><br><span class="line">  <span class="comment">// 微信小程序环境</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前是微信小程序环境&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (env === <span class="title class_">Taro</span>.<span class="property">ENV_TYPE</span>.<span class="property">ALIPAY</span>) &#123;</span><br><span class="line">  <span class="comment">// 支付宝小程序环境</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前是支付宝小程序环境&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (env === <span class="title class_">Taro</span>.<span class="property">ENV_TYPE</span>.<span class="property">H5</span>) &#123;</span><br><span class="line">  <span class="comment">// H5环境</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前是H5环境&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⚡-性能优化"><a href="#⚡-性能优化" class="headerlink" title="⚡ 性能优化"></a>⚡ 性能优化</h3><ul><li>避免频繁的数据更新导致不必要的渲染</li><li>列表组件使用唯一且稳定的 key</li><li>合理使用缓存机制</li><li>按需加载资源</li></ul><h3 id="⏳-异步-API-的处理"><a href="#⏳-异步-API-的处理" class="headerlink" title="⏳ 异步 API 的处理"></a>⏳ 异步 API 的处理</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise 化</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title class_">Taro</span>.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;确认删除？&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">    <span class="comment">// 用户点击确定</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">deleteItem</span>()</span><br><span class="line">    <span class="title class_">Taro</span>.<span class="title function_">showToast</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;删除成功&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;操作失败&#x27;</span>, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="📦-小程序打包与发布"><a href="#📦-小程序打包与发布" class="headerlink" title="📦 小程序打包与发布"></a>📦 小程序打包与发布</h2><h3 id="📱-分包配置"><a href="#📱-分包配置" class="headerlink" title="📱 分包配置"></a>📱 分包配置</h3><blockquote><p>小程序有体积限制，主包最大 2MB，单个分包最大 2MB，总体积不超过 20MB</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">pages</span>: [</span><br><span class="line">    <span class="string">&#x27;pages/index/index&#x27;</span>, <span class="comment">// 主包页面</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">subPackages</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">root</span>: <span class="string">&#x27;packageA&#x27;</span>, <span class="comment">// 分包根目录</span></span><br><span class="line">      <span class="attr">pages</span>: [</span><br><span class="line">        <span class="string">&#x27;pages/detail/index&#x27;</span>, <span class="comment">// 实际路径: packageA/pages/detail/index</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">root</span>: <span class="string">&#x27;packageB&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;pack2&#x27;</span>, <span class="comment">// 分包别名，可选</span></span><br><span class="line">      <span class="attr">pages</span>: [</span><br><span class="line">        <span class="string">&#x27;pages/list/index&#x27;</span>,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="📊-分包优化策略"><a href="#📊-分包优化策略" class="headerlink" title="📊 分包优化策略"></a>📊 分包优化策略</h3><table><thead><tr><th align="left">策略</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">📋 <strong>按功能拆分</strong></td><td align="left">将功能相近的页面放入同一分包</td></tr><tr><td align="left">🔄 <strong>按访问频率拆分</strong></td><td align="left">高频页面放主包，低频页面放分包</td></tr><tr><td align="left">🔗 <strong>公共资源处理</strong></td><td align="left">配置预加载规则提高体验</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">preloadRule</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;pages/index/index&#x27;</span>: &#123; <span class="comment">// 页面路径</span></span><br><span class="line">      <span class="attr">network</span>: <span class="string">&#x27;all&#x27;</span>, <span class="comment">// 在指定网络下预下载，all表示不限网络</span></span><br><span class="line">      <span class="attr">packages</span>: [<span class="string">&#x27;packageA&#x27;</span>] <span class="comment">// 进入页面后预下载分包</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🏞️-独立分包"><a href="#🏞️-独立分包" class="headerlink" title="🏞️ 独立分包"></a>🏞️ 独立分包</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">subPackages</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">root</span>: <span class="string">&#x27;independentPackage&#x27;</span>,</span><br><span class="line">      <span class="attr">pages</span>: [</span><br><span class="line">        <span class="string">&#x27;pages/independent/index&#x27;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">independent</span>: <span class="literal">true</span> <span class="comment">// 设置为独立分包</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>独立分包特点：</strong></p><ul><li>✅ 不依赖主包即可运行</li><li>✅ 适合广告页、活动页等临时页面</li><li>✅ 可减少启动时加载时间</li></ul><h3 id="🔄-分包预加载"><a href="#🔄-分包预加载" class="headerlink" title="🔄 分包预加载"></a>🔄 分包预加载</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">preloadRule</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;pages/index/index&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">network</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      <span class="attr">packages</span>: [<span class="string">&#x27;packageA&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;packageA/pages/detail/index&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">network</span>: <span class="string">&#x27;wifi&#x27;</span>, <span class="comment">// 仅在WiFi环境下预加载</span></span><br><span class="line">      <span class="attr">packages</span>: [<span class="string">&#x27;packageB&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="📉-包体积优化"><a href="#📉-包体积优化" class="headerlink" title="📉 包体积优化"></a>📉 包体积优化</h3><h4 id="🗜️-代码压缩"><a href="#🗜️-代码压缩" class="headerlink" title="🗜️ 代码压缩"></a>🗜️ 代码压缩</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/index.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="comment">// 压缩配置</span></span><br><span class="line">    <span class="attr">optimizeMainPackage</span>: &#123;</span><br><span class="line">      <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 混淆配置</span></span><br><span class="line">    <span class="title function_">webpackChain</span>(<span class="params">chain</span>) &#123;</span><br><span class="line">      chain.<span class="property">optimization</span>.<span class="title function_">minimizer</span>(<span class="string">&#x27;terser&#x27;</span>)</span><br><span class="line">        .<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">          args[<span class="number">0</span>].<span class="property">terserOptions</span> = &#123;</span><br><span class="line">            <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">keep_classnames</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">keep_fnames</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> args</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🖼️-资源优化"><a href="#🖼️-资源优化" class="headerlink" title="🖼️ 资源优化"></a>🖼️ 资源优化</h4><table><thead><tr><th align="left">优化方式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">🗜️ 压缩图片</td><td align="left">使用 WebP 等高压缩比格式</td></tr><tr><td align="left">☁️ CDN 加载</td><td align="left">大图片放 CDN，通过网络加载</td></tr><tr><td align="left">📝 使用图标字体</td><td align="left">替代图片图标，减少体积</td></tr><tr><td align="left">🔗 资源合并</td><td align="left">减少网络请求数量</td></tr></tbody></table><h4 id="📥-按需引入"><a href="#📥-按需引入" class="headerlink" title="📥 按需引入"></a>📥 按需引入</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误：全量引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Input</span>, <span class="title class_">Form</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@tarojs/components&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// ✅ 正确：按需引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;@tarojs/components/button&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&#x27;@tarojs/components/input&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="🚀-发布流程与审核"><a href="#🚀-发布流程与审核" class="headerlink" title="🚀 发布流程与审核"></a>🚀 发布流程与审核</h3><h4 id="📋-版本号管理"><a href="#📋-版本号管理" class="headerlink" title="📋 版本号管理"></a>📋 版本号管理</h4><p>遵循语义化版本规范（SemVer）</p><h4 id="📝-提审材料准备"><a href="#📝-提审材料准备" class="headerlink" title="📝 提审材料准备"></a>📝 提审材料准备</h4><ul><li>📋 完整的小程序功能介绍</li><li>🔑 测试账号（如需登录）</li><li>📜 相关资质材料</li><li>📑 隐私协议和用户协议</li></ul><h4 id="⚠️-常见审核问题"><a href="#⚠️-常见审核问题" class="headerlink" title="⚠️ 常见审核问题"></a>⚠️ 常见审核问题</h4><ul><li>❌ 诱导分享&#x2F;评价</li><li>❌ 不合规内容和功能</li><li>❌ 个人信息收集不规范</li><li>❌ UI与体验不符合平台规范</li></ul><h3 id="🔄-CI-CD-自动化发布"><a href="#🔄-CI-CD-自动化发布" class="headerlink" title="🔄 CI&#x2F;CD 自动化发布"></a>🔄 CI&#x2F;CD 自动化发布</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/deploy.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Mini</span> <span class="string">Program</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;16&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build:weapp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">to</span> <span class="string">WeChat</span> <span class="string">DevTools</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">zhuowenli/taro-build-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">project-path:</span> <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">          <span class="attr">private-key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">private-key-id:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PRIVATE_KEY_ID</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">upload-desc:</span> <span class="string">&#x27;Auto deploy from Github Actions&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="⚡-性能优化最佳实践"><a href="#⚡-性能优化最佳实践" class="headerlink" title="⚡ 性能优化最佳实践"></a>⚡ 性能优化最佳实践</h2><h3 id="🚀-启动性能优化"><a href="#🚀-启动性能优化" class="headerlink" title="🚀 启动性能优化"></a>🚀 启动性能优化</h3><table><thead><tr><th align="left">优化方式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">📦 精简主包</td><td align="left">将非必要页面移至分包</td></tr><tr><td align="left">🔄 预下载分包</td><td align="left">提前加载可能需要的分包</td></tr><tr><td align="left">⚡ 启用初始渲染缓存</td><td align="left">提高页面显示速度</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">window</span>: &#123;</span><br><span class="line">    <span class="attr">initialRenderingCache</span>: <span class="string">&#x27;static&#x27;</span> <span class="comment">// 开启静态初始渲染缓存</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⏱️-运行时性能优化"><a href="#⏱️-运行时性能优化" class="headerlink" title="⏱️ 运行时性能优化"></a>⏱️ 运行时性能优化</h3><h4 id="🛑-避免不必要的渲染"><a href="#🛑-避免不必要的渲染" class="headerlink" title="🛑 避免不必要的渲染"></a>🛑 避免不必要的渲染</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; throttle &#125; <span class="keyword">from</span> <span class="string">&#x27;../utils/tools&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流处理</span></span><br><span class="line"><span class="keyword">const</span> handleScroll = <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理滚动逻辑</span></span><br><span class="line">&#125;, <span class="number">200</span>)</span><br></pre></td></tr></table></figure><h4 id="📜-长列表优化"><a href="#📜-长列表优化" class="headerlink" title="📜 长列表优化"></a>📜 长列表优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;scroll-view </span><br><span class="line">  scroll-y </span><br><span class="line">  style=&quot;height: 500px&quot;</span><br><span class="line">  virtual-item-height=&quot;50&quot; </span><br><span class="line">  enableVirtualList&gt;</span><br><span class="line">  &lt;virtual-item v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">    &#123;&#123; item.name &#125;&#125;</span><br><span class="line">  &lt;/virtual-item&gt;</span><br><span class="line">&lt;/scroll-view&gt;</span><br></pre></td></tr></table></figure><h4 id="🖼️-图片懒加载"><a href="#🖼️-图片懒加载" class="headerlink" title="🖼️ 图片懒加载"></a>🖼️ 图片懒加载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;image lazy-load src=&quot;&#123;&#123;imageUrl&#125;&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="💀-骨架屏优化"><a href="#💀-骨架屏优化" class="headerlink" title="💀 骨架屏优化"></a>💀 骨架屏优化</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">initialRenderingCache</span>: &#123;</span><br><span class="line">    <span class="attr">skeleton</span>: &#123; <span class="comment">// 配置骨架屏</span></span><br><span class="line">      <span class="attr">mode</span>: <span class="string">&#x27;fullscreen&#x27;</span>, <span class="comment">// 全屏骨架屏</span></span><br><span class="line">      <span class="attr">source</span>: <span class="string">&#x27;native&#x27;</span>, <span class="comment">// 使用原生骨架屏</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🌐-网络请求优化"><a href="#🌐-网络请求优化" class="headerlink" title="🌐 网络请求优化"></a>🌐 网络请求优化</h3><table><thead><tr><th align="left">优化方式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">🔗 合并请求</td><td align="left">减少请求次数</td></tr><tr><td align="left">📋 请求队列</td><td align="left">避免同时发起过多请求</td></tr><tr><td align="left">⏱️ 超时与重试</td><td align="left">合理设置请求超时和重试策略</td></tr><tr><td align="left">🚀 HTTP&#x2F;2</td><td align="left">启用 HTTP&#x2F;2 优化连接</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Taro</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/data&#x27;</span>,</span><br><span class="line">  <span class="attr">enableHttp2</span>: <span class="literal">true</span>, <span class="comment">// 开启HTTP/2</span></span><br><span class="line">  <span class="attr">enableQuic</span>: <span class="literal">true</span>, <span class="comment">// 开启QUIC</span></span><br><span class="line">  <span class="attr">enableCache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="🔐-小程序特有功能"><a href="#🔐-小程序特有功能" class="headerlink" title="🔐 小程序特有功能"></a>🔐 小程序特有功能</h2><h3 id="🔑-小程序登录流程优化"><a href="#🔑-小程序登录流程优化" class="headerlink" title="🔑 小程序登录流程优化"></a>🔑 小程序登录流程优化</h3><h4 id="完整登录流程图"><a href="#完整登录流程图" class="headerlink" title="完整登录流程图"></a>完整登录流程图</h4><p><img src= "/img/loading.gif" data-lazy-src="/img/taroLogin.png"      srcset="/img/taroLogin.png 480w, /img/taroLogin.png 1200w"      sizes="(max-width:600px) 100vw, 50vw"></p><h4 id="登录流程说明"><a href="#登录流程说明" class="headerlink" title="登录流程说明"></a>登录流程说明</h4><ol><li><p><strong>本地验证阶段</strong>：</p><ul><li>检查本地是否有登录凭证(token)</li><li>若有token，验证其有效性</li><li>若无token或token无效，进入微信登录流程</li></ul></li><li><p><strong>获取凭证阶段</strong>：</p><ul><li>调用<code>Taro.login()</code>获取临时登录凭证code</li><li>将code发送至应用服务器</li></ul></li><li><p><strong>服务端身份验证</strong>：</p><ul><li>应用服务器携带code、appid和secret请求微信服务器</li><li>微信服务器返回openid和session_key</li><li>应用服务器根据openid查询用户是否存在</li></ul></li><li><p><strong>用户处理阶段</strong>：</p><ul><li>若用户已存在：更新用户登录时间，生成新token</li><li>若用户不存在：创建新用户记录，生成token</li><li>将token和用户基本信息返回小程序前端</li></ul></li><li><p><strong>登录完成阶段</strong>：</p><ul><li>小程序保存token到本地存储</li><li>保存必要的用户信息</li><li>更新应用的登录状态</li><li>进入小程序主界面</li></ul></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="前端实现（Taro）"><a href="#前端实现（Taro）" class="headerlink" title="前端实现（Taro）"></a>前端实现（Taro）</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// login.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Taro</span> <span class="keyword">from</span> <span class="string">&#x27;@tarojs/taro&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; login <span class="keyword">as</span> apiLogin &#125; <span class="keyword">from</span> <span class="string">&#x27;../services/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录状态检查与登录流程</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">ensureLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 检查本地是否有有效的 token</span></span><br><span class="line">  <span class="keyword">const</span> token = <span class="title class_">Taro</span>.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 2. 验证 token 是否有效</span></span><br><span class="line">      <span class="keyword">const</span> checkResult = <span class="keyword">await</span> <span class="title function_">checkTokenValidity</span>(token)</span><br><span class="line">      <span class="keyword">if</span> (checkResult.<span class="property">valid</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;token 有效，已登录&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;token 校验失败，需要重新登录&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3. token 无效或不存在，进行登录流程</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">wxLogin</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 微信登录流程</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">wxLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 显示加载提示</span></span><br><span class="line">    <span class="title class_">Taro</span>.<span class="title function_">showLoading</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;登录中...&#x27;</span> &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 调用微信登录，获取 code</span></span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = <span class="keyword">await</span> <span class="title class_">Taro</span>.<span class="title function_">login</span>()</span><br><span class="line">    <span class="keyword">if</span> (!code) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;微信登录失败，获取 code 失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5. 将 code 发送给后端</span></span><br><span class="line">    <span class="keyword">const</span> loginResult = <span class="keyword">await</span> <span class="title function_">apiLogin</span>(&#123; code &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 6. 存储登录状态和用户信息</span></span><br><span class="line">    <span class="title class_">Taro</span>.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;token&#x27;</span>, loginResult.<span class="property">token</span>)</span><br><span class="line">    <span class="title class_">Taro</span>.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>, loginResult.<span class="property">userInfo</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否是新用户，如果是新用户可以引导完善资料</span></span><br><span class="line">    <span class="keyword">if</span> (loginResult.<span class="property">isNewUser</span>) &#123;</span><br><span class="line">      <span class="title class_">Taro</span>.<span class="title function_">navigateTo</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/pages/user-profile/index&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Taro</span>.<span class="title function_">hideLoading</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;登录失败&#x27;</span>, error)</span><br><span class="line">    <span class="title class_">Taro</span>.<span class="title function_">hideLoading</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Taro</span>.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;登录失败，请重试&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验 token 有效性</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">checkTokenValidity</span>(<span class="params">token</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title class_">Taro</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/api/auth/check-token&#x27;</span>,</span><br><span class="line">      <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">valid</span>: res.<span class="property">data</span>.<span class="property">valid</span> &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">valid</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务端实现（Node-js）"><a href="#服务端实现（Node-js）" class="headerlink" title="服务端实现（Node.js）"></a>服务端实现（Node.js）</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// auth.controller.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&#x27;jsonwebtoken&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../models/user.model&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 微信登录配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WX_CONFIG</span> = &#123;</span><br><span class="line">  <span class="attr">appId</span>: process.<span class="property">env</span>.<span class="property">WX_APP_ID</span>,</span><br><span class="line">  <span class="attr">appSecret</span>: process.<span class="property">env</span>.<span class="property">WX_APP_SECRET</span>,</span><br><span class="line">  <span class="attr">loginUrl</span>: <span class="string">&#x27;https://api.weixin.qq.com/sns/jscode2session&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"><span class="attr">req</span>: <span class="title class_">Request</span>, <span class="attr">res</span>: <span class="title class_">Response</span></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = req.<span class="property">body</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!code) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; </span><br><span class="line">        <span class="attr">success</span>: <span class="literal">false</span>, </span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;缺少登录code&#x27;</span> </span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 请求微信API获取openid和session_key</span></span><br><span class="line">    <span class="keyword">const</span> wxResponse = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="variable constant_">WX_CONFIG</span>.<span class="property">loginUrl</span>, &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">appid</span>: <span class="variable constant_">WX_CONFIG</span>.<span class="property">appId</span>,</span><br><span class="line">        <span class="attr">secret</span>: <span class="variable constant_">WX_CONFIG</span>.<span class="property">appSecret</span>,</span><br><span class="line">        <span class="attr">js_code</span>: code,</span><br><span class="line">        <span class="attr">grant_type</span>: <span class="string">&#x27;authorization_code&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123; openid, session_key &#125; = wxResponse.<span class="property">data</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!openid) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; </span><br><span class="line">        <span class="attr">success</span>: <span class="literal">false</span>, </span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;获取openid失败&#x27;</span> </span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 根据openid查询数据库，判断用户是否存在</span></span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; openid &#125;)</span><br><span class="line">    <span class="keyword">let</span> isNewUser = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 如果用户不存在，则创建新用户</span></span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      isNewUser = <span class="literal">true</span></span><br><span class="line">      user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">        openid,</span><br><span class="line">        <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">        <span class="comment">// 其他默认数据</span></span><br><span class="line">        <span class="attr">nickname</span>: <span class="string">`用户<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10000</span>)&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">avatarUrl</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 默认头像</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 生成token</span></span><br><span class="line">    <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(</span><br><span class="line">      &#123; <span class="attr">userId</span>: user.<span class="property">_id</span>, openid &#125;,</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>,</span><br><span class="line">      &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;7d&#x27;</span> &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5. 更新用户的最后登录时间</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">updateOne</span>(</span><br><span class="line">      &#123; <span class="attr">_id</span>: user.<span class="property">_id</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">$set</span>: &#123; <span class="attr">lastLoginAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125; &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 6. 返回登录结果</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">      token,</span><br><span class="line">      <span class="attr">userInfo</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: user.<span class="property">_id</span>,</span><br><span class="line">        <span class="attr">nickname</span>: user.<span class="property">nickname</span>,</span><br><span class="line">        <span class="attr">avatarUrl</span>: user.<span class="property">avatarUrl</span>,</span><br><span class="line">        <span class="comment">// 其他需要的用户信息</span></span><br><span class="line">      &#125;,</span><br><span class="line">      isNewUser</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;登录异常:&#x27;</span>, error)</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;服务器错误&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证token接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">checkToken</span>(<span class="params"><span class="attr">req</span>: <span class="title class_">Request</span>, <span class="attr">res</span>: <span class="title class_">Response</span></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// token已经在中间件中验证过，能到这里说明token有效</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">valid</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">valid</span>: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求封装"><a href="#请求封装" class="headerlink" title="请求封装"></a>请求封装</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Taro</span> <span class="keyword">from</span> <span class="string">&#x27;@tarojs/taro&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ensureLogin &#125; <span class="keyword">from</span> <span class="string">&#x27;./login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装请求方法，自动携带token和处理登录态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取存储的token</span></span><br><span class="line">  <span class="keyword">const</span> token = <span class="title class_">Taro</span>.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 合并请求头</span></span><br><span class="line">  <span class="keyword">const</span> header = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    ...options.<span class="property">header</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果有token，则添加到请求头</span></span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    header[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title class_">Taro</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">      ...options,</span><br><span class="line">      header</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求成功</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">statusCode</span> &gt;= <span class="number">200</span> &amp;&amp; response.<span class="property">statusCode</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response.<span class="property">data</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// token 失效（401）</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">statusCode</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="comment">// 清除已失效的token</span></span><br><span class="line">      <span class="title class_">Taro</span>.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 重新登录</span></span><br><span class="line">      <span class="keyword">const</span> loginSuccess = <span class="keyword">await</span> <span class="title function_">ensureLogin</span>()</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (loginSuccess) &#123;</span><br><span class="line">        <span class="comment">// 登录成功，重试原请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">request</span>(options)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;登录失败，无法完成请求&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他错误</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(response.<span class="property">data</span>.<span class="property">message</span> || <span class="string">&#x27;请求失败&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求异常:&#x27;</span>, error)</span><br><span class="line">    <span class="keyword">throw</span> error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登录状态管理（使用Pinia）"><a href="#登录状态管理（使用Pinia）" class="headerlink" title="登录状态管理（使用Pinia）"></a>登录状态管理（使用Pinia）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stores/user.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Taro</span> <span class="keyword">from</span> <span class="string">&#x27;@tarojs/taro&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ensureLogin &#125; <span class="keyword">from</span> <span class="string">&#x27;../utils/login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getUserInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;../services/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="title class_">Taro</span>.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>) || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="title class_">Taro</span>.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>) || <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">isLoggedIn</span>: !!<span class="title class_">Taro</span>.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>),</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span></span><br><span class="line">  &#125;),</span><br><span class="line">  </span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 初始化检查登录状态</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">checkLoginStatus</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isLoggedIn</span>) &#123;</span><br><span class="line">          <span class="comment">// 刷新用户信息</span></span><br><span class="line">          <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchUserInfo</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 出错则置为未登录状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isLoggedIn</span> = <span class="literal">false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">token</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="literal">null</span></span><br><span class="line">        <span class="title class_">Taro</span>.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="title class_">Taro</span>.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> success = <span class="keyword">await</span> <span class="title function_">ensureLogin</span>()</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">token</span> = <span class="title class_">Taro</span>.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="title class_">Taro</span>.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">isLoggedIn</span> = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;登录失败&#x27;</span>, error)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchUserInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">token</span>) <span class="keyword">return</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> userInfo = <span class="keyword">await</span> <span class="title function_">getUserInfo</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userInfo</span> = userInfo</span><br><span class="line">        <span class="title class_">Taro</span>.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>, userInfo)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取用户信息失败&#x27;</span>, error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 退出登录</span></span><br><span class="line">    <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">token</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="literal">null</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isLoggedIn</span> = <span class="literal">false</span></span><br><span class="line">      <span class="title class_">Taro</span>.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">      <span class="title class_">Taro</span>.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">      <span class="title class_">Taro</span>.<span class="title function_">showToast</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;已退出登录&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;success&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="登录流程使用示例"><a href="#登录流程使用示例" class="headerlink" title="登录流程使用示例"></a>登录流程使用示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view class=&quot;login-page&quot;&gt;</span><br><span class="line">    &lt;view v-if=&quot;!userStore.isLoggedIn&quot;&gt;</span><br><span class="line">      &lt;button @tap=&quot;handleLogin&quot; :loading=&quot;userStore.isLoading&quot;&gt;</span><br><span class="line">        微信一键登录</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view v-else&gt;</span><br><span class="line">      &lt;view class=&quot;user-info&quot;&gt;</span><br><span class="line">        &lt;image :src=&quot;userStore.userInfo?.avatarUrl || defaultAvatar&quot; class=&quot;avatar&quot; /&gt;</span><br><span class="line">        &lt;text class=&quot;nickname&quot;&gt;&#123;&#123; userStore.userInfo?.nickname || &#x27;未设置昵称&#x27; &#125;&#125;&lt;/text&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">      &lt;button @tap=&quot;userStore.logout&quot; type=&quot;default&quot;&gt;退出登录&lt;/button&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; onLoad &#125; from &#x27;@tarojs/taro&#x27;</span><br><span class="line">import &#123; useUserStore &#125; from &#x27;../../stores/user&#x27;</span><br><span class="line"></span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const defaultAvatar = &#x27;../../assets/default-avatar.png&#x27;</span><br><span class="line"></span><br><span class="line">// 页面加载时检查登录状态</span><br><span class="line">onLoad(() =&gt; &#123;</span><br><span class="line">  userStore.checkLoginStatus()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 处理登录</span><br><span class="line">const handleLogin = async () =&gt; &#123;</span><br><span class="line">  const success = await userStore.login()</span><br><span class="line">  if (success) &#123;</span><br><span class="line">    console.log(&#x27;登录成功&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="登录安全最佳实践"><a href="#登录安全最佳实践" class="headerlink" title="登录安全最佳实践"></a>登录安全最佳实践</h4><ol><li><p><strong>使用 HTTPS</strong>：所有接口通信必须使用 HTTPS 加密传输</p></li><li><p><strong>TOKEN 处理</strong>：</p><ul><li>设置合理的过期时间（通常7天以内）</li><li>支持主动刷新 TOKEN</li><li>退出登录时清除 TOKEN</li></ul></li><li><p><strong>敏感信息存储</strong>：</p><ul><li>不在客户端存储用户敏感信息</li><li>使用小程序提供的安全存储 API</li></ul></li><li><p><strong>防刷防暴力</strong>：</p><ul><li>登录接口增加频率限制</li><li>多次失败后要求图形验证码或延时</li></ul></li><li><p><strong>用户信息保护</strong>：</p><ul><li>只返回必要的用户信息</li><li>敏感操作需要二次验证</li></ul></li></ol><h3 id="👤-获取用户信息"><a href="#👤-获取用户信息" class="headerlink" title="👤 获取用户信息"></a>👤 获取用户信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button </span><br><span class="line">    open-type=&quot;chooseAvatar&quot; </span><br><span class="line">    @chooseavatar=&quot;onChooseAvatar&quot;&gt;</span><br><span class="line">    选择头像</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;input </span><br><span class="line">    type=&quot;nickname&quot; </span><br><span class="line">    placeholder=&quot;请输入昵称&quot; </span><br><span class="line">    @change=&quot;onNicknameChange&quot; </span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import Taro from &#x27;@tarojs/taro&#x27;</span><br><span class="line"></span><br><span class="line">const avatarUrl = ref(&#x27;&#x27;)</span><br><span class="line">const nickname = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">const onChooseAvatar = (e) =&gt; &#123;</span><br><span class="line">  avatarUrl.value = e.detail.avatarUrl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const onNicknameChange = (e) =&gt; &#123;</span><br><span class="line">  nickname.value = e.detail.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const saveUserInfo = async () =&gt; &#123;</span><br><span class="line">  if (!avatarUrl.value || !nickname.value) &#123;</span><br><span class="line">    Taro.showToast(&#123;</span><br><span class="line">      title: &#x27;请完善信息&#x27;,</span><br><span class="line">      icon: &#x27;none&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 上传头像到服务器</span><br><span class="line">  const uploadRes = await uploadFile(avatarUrl.value)</span><br><span class="line">  </span><br><span class="line">  // 保存用户信息</span><br><span class="line">  await updateUserInfo(&#123;</span><br><span class="line">    avatarUrl: uploadRes.url,</span><br><span class="line">    nickname: nickname.value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="📱-小程序适配与兼容性"><a href="#📱-小程序适配与兼容性" class="headerlink" title="📱 小程序适配与兼容性"></a>📱 小程序适配与兼容性</h3><h4 id="📊-基础库版本"><a href="#📊-基础库版本" class="headerlink" title="📊 基础库版本"></a>📊 基础库版本</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">miniprogramRoot</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">  <span class="attr">projectname</span>: <span class="string">&#x27;MyApp&#x27;</span>,</span><br><span class="line">  <span class="attr">setting</span>: &#123;</span><br><span class="line">    <span class="attr">minified</span>: <span class="literal">true</span>, <span class="comment">// 压缩代码</span></span><br><span class="line">    <span class="attr">es6</span>: <span class="literal">true</span>, <span class="comment">// 开启ES6转换</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">libVersion</span>: <span class="string">&#x27;2.24.7&#x27;</span>, <span class="comment">// 指定基础库版本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔄-版本检测与提示"><a href="#🔄-版本检测与提示" class="headerlink" title="🔄 版本检测与提示"></a>🔄 版本检测与提示</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">checkVersion</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取微信版本信息</span></span><br><span class="line">  <span class="keyword">const</span> version = <span class="title class_">Taro</span>.<span class="title function_">getSystemInfoSync</span>().<span class="property">SDKVersion</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 比较版本号</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Taro</span>.<span class="title function_">compareVersion</span>(version, <span class="string">&#x27;2.21.0&#x27;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title class_">Taro</span>.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;当前微信版本过低，请更新至最新版本&#x27;</span>,</span><br><span class="line">      <span class="attr">showCancel</span>: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🎨-WeUI-组件使用"><a href="#🎨-WeUI-组件使用" class="headerlink" title="🎨 WeUI 组件使用"></a>🎨 WeUI 组件使用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">useExtendedLib</span>: &#123;</span><br><span class="line">    <span class="attr">weui</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;weui-form&gt;</span><br><span class="line">    &lt;weui-cells title=&quot;表单&quot;&gt;</span><br><span class="line">      &lt;weui-cell&gt;</span><br><span class="line">        &lt;weui-input placeholder=&quot;请输入&quot; /&gt;</span><br><span class="line">      &lt;/weui-cell&gt;</span><br><span class="line">    &lt;/weui-cells&gt;</span><br><span class="line">    &lt;weui-button type=&quot;primary&quot;&gt;提交&lt;/weui-button&gt;</span><br><span class="line">  &lt;/weui-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="✨-最佳实践"><a href="#✨-最佳实践" class="headerlink" title="✨ 最佳实践"></a>✨ 最佳实践</h2><table><thead><tr><th align="left">实践</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">📁 <strong>代码组织</strong></td><td align="left">按功能模块拆分组件，避免过大的页面文件</td></tr><tr><td align="left">🔄 <strong>状态管理</strong></td><td align="left">复杂应用使用 Pinia 等状态管理工具</td></tr><tr><td align="left">🎨 <strong>样式管理</strong></td><td align="left">使用预处理器，模块化CSS</td></tr><tr><td align="left">🔄 <strong>兼容性</strong></td><td align="left">注意小程序平台差异，做好兼容处理</td></tr><tr><td align="left">🔒 <strong>安全性</strong></td><td align="left">敏感数据不存储在本地，使用token验证请求</td></tr><tr><td align="left">⚠️ <strong>错误处理</strong></td><td align="left">完善的错误捕获和提示机制</td></tr><tr><td align="left">🔄 <strong>代码复用</strong></td><td align="left">抽取公共逻辑到 hooks&#x2F;composables 中</td></tr><tr><td align="left">🔌 <strong>接口封装</strong></td><td align="left">统一封装网络请求，便于管理</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Deno学习记录-📘&quot;&gt;&lt;a href=&quot;#Deno学习记录-📘&quot; class=&quot;headerlink&quot; title=&quot;Deno学习记录 📘&quot;&gt;&lt;/a&gt;Deno学习记录 📘&lt;/h1&gt;&lt;h1 id=&quot;📱-Taro-学习总结&quot;&gt;&lt;a href=&quot;#📱-Ta</summary>
      
    
    
    
    
    <category term="Taro" scheme="https://aoayaoa.github.io/tags/Taro/"/>
    
  </entry>
  
  <entry>
    <title>性能优化</title>
    <link href="https://aoayaoa.github.io/2024/07/07/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://aoayaoa.github.io/2024/07/07/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2024-07-06T16:00:00.000Z</published>
    <updated>2025-04-16T04:38:58.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-性能优化完全指南"><a href="#Web-性能优化完全指南" class="headerlink" title="Web 性能优化完全指南"></a>Web 性能优化完全指南</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#1-%E5%8A%A0%E8%BD%BD%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">1. 加载性能优化</a></li><li><a href="#2-%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">2. 渲染性能优化</a></li><li><a href="#3-%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96">3. 资源优化</a></li><li><a href="#4-%E7%BD%91%E7%BB%9C%E5%B1%82%E4%BC%98%E5%8C%96">4. 网络层优化</a></li><li><a href="#5-%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5">5. 缓存策略</a></li><li><a href="#6-%E6%A1%86%E6%9E%B6%E7%BA%A7%E4%BC%98%E5%8C%96">6. 框架级优化</a></li><li><a href="#7-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%B8%93%E9%A1%B9%E4%BC%98%E5%8C%96">7. 移动端专项优化</a></li><li><a href="#8-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90">8. 性能监控与分析</a></li><li><a href="#9-%E8%BF%9B%E9%98%B6%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5">9. 进阶优化策略</a></li><li><a href="#10-%E5%B7%A5%E5%85%B7%E9%93%BE%E6%8E%A8%E8%8D%90">10. 工具链推荐</a></li></ul><p><a id="1-加载性能优化"></a></p><h2 id="1-加载性能优化"><a href="#1-加载性能优化" class="headerlink" title="1. 加载性能优化"></a>1. 加载性能优化</h2><h3 id="1-1-关键渲染路径优化"><a href="#1-1-关键渲染路径优化" class="headerlink" title="1.1 关键渲染路径优化"></a>1.1 关键渲染路径优化</h3><h4 id="1-1-1-CSS优化"><a href="#1-1-1-CSS优化" class="headerlink" title="1.1.1 CSS优化"></a>1.1.1 CSS优化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 内联关键CSS</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="comment">/* 首屏关键样式 */</span></span><br><span class="line">  .<span class="property">header</span> &#123; ... &#125;</span><br><span class="line">  .<span class="property">hero</span>-section &#123; ... &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 异步加载非关键CSS</span></span><br><span class="line">&lt;link rel=&quot;preload&quot; href=&quot;critical.css&quot; as=&quot;style&quot; onload=&quot;this.rel=&#x27;stylesheet&#x27;&quot;&gt;</span><br><span class="line">&lt;noscript&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;critical.css&quot;&gt;&lt;/noscript&gt;</span><br><span class="line"></span><br><span class="line">// 3. 媒体查询优化</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;print.css&quot; media=&quot;print&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;desktop.css&quot; media=&quot;(min-width: 1024px)&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="1-1-2-JavaScript优化"><a href="#1-1-2-JavaScript优化" class="headerlink" title="1.1.2 JavaScript优化"></a>1.1.2 JavaScript优化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 脚本加载策略</span></span><br><span class="line">&lt;script src=<span class="string">&quot;critical.js&quot;</span>&gt;&lt;<span class="regexp">/script&gt;           /</span>/ 关键脚本</span><br><span class="line">&lt;script src=<span class="string">&quot;app.js&quot;</span> defer&gt;&lt;<span class="regexp">/script&gt;          /</span>/ 延迟执行</span><br><span class="line">&lt;script src=<span class="string">&quot;analytics.js&quot;</span> <span class="keyword">async</span>&gt;&lt;<span class="regexp">/script&gt;    /</span>/ 异步加载</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 模块化加载</span></span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;app.mjs&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 条件加载</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;IntersectionObserver&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./lazyload.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 实现懒加载</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-资源预加载策略"><a href="#1-2-资源预加载策略" class="headerlink" title="1.2 资源预加载策略"></a>1.2 资源预加载策略</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. DNS预解析 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//api.example.com&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 预连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.example.com&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. 预加载关键资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;font.woff2&quot;</span> <span class="attr">as</span>=<span class="string">&quot;font&quot;</span> <span class="attr">type</span>=<span class="string">&quot;font/woff2&quot;</span> <span class="attr">crossorigin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;hero-image.jpg&quot;</span> <span class="attr">as</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4. 预获取下一页资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/next-page.js&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 5. 预渲染下一页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prerender&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/likely-next-page.html&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-智能代码分割"><a href="#1-3-智能代码分割" class="headerlink" title="1.3 智能代码分割"></a>1.3 智能代码分割</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 路由级别分割</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(</span><br><span class="line">      <span class="comment">/* webpackChunkName: &quot;dashboard&quot; */</span></span><br><span class="line">      <span class="string">&#x27;./views/Dashboard.vue&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 组件级别分割</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HeavyComponent</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./HeavyComponent&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 条件分割</span></span><br><span class="line"><span class="keyword">if</span> (user.<span class="property">isPremium</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./premium-features&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="title function_">initPremiumFeatures</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 库分割</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadLuxuryFeatures</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;chart.js&#x27;</span>),</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;@google/model-viewer&#x27;</span>)</span><br><span class="line">  ]).<span class="title function_">then</span>(<span class="function">(<span class="params">[Chart, ModelViewer]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化高级功能</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a id="2-渲染性能优化"></a></p><h2 id="2-渲染性能优化"><a href="#2-渲染性能优化" class="headerlink" title="2. 渲染性能优化"></a>2. 渲染性能优化</h2><h3 id="2-1-DOM操作优化"><a href="#2-1-DOM操作优化" class="headerlink" title="2.1 DOM操作优化"></a>2.1 DOM操作优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 批量DOM操作</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000</span>).<span class="title function_">fill</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  items.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    li.<span class="property">textContent</span> = <span class="string">`Item <span class="subst">$&#123;item&#125;</span>`</span>;</span><br><span class="line">    fragment.<span class="title function_">appendChild</span>(li);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  container.<span class="title function_">appendChild</span>(fragment);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 虚拟列表实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VirtualList</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">container, items, rowHeight</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span> = container;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = items;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rowHeight</span> = rowHeight;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">visibleItems</span> = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(container.<span class="property">clientHeight</span> / rowHeight);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startIndex</span> = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onScroll</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scrollTop</span> = <span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startIndex</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="variable language_">this</span>.<span class="property">scrollTop</span> / <span class="variable language_">this</span>.<span class="property">rowHeight</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> visibleItems = <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">slice</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">startIndex</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">startIndex</span> + <span class="variable language_">this</span>.<span class="property">visibleItems</span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 渲染可视区域内容</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-CSS性能优化"><a href="#2-2-CSS性能优化" class="headerlink" title="2.2 CSS性能优化"></a>2.2 CSS性能优化</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. 选择器优化 */</span></span><br><span class="line"><span class="comment">/* 避免 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.header</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.nav-link</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.list-item</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 硬件加速 */</span></span><br><span class="line"><span class="selector-class">.hardware-accelerated</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="attribute">will-change</span>: transform;</span><br><span class="line">  <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 动画性能优化 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> optimized-animation &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.smooth-animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: optimized-animation <span class="number">300ms</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 关键CSS属性 */</span></span><br><span class="line"><span class="selector-class">.performance-critical</span> &#123;</span><br><span class="line">  <span class="attribute">contain</span>: content;  <span class="comment">/* 隔离DOM子树 */</span></span><br><span class="line">  <span class="attribute">content-visibility</span>: auto;  <span class="comment">/* 智能渲染 */</span></span><br><span class="line">  <span class="attribute">contain-intrinsic-size</span>: <span class="number">0</span> <span class="number">500px</span>;  <span class="comment">/* 预估大小 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-渲染优化策略"><a href="#2-3-渲染优化策略" class="headerlink" title="2.3 渲染优化策略"></a>2.3 渲染优化策略</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 避免强制同步布局</span></span><br><span class="line"><span class="keyword">const</span> cards = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.card&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> heights = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的做法</span></span><br><span class="line">cards.<span class="title function_">forEach</span>(<span class="function"><span class="params">card</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> height = card.<span class="property">offsetHeight</span>;  <span class="comment">// 强制重排</span></span><br><span class="line">  card.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;height * <span class="number">1.5</span>&#125;</span>px`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后的做法</span></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 读取</span></span><br><span class="line">  cards.<span class="title function_">forEach</span>(<span class="function"><span class="params">card</span> =&gt;</span> &#123;</span><br><span class="line">    heights.<span class="title function_">push</span>(card.<span class="property">offsetHeight</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 写入</span></span><br><span class="line">  cards.<span class="title function_">forEach</span>(<span class="function">(<span class="params">card, i</span>) =&gt;</span> &#123;</span><br><span class="line">    card.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;heights[i] * <span class="number">1.5</span>&#125;</span>px`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用IntersectionObserver优化滚动</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      entry.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;visible&#x27;</span>);</span><br><span class="line">      observer.<span class="title function_">unobserve</span>(entry.<span class="property">target</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">threshold</span>: <span class="number">0.1</span>,</span><br><span class="line">  <span class="attr">rootMargin</span>: <span class="string">&#x27;50px&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.lazy-load&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> observer.<span class="title function_">observe</span>(el));</span><br></pre></td></tr></table></figure><p><a id="3-资源优化"></a></p><h2 id="3-资源优化"><a href="#3-资源优化" class="headerlink" title="3. 资源优化"></a>3. 资源优化</h2><h3 id="3-1-图片优化策略"><a href="#3-1-图片优化策略" class="headerlink" title="3.1 图片优化策略"></a>3.1 图片优化策略</h3><table><thead><tr><th>格式</th><th>适用场景</th><th>优化工具</th></tr></thead><tbody><tr><td>WebP</td><td>全平台支持场景</td><td>cwebp</td></tr><tr><td>AVIF</td><td>现代浏览器</td><td>avifenc</td></tr><tr><td>渐进式JPEG</td><td>大图加载体验优化</td><td>jpegtran</td></tr></tbody></table><h3 id="3-2-字体优化"><a href="#3-2-字体优化" class="headerlink" title="3.2 字体优化"></a>3.2 字体优化</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;CustomFont&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;font.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">&#x27;font.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  unicode-range: U+<span class="number">000</span>-<span class="number">5</span>FF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="4-网络层优化"></a></p><h2 id="4-网络层优化"><a href="#4-网络层优化" class="headerlink" title="4. 网络层优化"></a>4. 网络层优化</h2><h3 id="4-1-HTTP-2优化"><a href="#4-1-HTTP-2优化" class="headerlink" title="4.1 HTTP&#x2F;2优化"></a>4.1 HTTP&#x2F;2优化</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nginx配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">  <span class="attribute">ssl_certificate</span> /path/to/cert.pem;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /path/to/key.pem;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 启用服务器推送</span></span><br><span class="line">  <span class="attribute">http2_push</span> /style.css;</span><br><span class="line">  <span class="attribute">http2_push</span> /app.js;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-CDN策略"><a href="#4-2-CDN策略" class="headerlink" title="4.2 CDN策略"></a>4.2 CDN策略</h3><pre><code class="highlight mermaid">graph TD  A[用户] --&gt; B[边缘节点]  B --&gt;|缓存命中| C[快速响应]  B --&gt;|缓存未命中| D[回源拉取]  D --&gt; E[源站服务器]</code></pre><p><a id="5-缓存策略"></a></p><h2 id="5-缓存策略"><a href="#5-缓存策略" class="headerlink" title="5. 缓存策略"></a>5. 缓存策略</h2><h3 id="5-1-缓存头设置"><a href="#5-1-缓存头设置" class="headerlink" title="5.1 缓存头设置"></a>5.1 缓存头设置</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>public, max-age=31536000, immutable</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;xyzzy&quot;</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Accept-Encoding</span><br></pre></td></tr></table></figure><h3 id="5-2-Service-Worker缓存"><a href="#5-2-Service-Worker缓存" class="headerlink" title="5.2 Service Worker缓存"></a>5.2 Service Worker缓存</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">CACHE_NAME</span> = <span class="string">&#x27;v1&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ASSETS</span> = [<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;/app.js&#x27;</span>,<span class="string">&#x27;/style.css&#x27;</span>];</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&#x27;install&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">waitUntil</span>(</span><br><span class="line">    caches.<span class="title function_">open</span>(<span class="variable constant_">CACHE_NAME</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">cache</span> =&gt;</span> cache.<span class="title function_">addAll</span>(<span class="variable constant_">ASSETS</span>))</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a id="6-框架级优化"></a></p><h2 id="6-框架级优化"><a href="#6-框架级优化" class="headerlink" title="6. 框架级优化"></a>6. 框架级优化</h2><h3 id="6-1-React优化"><a href="#6-1-React优化" class="headerlink" title="6.1 React优化"></a>6.1 React优化</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用memo优化组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MemoComponent</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚拟列表实现</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FixedSizeList</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-window&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="6-2-Vue优化"><a href="#6-2-Vue优化" class="headerlink" title="6.2 Vue优化"></a>6.2 Vue优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件懒加载</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Home.vue&#x27;</span>) &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冻结大数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">largeData</span> = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(bigData);</span><br></pre></td></tr></table></figure><p><a id="7-移动端专项优化"></a></p><h2 id="7-移动端专项优化"><a href="#7-移动端专项优化" class="headerlink" title="7. 移动端专项优化"></a>7. 移动端专项优化</h2><h3 id="7-1-首屏加速"><a href="#7-1-首屏加速" class="headerlink" title="7.1 首屏加速"></a>7.1 首屏加速</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 骨架屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;skeleton&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;skeleton-header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;skeleton-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-手势优化"><a href="#7-2-手势优化" class="headerlink" title="7.2 手势优化"></a>7.2 手势优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖处理</span></span><br><span class="line"><span class="keyword">let</span> tapTimer;</span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  tapTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理点击</span></span><br><span class="line">  &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">clearTimeout</span>(tapTimer);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a id="8-性能监控与分析"></a></p><h2 id="8-性能监控与分析"><a href="#8-性能监控与分析" class="headerlink" title="8. 性能监控与分析"></a>8. 性能监控与分析</h2><h3 id="8-1-核心性能指标详解"><a href="#8-1-核心性能指标详解" class="headerlink" title="8.1 核心性能指标详解"></a>8.1 核心性能指标详解</h3><table><thead><tr><th>指标</th><th>全称</th><th>中文解释</th><th>优化建议</th><th>达标标准</th><th>测量方式</th></tr></thead><tbody><tr><td><strong>FCP</strong></td><td>First Contentful Paint</td><td>首次内容渲染时间</td><td>1. 优化服务器响应时间<br>2. 移除阻塞渲染的资源<br>3. 压缩CSS&#x2F;JS文件</td><td>&lt;1.8s</td><td><code>performance.getEntriesByName(&#39;first-contentful-paint&#39;)[0]</code></td></tr><tr><td><strong>LCP</strong></td><td>Largest Contentful Paint</td><td>最大内容渲染时间</td><td>1. 优化图片加载<br>2. 预加载关键资源<br>3. 使用CDN</td><td>&lt;2.5s</td><td>PerformanceObserver API</td></tr><tr><td><strong>CLS</strong></td><td>Cumulative Layout Shift</td><td>累计布局偏移</td><td>1. 设置图片尺寸<br>2. 预留广告位置<br>3. 使用transform动画</td><td>&lt;0.1</td><td>Layout Instability API</td></tr><tr><td><strong>TTI</strong></td><td>Time to Interactive</td><td>可交互时间</td><td>1. 减少JavaScript执行时间<br>2. 延迟加载非关键资源<br>3. 代码分割</td><td>&lt;3.9s</td><td>web-vitals库</td></tr><tr><td><strong>FID</strong></td><td>First Input Delay</td><td>首次输入延迟</td><td>1. 减少主线程阻塞<br>2. 使用Web Workers<br>3. 代码分割</td><td>&lt;100ms</td><td>PerformanceObserver API</td></tr><tr><td><strong>TBT</strong></td><td>Total Blocking Time</td><td>总阻塞时间</td><td>1. 优化长任务<br>2. 使用requestIdleCallback<br>3. 代码优化</td><td>&lt;300ms</td><td>Performance API</td></tr><tr><td><strong>FMP</strong></td><td>First Meaningful Paint</td><td>首次有效绘制</td><td>1. 服务端渲染<br>2. 预渲染<br>3. 骨架屏</td><td>&lt;2.0s</td><td>Chrome DevTools</td></tr></tbody></table><h3 id="8-2-全面性能监控实现"><a href="#8-2-全面性能监控实现" class="headerlink" title="8.2 全面性能监控实现"></a>8.2 全面性能监控实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 性能指标监控</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceMonitor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">metrics</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// FCP和LCP监控</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entryList.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">metrics</span>[entry.<span class="property">name</span>] = entry.<span class="property">startTime</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">sendToAnalytics</span>(&#123;</span><br><span class="line">          <span class="attr">metric</span>: entry.<span class="property">name</span>,</span><br><span class="line">          <span class="attr">value</span>: entry.<span class="property">startTime</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;paint&#x27;</span>, <span class="string">&#x27;largest-contentful-paint&#x27;</span>] &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CLS监控</span></span><br><span class="line">    <span class="keyword">let</span> clsValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entryList.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!entry.<span class="property">hadRecentInput</span>) &#123;</span><br><span class="line">          clsValue += entry.<span class="property">value</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">CLS</span> = clsValue;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;layout-shift&#x27;</span>] &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 长任务监控</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entryList.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">longTasks</span> = (<span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">longTasks</span> || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;longtask&#x27;</span>] &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义性能标记</span></span><br><span class="line">  <span class="title function_">mark</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    performance.<span class="title function_">mark</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 测量两个标记之间的时间</span></span><br><span class="line">  <span class="title function_">measure</span>(<span class="params">name, startMark, endMark</span>) &#123;</span><br><span class="line">    performance.<span class="title function_">measure</span>(name, startMark, endMark);</span><br><span class="line">    <span class="keyword">const</span> duration = performance.<span class="title function_">getEntriesByName</span>(name)[<span class="number">0</span>].<span class="property">duration</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">sendToAnalytics</span>(&#123;</span><br><span class="line">      <span class="attr">metric</span>: name,</span><br><span class="line">      <span class="attr">value</span>: duration</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送数据到分析服务</span></span><br><span class="line">  <span class="title function_">sendToAnalytics</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 实现数据上报逻辑</span></span><br><span class="line">    navigator.<span class="title function_">sendBeacon</span>(<span class="string">&#x27;/analytics&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 错误监控</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 错误上报</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;JavaScript Error:&#x27;</span>, event.<span class="property">error</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;unhandledrejection&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Promise错误上报</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Unhandled Promise Rejection:&#x27;</span>, event.<span class="property">reason</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 资源加载监控</span></span><br><span class="line"><span class="keyword">const</span> resourceObserver = <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> list.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">initiatorType</span> === <span class="string">&#x27;img&#x27;</span> || entry.<span class="property">initiatorType</span> === <span class="string">&#x27;script&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Resource <span class="subst">$&#123;entry.name&#125;</span> took <span class="subst">$&#123;entry.duration&#125;</span>ms to load`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">resourceObserver.<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;resource&#x27;</span>] &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 网络状态监控</span></span><br><span class="line">navigator.<span class="property">connection</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> connection = navigator.<span class="property">connection</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Network type changed: <span class="subst">$&#123;connection.effectiveType&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a id="9-进阶优化策略"></a></p><h2 id="9-进阶优化策略"><a href="#9-进阶优化策略" class="headerlink" title="9. 进阶优化策略"></a>9. 进阶优化策略</h2><h3 id="9-1-预渲染"><a href="#9-1-预渲染" class="headerlink" title="9.1 预渲染"></a>9.1 预渲染</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Next.js静态生成</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStaticProps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">props</span>: &#123; data &#125; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-边缘计算"><a href="#9-2-边缘计算" class="headerlink" title="9.2 边缘计算"></a>9.2 边缘计算</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cloudflare Workers示例</span></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">handleRequest</span>(event.<span class="property">request</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="comment">// 边缘节点处理逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="10-工具链推荐"></a></p><h2 id="10-工具链推荐"><a href="#10-工具链推荐" class="headerlink" title="10. 工具链推荐"></a>10. 工具链推荐</h2><h3 id="10-1-性能分析工具"><a href="#10-1-性能分析工具" class="headerlink" title="10.1 性能分析工具"></a>10.1 性能分析工具</h3><ul><li><strong>Lighthouse</strong>: 全面性能审计</li><li><strong>WebPageTest</strong>: 多地点测试</li><li><strong>Chrome DevTools</strong>: 性能面板</li></ul><h3 id="10-2-构建优化工具"><a href="#10-2-构建优化工具" class="headerlink" title="10.2 构建优化工具"></a>10.2 构建优化工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Vite进行构建</span></span><br><span class="line">npm create vite@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Brotli压缩</span></span><br><span class="line">npm install compression-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h2 id="最佳实践原则"><a href="#最佳实践原则" class="headerlink" title="最佳实践原则"></a>最佳实践原则</h2><ol><li><p><strong>性能预算制定</strong></p><ul><li>设置具体的性能指标目标</li><li>建立CI&#x2F;CD中的性能检查点</li><li>定期进行性能审计</li></ul></li><li><p><strong>监控与报警</strong></p><ul><li>实时监控关键性能指标</li><li>设置合理的报警阈值</li><li>建立性能劣化预警机制</li></ul></li><li><p><strong>优化策略分层</strong></p><ul><li>网络层：CDN、HTTP&#x2F;2、压缩</li><li>资源层：代码分割、图片优化</li><li>渲染层：CSS优化、DOM操作优化</li><li>运行时：JavaScript执行优化</li></ul></li><li><p><strong>持续优化流程</strong></p><ul><li>性能数据收集</li><li>问题分析定位</li><li>优化方案实施</li><li>效果评估复盘</li></ul></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>⚠️ 性能优化需要数据支撑，避免主观臆断<br>⚠️ 优化措施要考虑投入产出比<br>⚠️ 保持代码可维护性，避免过度优化<br>⚠️ 优先解决对用户体验影响最大的问题<br>⚠️ 定期回顾和更新优化策略</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web-性能优化完全指南&quot;&gt;&lt;a href=&quot;#Web-性能优化完全指南&quot; class=&quot;headerlink&quot; title=&quot;Web 性能优化完全指南&quot;&gt;&lt;/a&gt;Web 性能优化完全指南&lt;/h1&gt;&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="性能优化" scheme="https://aoayaoa.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Qiankun 微前端的使用</title>
    <link href="https://aoayaoa.github.io/2024/04/08/qiankun/"/>
    <id>https://aoayaoa.github.io/2024/04/08/qiankun/</id>
    <published>2024-04-07T16:00:00.000Z</published>
    <updated>2025-03-07T03:59:53.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qiankun-微前端企业级实践指南"><a href="#Qiankun-微前端企业级实践指南" class="headerlink" title="Qiankun 微前端企业级实践指南"></a>Qiankun 微前端企业级实践指南</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E4%B8%80%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE">基础配置</a></li><li><a href="#%E4%BA%8C%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88">通信方案</a></li><li><a href="#%E4%B8%89%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86">路由管理</a></li><li><a href="#%E5%9B%9B%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB">样式隔离</a></li><li><a href="#%E4%BA%94%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">性能优化</a></li><li><a href="#%E5%85%AD%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">问题解决方案</a></li><li><a href="#%E4%B8%83%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">最佳实践</a></li><li><a href="#%E5%85%AB%E5%AD%90%E5%BA%94%E7%94%A8%E9%97%B4%E8%B7%B3%E8%BD%AC%E4%B8%8E%E4%BC%A0%E5%80%BC">子应用间跳转与传值</a></li><li><a href="#%E4%B9%9D%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">常见问题解决方案</a></li><li><a href="#%E5%8D%81%E6%80%BB%E7%BB%93%E4%B8%8E%E5%B1%95%E6%9C%9B">总结与展望</a></li><li><a href="#%E5%8D%81%E4%B8%80%E5%AD%90%E5%BA%94%E7%94%A8%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5">子应用优化策略</a></li></ol><p><a id="一基础配置"></a></p><h2 id="一、基础配置"><a href="#一、基础配置" class="headerlink" title="一、基础配置"></a>一、基础配置</h2><h3 id="1-1-主应用初始化"><a href="#1-1-主应用初始化" class="headerlink" title="1.1 主应用初始化"></a>1.1 主应用初始化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main-app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> apps = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;sub-app&#x27;</span>,</span><br><span class="line"><span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span></span><br><span class="line">? <span class="string">&#x27;//localhost:7100&#x27;</span></span><br><span class="line">: <span class="string">&#x27;/sub-app/&#x27;</span>,</span><br><span class="line"><span class="attr">container</span>: <span class="string">&#x27;#subContainer&#x27;</span>,</span><br><span class="line"><span class="attr">activeRule</span>: <span class="string">&#x27;/sub&#x27;</span>,</span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line"><span class="attr">basePath</span>: <span class="string">&#x27;/main-app/sub&#x27;</span>,</span><br><span class="line"><span class="attr">mainToken</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">];</span><br><span class="line"><span class="title function_">registerMicroApps</span>(apps);</span><br><span class="line"><span class="title function_">start</span>(&#123;</span><br><span class="line"><span class="attr">sandbox</span>: &#123;</span><br><span class="line"><span class="attr">strictStyleIsolation</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">experimentalStyleIsolation</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">speedy</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">prefetch</span>: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-2-子应用接入规范"><a href="#1-2-子应用接入规范" class="headerlink" title="1.2 子应用接入规范"></a>1.2 子应用接入规范</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sub-app.js</span></span><br><span class="line"><span class="keyword">let</span> vueInstance = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[SubApp] Bootstrap&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[SubApp] Mount&#x27;</span>, props);</span><br><span class="line">vueInstance = <span class="title function_">createApp</span>(&#123;</span><br><span class="line"><span class="attr">router</span>: <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>: <span class="title function_">createWebHistory</span>(props.<span class="property">basePath</span>),</span><br><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/page1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Page1</span> &#125;,</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/page2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Page2</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line">&#125;).<span class="title function_">mount</span>(props.<span class="property">container</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[SubApp] Unmount&#x27;</span>);</span><br><span class="line">vueInstance.$destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="二通信方案"></a></p><h2 id="二、通信方案"><a href="#二、通信方案" class="headerlink" title="二、通信方案"></a>二、通信方案</h2><h3 id="2-1-全局状态管理"><a href="#2-1-全局状态管理" class="headerlink" title="2.1 全局状态管理"></a>2.1 全局状态管理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主应用状态初始化</span></span><br><span class="line"><span class="keyword">const</span> actions = <span class="title function_">initGlobalState</span>(&#123;</span><br><span class="line"><span class="attr">user</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>)),</span><br><span class="line"><span class="attr">token</span>: &#123;</span><br><span class="line"><span class="attr">value</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>),</span><br><span class="line"><span class="attr">expire</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() + <span class="number">3600000</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">systemTime</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 子应用状态同步</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props</span>) &#123;</span><br><span class="line"><span class="comment">// 初始化同步</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, props.<span class="title function_">getGlobalState</span>().<span class="property">token</span>.<span class="property">value</span>);</span><br><span class="line"><span class="comment">// 动态更新</span></span><br><span class="line">props.<span class="title function_">onGlobalStateChange</span>(<span class="function">(<span class="params">state, prev</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">token</span>.<span class="property">expire</span> !== prev.<span class="property">token</span>.<span class="property">expire</span>) &#123;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token_expire&#x27;</span>, state.<span class="property">token</span>.<span class="property">expire</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-跨应用事件总线"><a href="#2-2-跨应用事件总线" class="headerlink" title="2.2 跨应用事件总线"></a>2.2 跨应用事件总线</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event-bus.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrossAppEvent</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">events</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">on</span>(<span class="params">eventName, callback</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> handlers = <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">get</span>(eventName) || [];</span><br><span class="line">handlers.<span class="title function_">push</span>(callback);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">set</span>(eventName, handlers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">emit</span>(<span class="params">eventName, payload</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> handlers = <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">get</span>(eventName) || [];</span><br><span class="line">handlers.<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(payload));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主应用初始化</span></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">CrossAppEvent</span>();</span><br><span class="line"><span class="comment">// 子应用A发送事件</span></span><br><span class="line">eventBus.<span class="title function_">emit</span>(<span class="string">&#x27;ORDER_CREATED&#x27;</span>, &#123; <span class="attr">orderId</span>: <span class="number">12345</span> &#125;);</span><br><span class="line"><span class="comment">// 子应用B监听事件</span></span><br><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&#x27;ORDER_CREATED&#x27;</span>, <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到订单创建事件:&#x27;</span>, payload);</span><br><span class="line"><span class="title function_">refreshOrderList</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a id="三路由管理"></a></p><h2 id="三、路由管理"><a href="#三、路由管理" class="headerlink" title="三、路由管理"></a>三、路由管理</h2><h3 id="3-1-路由配置规范"><a href="#3-1-路由配置规范" class="headerlink" title="3.1 路由配置规范"></a>3.1 路由配置规范</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子应用路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line"><span class="comment">// 验证路由合法性</span></span><br><span class="line"><span class="keyword">const</span> validPaths = [<span class="string">&#x27;/page1&#x27;</span>, <span class="string">&#x27;/page2&#x27;</span>, <span class="string">&#x27;/detail&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> isValid = validPaths.<span class="title function_">some</span>(<span class="function"><span class="params">path</span> =&gt;</span> to.<span class="property">path</span>.<span class="title function_">startsWith</span>(path));</span><br><span class="line"><span class="comment">// 验证Token有效性</span></span><br><span class="line"><span class="keyword">const</span> isAuthenticated = <span class="title function_">checkToken</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>));</span><br><span class="line"><span class="keyword">if</span> (!isValid || !isAuthenticated) &#123;</span><br><span class="line"><span class="title function_">next</span>(<span class="string">&#x27;/error&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主应用路由跳转封装</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">microAppNavigate</span> = (<span class="params">appName, path</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> appConfig = qiankunApps.<span class="title function_">find</span>(<span class="function"><span class="params">app</span> =&gt;</span> app.<span class="property">name</span> === appName);</span><br><span class="line"><span class="keyword">if</span> (appConfig) &#123;</span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;appConfig.activeRule&#125;</span><span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`未找到应用 <span class="subst">$&#123;appName&#125;</span> 的配置`</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="title function_">microAppNavigate</span>(<span class="string">&#x27;sub-app&#x27;</span>, <span class="string">&#x27;/page1&#x27;</span>);</span><br></pre></td></tr></table></figure><p><a id="四样式隔离"></a></p><h2 id="四、样式隔离"><a href="#四、样式隔离" class="headerlink" title="四、样式隔离"></a>四、样式隔离</h2><h3 id="4-1-组件库解决方案"><a href="#4-1-组件库解决方案" class="headerlink" title="4.1 组件库解决方案"></a>4.1 组件库解决方案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Element UI 组件 --&gt;</span><br><span class="line">&lt;el-date-picker</span><br><span class="line">:popper-append-to-body=&quot;false&quot;</span><br><span class="line">popper-class=&quot;micro-app-picker&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;!-- Ant Design 组件 --&gt;</span><br><span class="line">&lt;a-select</span><br><span class="line">:getPopupContainer=&quot;trigger =&gt; trigger.parentElement&quot;</span><br><span class="line">popupClassName=&quot;micro-app-select&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-全局样式策略"><a href="#4-2-全局样式策略" class="headerlink" title="4.2 全局样式策略"></a>4.2 全局样式策略</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 微应用容器样式隔离 */</span></span><br><span class="line"><span class="selector-id">#sub-container</span> &#123;</span><br><span class="line"><span class="attribute">all</span>: initial; <span class="comment">/* 重置继承样式 */</span></span><br><span class="line"><span class="comment">/* 限制样式作用域 */</span></span><br><span class="line">* &#123;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">font-family</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 弹出层样式重置 */</span></span><br><span class="line"><span class="selector-class">.micro-app-picker</span> &#123;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">1000</span> <span class="meta">!important</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute <span class="meta">!important</span>;</span><br><span class="line"><span class="selector-class">.el-picker__popper</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="五性能优化"></a></p><h2 id="五、性能优化"><a href="#五、性能优化" class="headerlink" title="五、性能优化"></a>五、性能优化</h2><h3 id="5-1-资源加载策略"><a href="#5-1-资源加载策略" class="headerlink" title="5.1 资源加载策略"></a>5.1 资源加载策略</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需加载配置</span></span><br><span class="line"><span class="title function_">start</span>(&#123;</span><br><span class="line"><span class="attr">prefetch</span>: <span class="function">(<span class="params">apps</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> hotApps = [<span class="string">&#x27;dashboard&#x27;</span>, <span class="string">&#x27;monitor&#x27;</span>];</span><br><span class="line"><span class="keyword">return</span> apps.<span class="title function_">filter</span>(<span class="function"><span class="params">app</span> =&gt;</span> hotApps.<span class="title function_">includes</span>(app.<span class="property">name</span>));</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">sandbox</span>: &#123;</span><br><span class="line"><span class="attr">experimentalStyleIsolation</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-2-内存优化方案"><a href="#5-2-内存优化方案" class="headerlink" title="5.2 内存优化方案"></a>5.2 内存优化方案</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子应用卸载处理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 清理事件监听</span></span><br><span class="line">eventBus.<span class="title function_">offAll</span>();</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line">vueInstance.$destroy();</span><br><span class="line">vueInstance = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 清理全局状态</span></span><br><span class="line">actions.<span class="title function_">offGlobalStateChange</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="六问题解决方案"></a></p><h2 id="六、问题解决方案"><a href="#六、问题解决方案" class="headerlink" title="六、问题解决方案"></a>六、问题解决方案</h2><h3 id="6-1-常见问题速查表"><a href="#6-1-常见问题速查表" class="headerlink" title="6.1 常见问题速查表"></a>6.1 常见问题速查表</h3><table><thead><tr><th>问题现象</th><th>解决方案</th><th>相关文件</th></tr></thead><tbody><tr><td>样式污染</td><td>严格样式隔离 + 组件级配置</td><td><code>src/styles/global.css</code></td></tr><tr><td>路由跳转失效</td><td>动态basePath + 路由守卫增强</td><td><code>src/router/index.js</code></td></tr><tr><td>Token不同步</td><td>全局状态管理 + 定时刷新</td><td><code>src/utils/auth.js</code></td></tr><tr><td>内存泄漏</td><td>严格卸载处理 + 内存分析工具</td><td><code>src/main.js</code></td></tr></tbody></table><h3 id="6-2-错误监控方案"><a href="#6-2-错误监控方案" class="headerlink" title="6.2 错误监控方案"></a>6.2 错误监控方案</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局错误处理</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">trackError</span>(&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;RUNTIME_ERROR&#x27;</span>,</span><br><span class="line"><span class="attr">message</span>: event.<span class="property">message</span>,</span><br><span class="line"><span class="attr">stack</span>: event.<span class="property">error</span>.<span class="property">stack</span>,</span><br><span class="line"><span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Qiankun错误捕获</span></span><br><span class="line"><span class="title function_">start</span>(&#123;</span><br><span class="line"><span class="attr">onError</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;微应用加载失败:&#x27;</span>, err);</span><br><span class="line"><span class="title function_">showErrorNotification</span>(&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;系统加载失败&#x27;</span>,</span><br><span class="line"><span class="attr">content</span>: <span class="string">&#x27;请检查网络连接后重试&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a id="七最佳实践"></a></p><h2 id="七、最佳实践"><a href="#七、最佳实践" class="headerlink" title="七、最佳实践"></a>七、最佳实践</h2><h3 id="7-1-架构规范"><a href="#7-1-架构规范" class="headerlink" title="7.1 架构规范"></a>7.1 架构规范</h3><pre><code class="highlight mermaid">graph TDA[主应用] --&gt; B(用户中心)A --&gt; C(订单系统)A --&gt; D(监控平台)B --&gt; E(权限管理)C --&gt; F(支付模块)D --&gt; G(日志分析)F --&gt; H(第三方支付)G --&gt; I(数据分析)</code></pre><h3 id="7-2-性能指标"><a href="#7-2-性能指标" class="headerlink" title="7.2 性能指标"></a>7.2 性能指标</h3><table><thead><tr><th>指标</th><th>标准值</th><th>监控工具</th><th>报警阈值</th></tr></thead><tbody><tr><td>加载时间</td><td>&lt;1.5s</td><td>Lighthouse</td><td>&gt;3s</td></tr><tr><td>内存占用</td><td>&lt;200MB</td><td>Chrome DevTools</td><td>&gt;300MB</td></tr><tr><td>FCP</td><td>&lt;1.2s</td><td>Web Vitals</td><td>&gt;2s</td></tr><tr><td>API成功率</td><td>&gt;99.9%</td><td>Prometheus</td><td>&lt;99%</td></tr></tbody></table><h3 id="7-3-未来演进"><a href="#7-3-未来演进" class="headerlink" title="7.3 未来演进"></a>7.3 未来演进</h3><ol><li><strong>动态模块加载</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态加载示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadModule</span> = <span class="keyword">async</span> (<span class="params">moduleName</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; bootstrap, mount, unmount &#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`./modules/<span class="subst">$&#123;moduleName&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">return</span> &#123; bootstrap, mount, unmount &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;dynamic-module&#x27;</span>,</span><br><span class="line"><span class="attr">entry</span>: <span class="function">() =&gt;</span> <span class="title function_">loadModule</span>(<span class="string">&#x27;analytics&#x27;</span>),</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>微前端DevTools</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发工具集成</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;qiankun-devtools&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; init &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">init</span>(&#123;</span><br><span class="line"><span class="attr">traceDeps</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">logComm</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">perfMonitor</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="八子应用间跳转与传值"></a></p><h2 id="八、子应用间跳转与传值"><a href="#八、子应用间跳转与传值" class="headerlink" title="八、子应用间跳转与传值"></a>八、子应用间跳转与传值</h2><h3 id="8-1-子应用间跳转方案"><a href="#8-1-子应用间跳转方案" class="headerlink" title="8.1 子应用间跳转方案"></a>8.1 子应用间跳转方案</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主应用中定义统一跳转服务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppNavigationService</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">apps, router</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">apps</span> = apps;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">router</span> = router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到指定应用的指定路径</span></span><br><span class="line"><span class="title function_">navigateTo</span>(<span class="params">appName, path, query = &#123;&#125;</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> app = <span class="variable language_">this</span>.<span class="property">apps</span>.<span class="title function_">find</span>(<span class="function"><span class="params">a</span> =&gt;</span> a.<span class="property">name</span> === appName);</span><br><span class="line"><span class="keyword">if</span> (!app) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`应用 <span class="subst">$&#123;appName&#125;</span> 不存在`</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建完整路径</span></span><br><span class="line"><span class="keyword">const</span> queryString = <span class="title class_">Object</span>.<span class="title function_">keys</span>(query).<span class="property">length</span></span><br><span class="line">? <span class="string">`?<span class="subst">$&#123;<span class="keyword">new</span> URLSearchParams(query)&#125;</span>`</span></span><br><span class="line">: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> fullPath = <span class="string">`<span class="subst">$&#123;app.activeRule&#125;</span><span class="subst">$&#123;path&#125;</span><span class="subst">$&#123;queryString&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">push</span>(fullPath);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化导航服务</span></span><br><span class="line"><span class="keyword">const</span> navigationService = <span class="keyword">new</span> <span class="title class_">AppNavigationService</span>(apps, router);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子应用中注入导航服务</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props</span>) &#123;</span><br><span class="line">props.<span class="property">navigationService</span> = navigationService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子应用中使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">jumpToAnotherApp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">props.<span class="property">navigationService</span>.<span class="title function_">navigateTo</span>(<span class="string">&#x27;another-app&#x27;</span>, <span class="string">&#x27;/dashboard&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="8-2-子应用间数据传递"><a href="#8-2-子应用间数据传递" class="headerlink" title="8.2 子应用间数据传递"></a>8.2 子应用间数据传递</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案一：通过全局状态</span></span><br><span class="line"><span class="comment">// 子应用A中设置数据</span></span><br><span class="line">props.<span class="title function_">setGlobalState</span>(&#123;</span><br><span class="line"><span class="attr">transferData</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;ORDER_DATA&#x27;</span>,</span><br><span class="line"><span class="attr">payload</span>: &#123; <span class="attr">orderId</span>: <span class="number">12345</span> &#125;,</span><br><span class="line"><span class="attr">targetApp</span>: <span class="string">&#x27;another-app&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子应用B中接收数据</span></span><br><span class="line">props.<span class="title function_">onGlobalStateChange</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">transferData</span> &amp;&amp; state.<span class="property">transferData</span>.<span class="property">targetApp</span> === <span class="string">&#x27;another-app&#x27;</span>) &#123;</span><br><span class="line"><span class="title function_">handleReceivedData</span>(state.<span class="property">transferData</span>.<span class="property">payload</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案二：通过URL参数</span></span><br><span class="line"><span class="comment">// 子应用A跳转时携带数据</span></span><br><span class="line">props.<span class="property">navigationService</span>.<span class="title function_">navigateTo</span>(<span class="string">&#x27;another-app&#x27;</span>, <span class="string">&#x27;/detail&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">orderId</span>: <span class="number">12345</span>,</span><br><span class="line"><span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子应用B接收URL参数</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> orderId = route.<span class="property">query</span>.<span class="property">orderId</span>;</span><br></pre></td></tr></table></figure><h3 id="8-3-数据持久化策略"><a href="#8-3-数据持久化策略" class="headerlink" title="8.3 数据持久化策略"></a>8.3 数据持久化策略</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用localStorage与sessionStorage</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">saveAppState</span> = (<span class="params">appName, state</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">`MICRO_APP_<span class="subst">$&#123;appName&#125;</span>_STATE`</span>;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line"><span class="attr">data</span>: state,</span><br><span class="line"><span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">&#125;));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getAppState</span> = (<span class="params">appName</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">`MICRO_APP_<span class="subst">$&#123;appName&#125;</span>_STATE`</span>;</span><br><span class="line"><span class="keyword">const</span> stateStr = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line"><span class="keyword">if</span> (!stateStr) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">const</span> state = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(stateStr);</span><br><span class="line"><span class="comment">// 检查数据是否过期（30分钟）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() - state.<span class="property">timestamp</span> &gt; <span class="number">30</span> * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">data</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a id="九常见问题解决方案"></a></p><h2 id="九、常见问题解决方案"><a href="#九、常见问题解决方案" class="headerlink" title="九、常见问题解决方案"></a>九、常见问题解决方案</h2><h3 id="9-1-子应用加载主应用路由的问题"><a href="#9-1-子应用加载主应用路由的问题" class="headerlink" title="9.1 子应用加载主应用路由的问题"></a>9.1 子应用加载主应用路由的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题：子应用错误加载了主应用的路由组件</span></span><br><span class="line"><span class="comment">// 原因：路由前缀配置不正确，导致路径匹配混乱</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案一：严格的路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 检测是否在qiankun环境中</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line"><span class="comment">// 检测当前路径是否合法</span></span><br><span class="line"><span class="keyword">const</span> appPrefix = <span class="string">&#x27;/sub-app&#x27;</span>; <span class="comment">// 子应用路径前缀</span></span><br><span class="line"><span class="keyword">if</span> (!to.<span class="property">path</span>.<span class="title function_">startsWith</span>(appPrefix)) &#123;</span><br><span class="line"><span class="comment">// 路径不合法，重定向到子应用首页</span></span><br><span class="line"><span class="title function_">next</span>(<span class="string">`<span class="subst">$&#123;appPrefix&#125;</span>/home`</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案二：修正路由base配置</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>: <span class="title function_">createWebHistory</span>(</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span></span><br><span class="line">? <span class="variable language_">window</span>.<span class="property">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span> <span class="comment">// 使用qiankun注入的路径</span></span><br><span class="line">: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">),</span><br><span class="line"><span class="attr">routes</span>: [...]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-2-Token时间不统一问题"><a href="#9-2-Token时间不统一问题" class="headerlink" title="9.2 Token时间不统一问题"></a>9.2 Token时间不统一问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题：多个子应用的token过期时间不一致</span></span><br><span class="line"><span class="comment">// 解决方案：主应用维护统一的token刷新机制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主应用中定义token管理服务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TokenService</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tokenInfo</span> = &#123;</span><br><span class="line"><span class="attr">value</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>),</span><br><span class="line"><span class="attr">expire</span>: <span class="built_in">parseInt</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token_expire&#x27;</span>) || <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时检查token是否即将过期</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">checkTokenExpiration</span>(), <span class="number">60000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查token是否过期</span></span><br><span class="line"><span class="title function_">checkTokenExpiration</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"><span class="keyword">const</span> timeToExpire = <span class="variable language_">this</span>.<span class="property">tokenInfo</span>.<span class="property">expire</span> - now;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果token将在15分钟内过期，刷新token</span></span><br><span class="line"><span class="keyword">if</span> (timeToExpire &gt; <span class="number">0</span> &amp;&amp; timeToExpire &lt; <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">refreshToken</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新token</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">refreshToken</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/refresh-token&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">this</span>.tokenInfo.value&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line"><span class="keyword">if</span> (data.<span class="property">success</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">updateToken</span>(data.<span class="property">token</span>, data.<span class="property">expire</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;刷新token失败:&#x27;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新token</span></span><br><span class="line"><span class="title function_">updateToken</span>(<span class="params">token, expire</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tokenInfo</span> = &#123; <span class="attr">value</span>: token, expire &#125;;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, token);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token_expire&#x27;</span>, expire.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知所有应用token已更新</span></span><br><span class="line">actions.<span class="title function_">setGlobalState</span>(&#123;</span><br><span class="line"><span class="attr">tokenUpdated</span>: &#123;</span><br><span class="line"><span class="attr">value</span>: token,</span><br><span class="line"><span class="attr">expire</span>: expire,</span><br><span class="line"><span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化token服务</span></span><br><span class="line"><span class="keyword">const</span> tokenService = <span class="keyword">new</span> <span class="title class_">TokenService</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子应用中监听token更新</span></span><br><span class="line">props.<span class="title function_">onGlobalStateChange</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">tokenUpdated</span> &amp;&amp; state.<span class="property">tokenUpdated</span>.<span class="property">timestamp</span>) &#123;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, state.<span class="property">tokenUpdated</span>.<span class="property">value</span>);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token_expire&#x27;</span>, state.<span class="property">tokenUpdated</span>.<span class="property">expire</span>.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><a id="十总结与展望"></a></p><h2 id="十、总结与展望"><a href="#十、总结与展望" class="headerlink" title="十、总结与展望"></a>十、总结与展望</h2><h3 id="10-1-Qiankun技术优势"><a href="#10-1-Qiankun技术优势" class="headerlink" title="10.1 Qiankun技术优势"></a>10.1 Qiankun技术优势</h3><ol><li><strong>技术栈无关</strong> - 支持不同前端框架混合使用</li><li><strong>独立开发部署</strong> - 子应用可独立维护迭代</li><li><strong>沙箱隔离</strong> - 确保应用间不会互相干扰</li><li><strong>资源预加载</strong> - 提升多应用加载性能</li></ol><h3 id="10-2-架构最佳实践"><a href="#10-2-架构最佳实践" class="headerlink" title="10.2 架构最佳实践"></a>10.2 架构最佳实践</h3><ol><li><strong>标准化路由配置</strong> - 统一应用间路由规则</li><li><strong>统一认证授权</strong> - 一处登录，处处生效</li><li><strong>性能优先策略</strong> - 按需加载、预加载结合</li><li><strong>完善的监控体系</strong> - 及时发现并解决问题</li></ol><h3 id="10-3-未来发展方向"><a href="#10-3-未来发展方向" class="headerlink" title="10.3 未来发展方向"></a>10.3 未来发展方向</h3><ol><li><strong>微模块化</strong> - 进一步细化应用颗粒度</li><li><strong>AI辅助加载</strong> - 基于用户行为智能预测需要加载的应用</li><li><strong>更强大的隔离</strong> - 隔离更彻底的同时保持更高效的性能</li></ol><p><a id="十一子应用优化策略"></a></p><h2 id="十一、子应用优化策略（增强版）"><a href="#十一、子应用优化策略（增强版）" class="headerlink" title="十一、子应用优化策略（增强版）"></a>十一、子应用优化策略（增强版）</h2><h3 id="11-1-智能预加载策略"><a href="#11-1-智能预加载策略" class="headerlink" title="11.1 智能预加载策略"></a>11.1 智能预加载策略</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主应用智能预加载控制器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PreloadController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">usageStats</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observer</span> = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="variable language_">this</span>.<span class="property">handleIntersection</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 记录应用使用频率</span></span><br><span class="line">  <span class="title function_">trackAppUsage</span>(<span class="params">appName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="variable language_">this</span>.<span class="property">usageStats</span>.<span class="title function_">get</span>(appName) || <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">usageStats</span>.<span class="title function_">set</span>(appName, count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 基于可视区域预加载</span></span><br><span class="line">  <span class="title function_">handleIntersection</span>(<span class="params">entries</span>) &#123;</span><br><span class="line">    entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> appName = entry.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">appName</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">preloadApp</span>(appName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 智能预加载算法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">preloadApp</span>(<span class="params">appName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> appConfig = qiankunApps.<span class="title function_">find</span>(<span class="function"><span class="params">app</span> =&gt;</span> app.<span class="property">name</span> === appName);</span><br><span class="line">    <span class="keyword">if</span> (!appConfig || appConfig.<span class="property">preloaded</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据使用频率决定预加载优先级</span></span><br><span class="line">    <span class="keyword">const</span> priority = <span class="variable language_">this</span>.<span class="property">usageStats</span>.<span class="title function_">get</span>(appName) &gt; <span class="number">5</span> ? <span class="string">&#x27;high&#x27;</span> : <span class="string">&#x27;low&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 requestIdleCallback 优化性能</span></span><br><span class="line">    <span class="keyword">if</span> (priority === <span class="string">&#x27;high&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">loadMicroApp</span>(appConfig);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">requestIdleCallback</span>(<span class="function">() =&gt;</span> <span class="title function_">loadMicroApp</span>(appConfig));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    appConfig.<span class="property">preloaded</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册可观察元素</span></span><br><span class="line">  <span class="title function_">registerTrigger</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observer</span>.<span class="title function_">observe</span>(element);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> preloader = <span class="keyword">new</span> <span class="title class_">PreloadController</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[data-app-trigger]&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">  preloader.<span class="title function_">registerTrigger</span>(el);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="11-2-高级加载状态管理（支持SLA监控）"><a href="#11-2-高级加载状态管理（支持SLA监控）" class="headerlink" title="11.2 高级加载状态管理（支持SLA监控）"></a>11.2 高级加载状态管理（支持SLA监控）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强版加载状态管理器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdvancedLoadingManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">states</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">slaThresholds</span> = &#123;</span><br><span class="line">      <span class="attr">loadTime</span>: <span class="number">3000</span>,  <span class="comment">// 3秒加载阈值</span></span><br><span class="line">      <span class="attr">successRate</span>: <span class="number">0.95</span> <span class="comment">// 95%成功率</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 记录加载指标</span></span><br><span class="line">  <span class="title function_">recordMetric</span>(<span class="params">appName, metric</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> appState = <span class="variable language_">this</span>.<span class="property">states</span>.<span class="title function_">get</span>(appName) || &#123;</span><br><span class="line">      <span class="attr">loadCount</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">successCount</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">totalLoadTime</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">errors</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    appState.<span class="property">loadCount</span>++;</span><br><span class="line">    appState.<span class="property">totalLoadTime</span> += metric.<span class="property">duration</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (metric.<span class="property">success</span>) &#123;</span><br><span class="line">      appState.<span class="property">successCount</span>++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      appState.<span class="property">errors</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">        <span class="attr">error</span>: metric.<span class="property">error</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">states</span>.<span class="title function_">set</span>(appName, appState);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">checkSLA</span>(appName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查SLA合规性</span></span><br><span class="line">  <span class="title function_">checkSLA</span>(<span class="params">appName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="variable language_">this</span>.<span class="property">states</span>.<span class="title function_">get</span>(appName);</span><br><span class="line">    <span class="keyword">const</span> avgLoadTime = state.<span class="property">totalLoadTime</span> / state.<span class="property">loadCount</span>;</span><br><span class="line">    <span class="keyword">const</span> successRate = state.<span class="property">successCount</span> / state.<span class="property">loadCount</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (avgLoadTime &gt; <span class="variable language_">this</span>.<span class="property">slaThresholds</span>.<span class="property">loadTime</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`[SLA告警] <span class="subst">$&#123;appName&#125;</span> 平均加载时间 <span class="subst">$&#123;avgLoadTime&#125;</span>ms`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (successRate &lt; <span class="variable language_">this</span>.<span class="property">slaThresholds</span>.<span class="property">successRate</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`[SLA违规] <span class="subst">$&#123;appName&#125;</span> 成功率 <span class="subst">$&#123;successRate * <span class="number">100</span>&#125;</span>%`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成性能报告</span></span><br><span class="line">  <span class="title function_">generateReport</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">this</span>.<span class="property">states</span>.<span class="title function_">entries</span>()).<span class="title function_">map</span>(<span class="function">(<span class="params">[name, state]</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">app</span>: name,</span><br><span class="line">      <span class="attr">avgLoadTime</span>: state.<span class="property">totalLoadTime</span> / state.<span class="property">loadCount</span>,</span><br><span class="line">      <span class="attr">successRate</span>: state.<span class="property">successCount</span> / state.<span class="property">loadCount</span>,</span><br><span class="line">      <span class="attr">errorCount</span>: state.<span class="property">errors</span>.<span class="property">length</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集成到微应用配置</span></span><br><span class="line"><span class="keyword">const</span> loadingManager = <span class="keyword">new</span> <span class="title class_">AdvancedLoadingManager</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">registerMicroApps</span>(apps.<span class="title function_">map</span>(<span class="function"><span class="params">app</span> =&gt;</span> (&#123;</span><br><span class="line">  ...app,</span><br><span class="line">  <span class="title function_">loader</span>(<span class="params">loading</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">let</span> metric = &#123; <span class="attr">duration</span>: <span class="number">0</span>, <span class="attr">success</span>: <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!loading) &#123;</span><br><span class="line">      metric.<span class="property">duration</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime;</span><br><span class="line">      metric.<span class="property">success</span> = <span class="literal">true</span>;</span><br><span class="line">      loadingManager.<span class="title function_">recordMetric</span>(app.<span class="property">name</span>, metric);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">errorHandler</span> = (<span class="params">err</span>) =&gt; &#123;</span><br><span class="line">        metric.<span class="property">duration</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime;</span><br><span class="line">        metric.<span class="property">error</span> = err;</span><br><span class="line">        loadingManager.<span class="title function_">recordMetric</span>(app.<span class="property">name</span>, metric);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, errorHandler);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)));</span><br></pre></td></tr></table></figure><h3 id="11-3-动态资源调配（根据网络状况）"><a href="#11-3-动态资源调配（根据网络状况）" class="headerlink" title="11.3 动态资源调配（根据网络状况）"></a>11.3 动态资源调配（根据网络状况）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网络感知型资源加载</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkAwareLoader</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">connection</span> = navigator.<span class="property">connection</span> || &#123;</span><br><span class="line">      <span class="attr">effectiveType</span>: <span class="string">&#x27;4g&#x27;</span>,</span><br><span class="line">      <span class="attr">saveData</span>: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">presets</span> = &#123;</span><br><span class="line">      <span class="string">&#x27;4g&#x27;</span>: &#123; <span class="attr">prefetch</span>: <span class="string">&#x27;all&#x27;</span>, <span class="attr">sandbox</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      <span class="string">&#x27;3g&#x27;</span>: &#123; <span class="attr">prefetch</span>: <span class="string">&#x27;current&#x27;</span>, <span class="attr">sandbox</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      <span class="string">&#x27;2g&#x27;</span>: &#123; <span class="attr">prefetch</span>: <span class="string">&#x27;none&#x27;</span>, <span class="attr">sandbox</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化加载策略</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateStrategy</span>();</span><br><span class="line">    navigator.<span class="property">connection</span>?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="variable language_">this</span>.<span class="property">updateStrategy</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新加载策略</span></span><br><span class="line">  updateStrategy = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; effectiveType, saveData &#125; = <span class="variable language_">this</span>.<span class="property">connection</span>;</span><br><span class="line">    <span class="keyword">const</span> strategy = saveData ? <span class="variable language_">this</span>.<span class="property">presets</span>[<span class="string">&#x27;2g&#x27;</span>] : <span class="variable language_">this</span>.<span class="property">presets</span>[effectiveType];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(&#123;</span><br><span class="line">      <span class="attr">prefetch</span>: strategy.<span class="property">prefetch</span>,</span><br><span class="line">      <span class="attr">sandbox</span>: &#123;</span><br><span class="line">        <span class="attr">strictStyleIsolation</span>: strategy.<span class="property">sandbox</span>,</span><br><span class="line">        <span class="attr">experimentalStyleIsolation</span>: strategy.<span class="property">sandbox</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 动态调整资源质量</span></span><br><span class="line">  <span class="title function_">adjustResourceQuality</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> imgQuality = <span class="variable language_">this</span>.<span class="property">connection</span>.<span class="property">saveData</span> ? <span class="string">&#x27;low&#x27;</span> : <span class="string">&#x27;high&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(</span><br><span class="line">      <span class="string">&#x27;--image-quality&#x27;</span>,</span><br><span class="line">      <span class="string">`url(?quality=<span class="subst">$&#123;imgQuality&#125;</span>)`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> networkLoader = <span class="keyword">new</span> <span class="title class_">NetworkAwareLoader</span>();</span><br><span class="line">networkLoader.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><h3 id="11-4-安全增强策略"><a href="#11-4-安全增强策略" class="headerlink" title="11.4 安全增强策略"></a>11.4 安全增强策略</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子应用安全沙箱增强</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createSecureSandbox</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="variable language_">window</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">      <span class="comment">// 拦截危险API</span></span><br><span class="line">      <span class="keyword">if</span> ([<span class="string">&#x27;localStorage&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;Function&#x27;</span>].<span class="title function_">includes</span>(prop)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`禁止访问 <span class="subst">$&#123;prop&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> target[prop];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, prop, value</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (prop === <span class="string">&#x27;document&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;禁止修改document对象&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      target[prop] = value;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;安全沙箱启动&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">mount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">__SANDBOX_PROXY__</span> = proxy;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">window</span>.<span class="property">__SANDBOX_PROXY__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集成到启动配置</span></span><br><span class="line"><span class="title function_">start</span>(&#123;</span><br><span class="line">  <span class="attr">sandbox</span>: <span class="title function_">createSecureSandbox</span>()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="11-5-性能追踪与可视化"><a href="#11-5-性能追踪与可视化" class="headerlink" title="11.5 性能追踪与可视化"></a>11.5 性能追踪与可视化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 性能追踪装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tracePerformance</span>(<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> original = descriptor.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">  descriptor.<span class="property">value</span> = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> start = performance.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> original.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    <span class="keyword">const</span> duration = performance.<span class="title function_">now</span>() - start;</span><br><span class="line"></span><br><span class="line">    performanceTrack.<span class="title function_">addEntry</span>(&#123;</span><br><span class="line">      name,</span><br><span class="line">      duration,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">      <span class="attr">args</span>: args.<span class="property">length</span> &gt; <span class="number">0</span> ? args : <span class="literal">undefined</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在关键生命周期使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppController</span> &#123;</span><br><span class="line">  @tracePerformance</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loadApp</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loadMicroApp</span>(config);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @tracePerformance</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">unloadApp</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="variable language_">this</span>.<span class="property">apps</span>.<span class="title function_">get</span>(name);</span><br><span class="line">    <span class="keyword">return</span> app.<span class="title function_">unmount</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 性能数据可视化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderPerformanceDashboard</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> metrics = &#123;</span><br><span class="line">    <span class="attr">loadTime</span>: data.<span class="title function_">filter</span>(<span class="function"><span class="params">d</span> =&gt;</span> d.<span class="property">name</span> === <span class="string">&#x27;loadApp&#x27;</span>),</span><br><span class="line">    <span class="attr">unloadTime</span>: data.<span class="title function_">filter</span>(<span class="function"><span class="params">d</span> =&gt;</span> d.<span class="property">name</span> === <span class="string">&#x27;unloadApp&#x27;</span>)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用图表库渲染可视化视图</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Chart</span>(<span class="string">&#x27;#load-times&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">labels</span>: metrics.<span class="property">loadTime</span>.<span class="title function_">map</span>(<span class="function"><span class="params">d</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Date</span>(d.<span class="property">timestamp</span>).<span class="title function_">toLocaleTimeString</span>()),</span><br><span class="line">      <span class="attr">datasets</span>: [&#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;应用加载时间 (ms)&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: metrics.<span class="property">loadTime</span>.<span class="title function_">map</span>(<span class="function"><span class="params">d</span> =&gt;</span> d.<span class="property">duration</span>),</span><br><span class="line">        <span class="attr">borderColor</span>: <span class="string">&#x27;#4CAF50&#x27;</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><blockquote><p>本次优化重点增强以下方面：</p><ol><li><strong>智能预加载</strong> - 基于用户行为和可视区域预测加载</li><li><strong>SLA监控</strong> - 实时跟踪性能指标并预警</li><li><strong>网络适配</strong> - 根据网络状况动态调整策略</li><li><strong>安全增强</strong> - 严格限制敏感API访问</li><li><strong>性能可视化</strong> - 提供直观的性能分析视图</li></ol></blockquote><p>[🔗 性能监控示例] | [📊 可视化模板] | [🛡️ 安全审计指南]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Qiankun-微前端企业级实践指南&quot;&gt;&lt;a href=&quot;#Qiankun-微前端企业级实践指南&quot; class=&quot;headerlink&quot; title=&quot;Qiankun 微前端企业级实践指南&quot;&gt;&lt;/a&gt;Qiankun 微前端企业级实践指南&lt;/h1&gt;&lt;h2 id=&quot;目</summary>
      
    
    
    
    <category term="教程" scheme="https://aoayaoa.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="入门" scheme="https://aoayaoa.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
    <category term="Hexo" scheme="https://aoayaoa.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>vite</title>
    <link href="https://aoayaoa.github.io/2024/02/01/vite/"/>
    <id>https://aoayaoa.github.io/2024/02/01/vite/</id>
    <published>2024-01-31T16:00:00.000Z</published>
    <updated>2025-03-07T04:00:05.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vite-完全指南：从入门到精通"><a href="#Vite-完全指南：从入门到精通" class="headerlink" title="Vite 完全指南：从入门到精通"></a>Vite 完全指南：从入门到精通</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="第一部分：基础入门"><a href="#第一部分：基础入门" class="headerlink" title="第一部分：基础入门"></a>第一部分：基础入门</h3><ol><li><p><a href="#1-%E8%AE%A4%E8%AF%86-vite">认识 Vite</a></p><ul><li>1.1 什么是 Vite</li><li>1.2 核心优势</li><li>1.3 基本原理</li><li>1.4 应用场景</li></ul></li><li><p><a href="#2-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">快速开始</a></p><ul><li>2.1 环境准备</li><li>2.2 创建项目</li><li>2.3 项目结构</li><li>2.4 基本命令</li><li>2.5 开发调试</li></ul></li></ol><h3 id="第二部分：核心概念"><a href="#第二部分：核心概念" class="headerlink" title="第二部分：核心概念"></a>第二部分：核心概念</h3><ol start="3"><li><p><a href="#3-%E6%9E%84%E5%BB%BA%E5%9F%BA%E7%A1%80">构建基础</a></p><ul><li>3.1 开发服务器</li><li>3.2 构建过程</li><li>3.3 依赖预构建</li><li>3.4 HMR 机制</li></ul></li><li><p><a href="#4-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86">资源处理</a></p><ul><li>4.1 静态资源</li><li>4.2 样式处理</li><li>4.3 JavaScript&#x2F;TypeScript</li><li>4.4 JSON 和 Web Workers</li><li>4.5 动态导入</li></ul></li></ol><h3 id="第三部分：进阶使用"><a href="#第三部分：进阶使用" class="headerlink" title="第三部分：进阶使用"></a>第三部分：进阶使用</h3><ol start="5"><li><p><a href="#5-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3">配置详解</a></p><ul><li>5.1 基础配置</li><li>5.2 开发服务器配置</li><li>5.3 构建配置</li><li>5.4 依赖优化</li><li>5.5 环境变量</li></ul></li><li><p><a href="#6-%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F">插件系统</a></p><ul><li>6.1 插件机制</li><li>6.2 常用插件</li><li>6.3 插件开发</li><li>6.4 插件钩子</li><li>6.5 最佳实践</li></ul></li></ol><h3 id="第四部分：框架集成"><a href="#第四部分：框架集成" class="headerlink" title="第四部分：框架集成"></a>第四部分：框架集成</h3><ol start="7"><li><p><a href="#7-%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6">主流框架</a></p><ul><li>7.1 Vue 生态</li><li>7.2 React 生态</li><li>7.3 其他框架</li><li>7.4 迁移指南</li></ul></li><li><p><a href="#8-%E5%B7%A5%E5%85%B7%E9%93%BE%E9%9B%86%E6%88%90">工具链集成</a></p><ul><li>8.1 TypeScript</li><li>8.2 CSS 预处理器</li><li>8.3 PostCSS</li><li>8.4 ESLint&#x2F;Prettier</li><li>8.5 单元测试</li></ul></li></ol><h3 id="第五部分：生产优化"><a href="#第五部分：生产优化" class="headerlink" title="第五部分：生产优化"></a>第五部分：生产优化</h3><ol start="9"><li><p><a href="#9-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">性能优化</a></p><ul><li>9.1 构建优化</li><li>9.2 代码分割</li><li>9.3 懒加载</li><li>9.4 预加载</li><li>9.5 缓存策略</li></ul></li><li><p><a href="#10-%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4">部署运维</a></p><ul><li>10.1 构建策略</li><li>10.2 部署方案</li><li>10.3 CI&#x2F;CD</li><li>10.4 监控分析</li><li>10.5 安全考虑</li></ul></li></ol><h2 id="1-认识-Vite"><a href="#1-认识-Vite" class="headerlink" title="1. 认识 Vite"></a>1. 认识 Vite</h2><h3 id="1-1-什么是-Vite"><a href="#1-1-什么是-Vite" class="headerlink" title="1.1 什么是 Vite"></a>1.1 什么是 Vite</h3><p>Vite（法语意为”快速”）是新一代前端构建工具，由 Vue.js 的作者尤雨溪开发。它针对现代 Web 开发的痛点，提供了一套完整的开发解决方案。</p><h4 id="核心特点"><a href="#核心特点" class="headerlink" title="核心特点"></a>核心特点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 极速的服务器启动</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// Vite 直接提供 ESM 源码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 轻量快速的热更新</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">hot</span>.<span class="title function_">accept</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 开箱即用的各种功能</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./style.module.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">&#x27;./data.json&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-核心优势"><a href="#1-2-核心优势" class="headerlink" title="1.2 核心优势"></a>1.2 核心优势</h3><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><pre><code class="highlight mermaid">graph LR    A[源代码] --&gt; B[Vite Dev Server]    B --&gt; C[浏览器原生 ESM]    C --&gt; D[即时编译]    D --&gt; E[快速更新]</code></pre><h4 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h4><pre><code class="highlight mermaid">graph LR    A[源代码] --&gt; B[Rollup]    B --&gt; C[优化打包]    C --&gt; D[高性能产物]</code></pre><h3 id="1-3-基本原理"><a href="#1-3-基本原理" class="headerlink" title="1.3 基本原理"></a>1.3 基本原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发服务器原理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="comment">// 1. 基于 ESM 的开发服务器</span></span><br><span class="line">    <span class="attr">middlewareMode</span>: <span class="literal">false</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 智能的 HMR</span></span><br><span class="line">    <span class="attr">hmr</span>: &#123;</span><br><span class="line">      <span class="attr">protocol</span>: <span class="string">&#x27;ws&#x27;</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">1000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 按需编译</span></span><br><span class="line">    <span class="attr">fs</span>: &#123;</span><br><span class="line">      <span class="attr">strict</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">allow</span>: [<span class="string">&#x27;..&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-4-应用场景"><a href="#1-4-应用场景" class="headerlink" title="1.4 应用场景"></a>1.4 应用场景</h3><table><thead><tr><th>场景</th><th>特点</th><th>适用性</th></tr></thead><tbody><tr><td>SPA</td><td>快速开发、即时反馈</td><td>极佳</td></tr><tr><td>SSR</td><td>支持服务端渲染</td><td>良好</td></tr><tr><td>库开发</td><td>插件化、可扩展</td><td>适中</td></tr><tr><td>MPA</td><td>多页面应用支持</td><td>良好</td></tr></tbody></table><h2 id="2-快速开始"><a href="#2-快速开始" class="headerlink" title="2. 快速开始"></a>2. 快速开始</h2><h3 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1 环境准备"></a>2.1 环境准备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查 Node.js 版本（需要 14.18+ / 16+）</span></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包管理器选择</span></span><br><span class="line">npm -v  <span class="comment"># npm 6.14.0+</span></span><br><span class="line">yarn -v <span class="comment"># yarn 1.22.0+</span></span><br><span class="line">pnpm -v <span class="comment"># pnpm 7.0.0+</span></span><br></pre></td></tr></table></figure><h3 id="2-2-创建项目"><a href="#2-2-创建项目" class="headerlink" title="2.2 创建项目"></a>2.2 创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 npm</span></span><br><span class="line">npm create vite@latest my-vite-app -- --template vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 yarn</span></span><br><span class="line">yarn create vite my-vite-app --template vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 pnpm</span></span><br><span class="line">pnpm create vite my-vite-app -- --template vue</span><br></pre></td></tr></table></figure><h4 id="支持的模板"><a href="#支持的模板" class="headerlink" title="支持的模板"></a>支持的模板</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEMPLATES</span> = &#123;</span><br><span class="line">  <span class="attr">vanilla</span>: <span class="string">&#x27;原生 JavaScript&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;vanilla-ts&#x27;</span>: <span class="string">&#x27;原生 TypeScript&#x27;</span>,</span><br><span class="line">  <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;vue-ts&#x27;</span>: <span class="string">&#x27;Vue + TypeScript&#x27;</span>,</span><br><span class="line">  <span class="attr">react</span>: <span class="string">&#x27;React&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;react-ts&#x27;</span>: <span class="string">&#x27;React + TypeScript&#x27;</span>,</span><br><span class="line">  <span class="attr">preact</span>: <span class="string">&#x27;Preact&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;preact-ts&#x27;</span>: <span class="string">&#x27;Preact + TypeScript&#x27;</span>,</span><br><span class="line">  <span class="attr">lit</span>: <span class="string">&#x27;Lit&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;lit-ts&#x27;</span>: <span class="string">&#x27;Lit + TypeScript&#x27;</span>,</span><br><span class="line">  <span class="attr">svelte</span>: <span class="string">&#x27;Svelte&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;svelte-ts&#x27;</span>: <span class="string">&#x27;Svelte + TypeScript&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-项目结构"><a href="#2-3-项目结构" class="headerlink" title="2.3 项目结构"></a>2.3 项目结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules/</span><br><span class="line">├── public/</span><br><span class="line">│   └── favicon.ico</span><br><span class="line">├── src/</span><br><span class="line">│   ├── assets/</span><br><span class="line">│   ├── components/</span><br><span class="line">│   ├── views/</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── main.js</span><br><span class="line">├── .gitignore</span><br><span class="line">├── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── README.md</span><br><span class="line">└── vite.config.js</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="3-构建基础"><a href="#3-构建基础" class="headerlink" title="3. 构建基础"></a>3. 构建基础</h2><h3 id="3-1-开发服务器"><a href="#3-1-开发服务器" class="headerlink" title="3.1 开发服务器"></a>3.1 开发服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-2-构建配置"><a href="#3-2-构建配置" class="headerlink" title="3.2 构建配置"></a>3.2 构建配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;modules&#x27;</span>,</span><br><span class="line">    <span class="attr">outDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&#x27;assets&#x27;</span>,</span><br><span class="line">    <span class="attr">minify</span>: <span class="string">&#x27;terser&#x27;</span>,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">manualChunks</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;vendor&#x27;</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-资源处理"><a href="#4-资源处理" class="headerlink" title="4. 资源处理"></a>4. 资源处理</h2><h3 id="4-1-静态资源"><a href="#4-1-静态资源" class="headerlink" title="4.1 静态资源"></a>4.1 静态资源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片资源</span></span><br><span class="line"><span class="keyword">import</span> imgUrl <span class="keyword">from</span> <span class="string">&#x27;./img.png&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;hero&#x27;</span>).<span class="property">src</span> = imgUrl</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSS 模块</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./style.module.css&#x27;</span></span><br><span class="line">element.<span class="property">className</span> = styles.<span class="property">heading</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON</span></span><br><span class="line"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">&#x27;./data.json&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br></pre></td></tr></table></figure><h3 id="4-2-样式处理"><a href="#4-2-样式处理" class="headerlink" title="4.2 样式处理"></a>4.2 样式处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CSS 预处理器</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.scss&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PostCSS 配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">postcss</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">autoprefixer</span>(),</span><br><span class="line">        <span class="title function_">postcssPresetEnv</span>()</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">      <span class="attr">localsConvention</span>: <span class="string">&#x27;camelCase&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-配置详解"><a href="#5-配置详解" class="headerlink" title="5. 配置详解"></a>5. 配置详解</h2><h3 id="5-1-基础配置"><a href="#5-1-基础配置" class="headerlink" title="5.1 基础配置"></a>5.1 基础配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">root</span>: process.<span class="title function_">cwd</span>(),</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.mjs&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-2-环境变量"><a href="#5-2-环境变量" class="headerlink" title="5.2 环境变量"></a>5.2 环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .env</span></span><br><span class="line">VITE_APP_TITLE=My App</span><br><span class="line">VITE_API_URL=http://api.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># .env.development</span></span><br><span class="line">VITE_APP_TITLE=Dev App</span><br><span class="line">VITE_API_URL=http://dev-api.example.com</span><br></pre></td></tr></table></figure><h2 id="6-插件系统"><a href="#6-插件系统" class="headerlink" title="6. 插件系统"></a>6. 插件系统</h2><h3 id="6-1-插件开发"><a href="#6-1-插件开发" class="headerlink" title="6.1 插件开发"></a>6.1 插件开发</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">myPlugin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;my-plugin&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">configureServer</span>(<span class="params">server</span>) &#123;</span><br><span class="line">      <span class="comment">// 服务器配置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">transform</span>(<span class="params">code, id</span>) &#123;</span><br><span class="line">      <span class="comment">// 代码转换</span></span><br><span class="line">      <span class="keyword">if</span> (id.<span class="title function_">endsWith</span>(<span class="string">&#x27;.vue&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">code</span>: transformedCode,</span><br><span class="line">          <span class="attr">map</span>: sourceMap</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-常用插件"><a href="#6-2-常用插件" class="headerlink" title="6.2 常用插件"></a>6.2 常用插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"><span class="keyword">import</span> legacy <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-legacy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title function_">vueJsx</span>(),</span><br><span class="line">    <span class="title function_">legacy</span>(&#123;</span><br><span class="line">      <span class="attr">targets</span>: [<span class="string">&#x27;defaults&#x27;</span>, <span class="string">&#x27;not IE 11&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="7-主流框架"><a href="#7-主流框架" class="headerlink" title="7. 主流框架"></a>7. 主流框架</h2><h3 id="7-1-Vue-集成"><a href="#7-1-Vue-集成" class="headerlink" title="7.1 Vue 集成"></a>7.1 Vue 集成</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: &#123;</span><br><span class="line">        <span class="attr">compilerOptions</span>: &#123;</span><br><span class="line">          <span class="attr">isCustomElement</span>: <span class="function"><span class="params">tag</span> =&gt;</span> tag.<span class="title function_">startsWith</span>(<span class="string">&#x27;ion-&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-2-React-集成"><a href="#7-2-React-集成" class="headerlink" title="7.2 React 集成"></a>7.2 React 集成</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">react</span>(&#123;</span><br><span class="line">      <span class="attr">babel</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          [<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>, &#123; <span class="attr">legacy</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="8-工具链集成"><a href="#8-工具链集成" class="headerlink" title="8. 工具链集成"></a>8. 工具链集成</h2><h3 id="8-1-TypeScript"><a href="#8-1-TypeScript" class="headerlink" title="8.1 TypeScript"></a>8.1 TypeScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;esnext&#x27;</span>,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">input</span>: &#123;</span><br><span class="line">        <span class="attr">main</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-性能优化"><a href="#9-性能优化" class="headerlink" title="9. 性能优化"></a>9. 性能优化</h2><h3 id="9-1-构建优化"><a href="#9-1-构建优化" class="headerlink" title="9.1 构建优化"></a>9.1 构建优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;modules&#x27;</span>,</span><br><span class="line">    <span class="attr">minify</span>: <span class="string">&#x27;terser&#x27;</span>,</span><br><span class="line">    <span class="attr">terserOptions</span>: &#123;</span><br><span class="line">      <span class="attr">compress</span>: &#123;</span><br><span class="line">        <span class="attr">drop_console</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">drop_debugger</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="title function_">manualChunks</span>(<span class="params">id</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (id.<span class="title function_">includes</span>(<span class="string">&#x27;node_modules&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;vendor&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="9-2-代码分割"><a href="#9-2-代码分割" class="headerlink" title="9.2 代码分割"></a>9.2 代码分割</h3><h4 id="9-2-1-基础配置"><a href="#9-2-1-基础配置" class="headerlink" title="9.2.1 基础配置"></a>9.2.1 基础配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 1. 手动分块策略</span></span><br><span class="line">        <span class="attr">manualChunks</span>: &#123;</span><br><span class="line">          <span class="comment">// 将 Vue 全家桶拆分成单独的 chunk</span></span><br><span class="line">          <span class="string">&#x27;vue-vendor&#x27;</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>, <span class="string">&#x27;pinia&#x27;</span>],</span><br><span class="line">          <span class="comment">// 将 UI 框架拆分</span></span><br><span class="line">          <span class="string">&#x27;element-plus&#x27;</span>: [<span class="string">&#x27;element-plus&#x27;</span>],</span><br><span class="line">          <span class="comment">// 将大型依赖拆分</span></span><br><span class="line">          <span class="string">&#x27;lodash&#x27;</span>: [<span class="string">&#x27;lodash-es&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 2. 自定义 chunk 文件名</span></span><br><span class="line">        <span class="attr">chunkFileNames</span>: <span class="function">(<span class="params">chunkInfo</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> facadeModuleId = chunkInfo.<span class="property">facadeModuleId</span></span><br><span class="line">          <span class="keyword">if</span> (facadeModuleId) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`js/[name]-[hash].js`</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;js/vendor-[hash].js&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 3. 自定义资源文件名</span></span><br><span class="line">        <span class="attr">assetFileNames</span>: <span class="function">(<span class="params">assetInfo</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (assetInfo.<span class="property">name</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;.css&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;css/[name]-[hash][extname]&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;assets/[name]-[hash][extname]&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="9-2-2-动态导入"><a href="#9-2-2-动态导入" class="headerlink" title="9.2.2 动态导入"></a>9.2.2 动态导入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 路由级别代码分割</span></span><br><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Home.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="comment">// 添加注释以控制 chunk 名称</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="comment">// 预加载重要路由</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">&#x27;../views/Dashboard.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 组件级别代码分割</span></span><br><span class="line"><span class="comment">// 按需加载组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyHeavyComponent</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> </span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;../components/MyHeavyComponent.vue&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 条件导入</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadAnalytics</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> analytics = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./analytics&#x27;</span>)</span><br><span class="line">    analytics.<span class="title function_">init</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-3-分割策略"><a href="#9-2-3-分割策略" class="headerlink" title="9.2.3 分割策略"></a>9.2.3 分割策略</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="title function_">manualChunks</span>(<span class="params">id</span>) &#123;</span><br><span class="line">          <span class="comment">// 1. 将 node_modules 中的代码单独打包</span></span><br><span class="line">          <span class="keyword">if</span> (id.<span class="title function_">includes</span>(<span class="string">&#x27;node_modules&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 获取包名</span></span><br><span class="line">            <span class="keyword">const</span> packageName = id.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;node_modules/&#x27;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment">// 将每个包单独打包</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">`vendor-<span class="subst">$&#123;packageName&#125;</span>`</span></span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 2. 将公共组件打包到一起</span></span><br><span class="line">          <span class="keyword">if</span> (id.<span class="title function_">includes</span>(<span class="string">&#x27;src/components&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;components&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 3. 将工具函数打包到一起</span></span><br><span class="line">          <span class="keyword">if</span> (id.<span class="title function_">includes</span>(<span class="string">&#x27;src/utils&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;utils&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="9-2-4-预加载和预获取"><a href="#9-2-4-预加载和预获取" class="headerlink" title="9.2.4 预加载和预获取"></a>9.2.4 预加载和预获取</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用 vite-plugin-imagemin 优化图片</span></span><br><span class="line"><span class="keyword">import</span> viteImagemin <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-imagemin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">viteImagemin</span>(&#123;</span><br><span class="line">      <span class="attr">gifsicle</span>: &#123; <span class="attr">optimizationLevel</span>: <span class="number">3</span> &#125;,</span><br><span class="line">      <span class="attr">mozjpeg</span>: &#123; <span class="attr">quality</span>: <span class="number">75</span> &#125;,</span><br><span class="line">      <span class="attr">pngquant</span>: &#123; <span class="attr">quality</span>: [<span class="number">0.7</span>, <span class="number">0.8</span>] &#125;,</span><br><span class="line">      <span class="attr">svgo</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          &#123; <span class="attr">removeViewBox</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">removeDimensions</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 资源预加载</span></span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line">&lt;link rel=<span class="string">&quot;modulepreload&quot;</span> href=<span class="string">&quot;/src/heavy-module.js&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/large-image.jpg&quot;</span> <span class="attr">as</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 3. 动态预加载</span></span><br><span class="line"><span class="language-xml">const preloadComponent = () =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">  const component = import(&#x27;./BigComponent.vue&#x27;)</span></span><br><span class="line"><span class="language-xml">  requestIdleCallback(() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">    // 在空闲时间预加载其他资源</span></span><br><span class="line"><span class="language-xml">    import(&#x27;./non-critical-module.js&#x27;)</span></span><br><span class="line"><span class="language-xml">  &#125;)</span></span><br><span class="line"><span class="language-xml">  return component</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="9-2-5-分割优化建议"><a href="#9-2-5-分割优化建议" class="headerlink" title="9.2.5 分割优化建议"></a>9.2.5 分割优化建议</h4><ol><li><strong>合理的分割粒度</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的实践 - 过度分割</span></span><br><span class="line"><span class="attr">manualChunks</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;tiny-lib&#x27;</span>: [<span class="string">&#x27;tiny-lib&#x27;</span>], <span class="comment">// 这个库太小，不值得单独分割</span></span><br><span class="line">  <span class="string">&#x27;utils&#x27;</span>: [<span class="string">&#x27;./src/utils/format.js&#x27;</span>] <span class="comment">// 工具函数太小，应该合并</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的实践 - 适当分割</span></span><br><span class="line"><span class="attr">manualChunks</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;core-vendor&#x27;</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>, <span class="string">&#x27;pinia&#x27;</span>], <span class="comment">// 核心依赖打包在一起</span></span><br><span class="line">  <span class="string">&#x27;ui-vendor&#x27;</span>: [<span class="string">&#x27;element-plus&#x27;</span>], <span class="comment">// UI 框架单独打包</span></span><br><span class="line">  <span class="string">&#x27;big-vendor&#x27;</span>: [<span class="string">&#x27;echarts&#x27;</span>, <span class="string">&#x27;three.js&#x27;</span>] <span class="comment">// 大型依赖单独打包</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>动态导入最佳实践</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件动态导入</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/Dashboard.vue&#x27;</span>),</span><br><span class="line">    <span class="comment">// 使用 webpackPreload 确保关键路由快速加载</span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;overview&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">&#x27;./views/Overview.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;analysis&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackPreload: true */</span> <span class="string">&#x27;./views/Analysis.vue&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>性能监控</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监控代码分割性能</span></span><br><span class="line"><span class="keyword">import</span> &#123; onLCP, onFID &#125; <span class="keyword">from</span> <span class="string">&#x27;web-vitals&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控加载性能</span></span><br><span class="line"><span class="title function_">onLCP</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line"><span class="title function_">onFID</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控 chunk 加载失败</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;SCRIPT&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理 chunk 加载失败</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Chunk load failed:&#x27;</span>, event.<span class="property">target</span>.<span class="property">src</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>这样的代码分割内容更加完整和准确，涵盖了：</p><ul><li>基础配置</li><li>动态导入</li><li>分割策略</li><li>预加载和预获取</li><li>最佳实践和性能监控</li></ul><p>每个部分都提供了具体的代码示例和实践建议，更有助于理解和实施代码分割。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 10. 部署运维</span><br><span class="line"></span><br><span class="line">### 10.1 静态部署</span><br><span class="line">```javascript</span><br><span class="line">// vite.config.js</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  base: production ? &#x27;/your-repo/&#x27; : &#x27;/&#x27;,</span><br><span class="line">  build: &#123;</span><br><span class="line">    outDir: &#x27;dist&#x27;,</span><br><span class="line">    emptyOutDir: true,</span><br><span class="line">    sourcemap: true,</span><br><span class="line">    manifest: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="10-2-CI-CD-配置"><a href="#10-2-CI-CD-配置" class="headerlink" title="10.2 CI&#x2F;CD 配置"></a>10.2 CI&#x2F;CD 配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/deploy.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">main</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;16&#x27;</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">and</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm ci</span></span><br><span class="line"><span class="string">          npm run build</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./dist</span></span><br></pre></td></tr></table></figure><h3 id="10-3-性能监控"><a href="#10-3-性能监控" class="headerlink" title="10.3 性能监控"></a>10.3 性能监控</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 性能指标监控</span></span><br><span class="line"><span class="keyword">import</span> &#123; onCLS, onFID, onLCP &#125; <span class="keyword">from</span> <span class="string">&#x27;web-vitals&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendToAnalytics</span>(<span class="params">&#123; name, delta, id &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 发送性能数据到分析服务</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Metric: <span class="subst">$&#123;name&#125;</span> ID: <span class="subst">$&#123;id&#125;</span> Value: <span class="subst">$&#123;delta&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onCLS</span>(sendToAnalytics)</span><br><span class="line"><span class="title function_">onFID</span>(sendToAnalytics)</span><br><span class="line"><span class="title function_">onLCP</span>(sendToAnalytics)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vite-完全指南：从入门到精通&quot;&gt;&lt;a href=&quot;#Vite-完全指南：从入门到精通&quot; class=&quot;headerlink&quot; title=&quot;Vite 完全指南：从入门到精通&quot;&gt;&lt;/a&gt;Vite 完全指南：从入门到精通&lt;/h1&gt;&lt;h2 id=&quot;目录&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="入门" scheme="https://aoayaoa.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
    <category term="vite" scheme="https://aoayaoa.github.io/tags/vite/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://aoayaoa.github.io/2023/05/26/webpack/"/>
    <id>https://aoayaoa.github.io/2023/05/26/webpack/</id>
    <published>2023-05-25T16:00:00.000Z</published>
    <updated>2025-03-07T03:53:32.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webpack-完全指南：从入门到精通"><a href="#Webpack-完全指南：从入门到精通" class="headerlink" title="Webpack 完全指南：从入门到精通"></a>Webpack 完全指南：从入门到精通</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#1-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">1. 基础概念</a></li><li><a href="#2-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD">2. 核心功能</a></li><li><a href="#3-%E6%89%93%E5%8C%85%E5%8E%9F%E7%90%86">3. 打包原理</a></li><li><a href="#4-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3">4. 配置详解</a></li><li><a href="#5-loader-%E4%BD%93%E7%B3%BB">5. Loader 体系</a></li><li><a href="#6-plugin-%E4%BD%93%E7%B3%BB">6. Plugin 体系</a></li><li><a href="#7-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">7. 性能优化</a></li><li><a href="#8-%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8">8. 实战应用</a></li><li><a href="#9-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7">9. 高级特性</a></li><li><a href="#10-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">10. 最佳实践</a></li></ul><h2 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1. 基础概念"></a>1. 基础概念</h2><h3 id="1-1-什么是-Webpack？"><a href="#1-1-什么是-Webpack？" class="headerlink" title="1.1 什么是 Webpack？"></a>1.1 什么是 Webpack？</h3><p><img src= "/img/loading.gif" data-lazy-src="https://webpack.js.org/assets/what-is-webpack.png" alt="Webpack工作原理"></p><p>Webpack 是一个现代 JavaScript 应用程序的静态模块打包工具。它将项目中的所有资源视为模块，通过依赖关系图构建应用。</p><h3 id="1-2-核心概念"><a href="#1-2-核心概念" class="headerlink" title="1.2 核心概念"></a>1.2 核心概念</h3><h4 id="1-2-1-入口-Entry"><a href="#1-2-1-入口-Entry" class="headerlink" title="1.2.1 入口(Entry)"></a>1.2.1 入口(Entry)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单入口</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多入口</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">main</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">vendor</span>: <span class="string">&#x27;./src/vendor.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-输出-Output"><a href="#1-2-2-输出-Output" class="headerlink" title="1.2.2 输出(Output)"></a>1.2.2 输出(Output)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].[contenthash].js&#x27;</span>,</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-模块-Module"><a href="#1-2-3-模块-Module" class="headerlink" title="1.2.3 模块(Module)"></a>1.2.3 模块(Module)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-4-插件-Plugin"><a href="#1-2-4-插件-Plugin" class="headerlink" title="1.2.4 插件(Plugin)"></a>1.2.4 插件(Plugin)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-核心功能"><a href="#2-核心功能" class="headerlink" title="2. 核心功能"></a>2. 核心功能</h2><h3 id="2-1-模块解析"><a href="#2-1-模块解析" class="headerlink" title="2.1 模块解析"></a>2.1 模块解析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// 模块别名</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 扩展名</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>],</span><br><span class="line">    <span class="comment">// 模块查找目录</span></span><br><span class="line">    <span class="attr">modules</span>: [<span class="string">&#x27;node_modules&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-代码分割"><a href="#2-2-代码分割" class="headerlink" title="2.2 代码分割"></a>2.2 代码分割</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      <span class="attr">minSize</span>: <span class="number">20000</span>,</span><br><span class="line">      <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">maxAsyncRequests</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">maxInitialRequests</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">defaultVendors</span>: &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">10</span>,</span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-资源模块"><a href="#2-3-资源模块" class="headerlink" title="2.3 资源模块"></a>2.3 资源模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 图片处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">4</span> * <span class="number">1024</span> <span class="comment">// 4kb</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;images/[hash][ext][query]&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 字体处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/i</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;fonts/[hash][ext][query]&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-打包原理"><a href="#3-打包原理" class="headerlink" title="3. 打包原理"></a>3. 打包原理</h2><h3 id="3-1-构建流程"><a href="#3-1-构建流程" class="headerlink" title="3.1 构建流程"></a>3.1 构建流程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://webpack.js.org/assets/compilation.png" alt="Webpack构建流程"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hooks</span> = &#123;</span><br><span class="line">      <span class="attr">run</span>: <span class="keyword">new</span> <span class="title class_">SyncHook</span>(),</span><br><span class="line">      <span class="attr">emit</span>: <span class="keyword">new</span> <span class="title class_">AsyncSeriesHook</span>([<span class="string">&#x27;compilation&#x27;</span>]),</span><br><span class="line">      <span class="attr">done</span>: <span class="keyword">new</span> <span class="title class_">AsyncSeriesHook</span>([<span class="string">&#x27;stats&#x27;</span>])</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 初始化参数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">run</span>.<span class="title function_">call</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 开始编译</span></span><br><span class="line">    <span class="keyword">const</span> compilation = <span class="keyword">new</span> <span class="title class_">Compilation</span>(<span class="variable language_">this</span>.<span class="property">options</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 构建模块</span></span><br><span class="line">    compilation.<span class="title function_">build</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 优化</span></span><br><span class="line">    compilation.<span class="title function_">optimize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 输出资源</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">emit</span>.<span class="title function_">callAsync</span>(compilation, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">callback</span>(err);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 6. 完成构建</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">done</span>.<span class="title function_">callAsync</span>(compilation.<span class="title function_">getStats</span>(), <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">callback</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-模块依赖图"><a href="#3-2-模块依赖图" class="headerlink" title="3.2 模块依赖图"></a>3.2 模块依赖图</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DependencyGraph</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">modules</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addModule</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">modules</span>.<span class="title function_">set</span>(<span class="variable language_">module</span>.<span class="property">id</span>, &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="variable language_">module</span>.<span class="property">id</span>,</span><br><span class="line">      <span class="attr">dependencies</span>: <span class="variable language_">module</span>.<span class="property">dependencies</span>,</span><br><span class="line">      <span class="attr">code</span>: <span class="variable language_">module</span>.<span class="property">code</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createBundle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> modules = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">modules</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">      modules += <span class="string">`</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="variable language_">module</span>.id&#125;</span>: function(module, exports, require) &#123;</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;<span class="variable language_">module</span>.code&#125;</span></span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">      (function(modules) &#123;</span></span><br><span class="line"><span class="string">        function require(id) &#123;</span></span><br><span class="line"><span class="string">          const module = &#123; exports: &#123;&#125; &#125;;</span></span><br><span class="line"><span class="string">          modules[id](module, module.exports, require);</span></span><br><span class="line"><span class="string">          return module.exports;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        require(0);</span></span><br><span class="line"><span class="string">      &#125;)(&#123;<span class="subst">$&#123;modules&#125;</span>&#125;)</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-配置详解"><a href="#4-配置详解" class="headerlink" title="4. 配置详解"></a>4. 配置详解</h2><h3 id="4-1-基础配置"><a href="#4-1-基础配置" class="headerlink" title="4.1 基础配置"></a>4.1 基础配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].[contenthash].js&#x27;</span>,</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模块处理</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;css/[name].[contenthash].css&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 优化</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-Loader-体系"><a href="#5-Loader-体系" class="headerlink" title="5. Loader 体系"></a>5. Loader 体系</h2><h3 id="5-1-Loader-原理"><a href="#5-1-Loader-原理" class="headerlink" title="5.1 Loader 原理"></a>5.1 Loader 原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义 loader 示例</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="comment">// loader 上下文</span></span><br><span class="line">  <span class="keyword">const</span> options = <span class="variable language_">this</span>.<span class="title function_">getOptions</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 异步处理</span></span><br><span class="line">  <span class="keyword">const</span> callback = <span class="variable language_">this</span>.<span class="title function_">async</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 源码转换</span></span><br><span class="line">  <span class="keyword">const</span> transformedSource = <span class="title function_">transform</span>(source, options);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回转换后的代码</span></span><br><span class="line">  <span class="title function_">callback</span>(<span class="literal">null</span>, transformedSource);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-2-常用-Loader"><a href="#5-2-常用-Loader" class="headerlink" title="5.2 常用 Loader"></a>5.2 常用 Loader</h3><h4 id="5-2-1-样式处理"><a href="#5-2-1-样式处理" class="headerlink" title="5.2.1 样式处理"></a>5.2.1 样式处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// CSS处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">modules</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">importLoaders</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// SASS处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">implementation</span>: <span class="built_in">require</span>(<span class="string">&#x27;sass&#x27;</span>),</span><br><span class="line">              <span class="attr">sassOptions</span>: &#123;</span><br><span class="line">                <span class="attr">fiber</span>: <span class="literal">false</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-文件处理"><a href="#5-2-2-文件处理" class="headerlink" title="5.2.2 文件处理"></a>5.2.2 文件处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 图片优化</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;image-webpack-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">mozjpeg</span>: &#123;</span><br><span class="line">                <span class="attr">progressive</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">quality</span>: <span class="number">65</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">optipng</span>: &#123;</span><br><span class="line">                <span class="attr">enabled</span>: <span class="literal">false</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">pngquant</span>: &#123;</span><br><span class="line">                <span class="attr">quality</span>: [<span class="number">0.65</span>, <span class="number">0.90</span>],</span><br><span class="line">                <span class="attr">speed</span>: <span class="number">4</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// SVG处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;@svgr/webpack&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-Plugin-体系"><a href="#6-Plugin-体系" class="headerlink" title="6. Plugin 体系"></a>6. Plugin 体系</h2><h3 id="6-1-Plugin-原理"><a href="#6-1-Plugin-原理" class="headerlink" title="6.1 Plugin 原理"></a>6.1 Plugin 原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPlugin</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">    <span class="comment">// 注册钩子</span></span><br><span class="line">    compiler.<span class="property">hooks</span>.<span class="property">emit</span>.<span class="title function_">tapAsync</span>(</span><br><span class="line">      <span class="string">&#x27;MyPlugin&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 添加资源</span></span><br><span class="line">        compilation.<span class="property">assets</span>[<span class="string">&#x27;file.txt&#x27;</span>] = &#123;</span><br><span class="line">          <span class="attr">source</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;generated content&#x27;</span>,</span><br><span class="line">          <span class="attr">size</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;generated content&#x27;</span>.<span class="property">length</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">callback</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">MyPlugin</span>;</span><br></pre></td></tr></table></figure><h3 id="6-2-常用-Plugin"><a href="#6-2-常用-Plugin" class="headerlink" title="6.2 常用 Plugin"></a>6.2 常用 Plugin</h3><h4 id="6-2-1-优化类"><a href="#6-2-1-优化类" class="headerlink" title="6.2.1 优化类"></a>6.2.1 优化类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CompressionPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BundleAnalyzerPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).<span class="property">BundleAnalyzerPlugin</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// Gzip压缩</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CompressionPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">algorithm</span>: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(js|css|html|svg)$/</span>,</span><br><span class="line">      <span class="attr">threshold</span>: <span class="number">10240</span>,</span><br><span class="line">      <span class="attr">minRatio</span>: <span class="number">0.8</span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 包分析</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BundleAnalyzerPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">analyzerMode</span>: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">      <span class="attr">openAnalyzer</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">reportFilename</span>: <span class="string">&#x27;bundle-report.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-2-功能增强类"><a href="#6-2-2-功能增强类" class="headerlink" title="6.2.2 功能增强类"></a>6.2.2 功能增强类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CopyPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WorkboxPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;workbox-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 复制静态资源</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123; <span class="attr">from</span>: <span class="string">&#x27;public&#x27;</span>, <span class="attr">to</span>: <span class="string">&#x27;assets&#x27;</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// PWA支持</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">WorkboxPlugin</span>.<span class="title class_">GenerateSW</span>(&#123;</span><br><span class="line">      <span class="attr">clientsClaim</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">skipWaiting</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-性能优化"><a href="#7-性能优化" class="headerlink" title="7. 性能优化"></a>7. 性能优化</h2><h3 id="7-1-构建性能优化"><a href="#7-1-构建性能优化" class="headerlink" title="7.1 构建性能优化"></a>7.1 构建性能优化</h3><h4 id="7-1-1-缓存优化"><a href="#7-1-1-缓存优化" class="headerlink" title="7.1.1 缓存优化"></a>7.1.1 缓存优化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">cache</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;filesystem&#x27;</span>,</span><br><span class="line">    <span class="attr">buildDependencies</span>: &#123;</span><br><span class="line">      <span class="attr">config</span>: [__filename]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;production-cache&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">cacheDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">cacheCompression</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-2-多进程构建"><a href="#7-1-2-多进程构建" class="headerlink" title="7.1.2 多进程构建"></a>7.1.2 多进程构建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thread = <span class="built_in">require</span>(<span class="string">&#x27;thread-loader&#x27;</span>);</span><br><span class="line"></span><br><span class="line">thread.<span class="title function_">warmup</span>(&#123;</span><br><span class="line">  <span class="attr">workers</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">workerParallelJobs</span>: <span class="number">50</span>,</span><br><span class="line">&#125;, [</span><br><span class="line">  <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;thread-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">workers</span>: <span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-运行时性能优化"><a href="#7-2-运行时性能优化" class="headerlink" title="7.2 运行时性能优化"></a>7.2 运行时性能优化</h3><h4 id="7-2-1-代码分割"><a href="#7-2-1-代码分割" class="headerlink" title="7.2.1 代码分割"></a>7.2.1 代码分割</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">moduleIds</span>: <span class="string">&#x27;deterministic&#x27;</span>,</span><br><span class="line">    <span class="attr">runtimeChunk</span>: <span class="string">&#x27;single&#x27;</span>,</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">vendor</span>: &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;vendors&#x27;</span>,</span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-2-懒加载"><a href="#7-2-2-懒加载" class="headerlink" title="7.2.2 懒加载"></a>7.2.2 懒加载</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由懒加载</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(</span><br><span class="line">      <span class="comment">/* webpackChunkName: &quot;dashboard&quot; */</span></span><br><span class="line">      <span class="comment">/* webpackPrefetch: true */</span></span><br><span class="line">      <span class="string">&#x27;./views/Dashboard.vue&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件懒加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./components/MyComponent.vue&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="8-实战应用"><a href="#8-实战应用" class="headerlink" title="8. 实战应用"></a>8. 实战应用</h2><h3 id="8-1-Vue项目配置"><a href="#8-1-Vue项目配置" class="headerlink" title="8.1 Vue项目配置"></a>8.1 Vue项目配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;vue-style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-React项目配置"><a href="#8-2-React项目配置" class="headerlink" title="8.2 React项目配置"></a>8.2 React项目配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;@babel/preset-react&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">              <span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-高级特性"><a href="#9-高级特性" class="headerlink" title="9. 高级特性"></a>9. 高级特性</h2><h3 id="9-1-模块联邦"><a href="#9-1-模块联邦" class="headerlink" title="9.1 模块联邦"></a>9.1 模块联邦</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ModuleFederationPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>).<span class="property">container</span>.<span class="property">ModuleFederationPlugin</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ModuleFederationPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;host&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;remoteEntry.js&#x27;</span>,</span><br><span class="line">      <span class="attr">remotes</span>: &#123;</span><br><span class="line">        <span class="attr">app1</span>: <span class="string">&#x27;app1@http://localhost:3001/remoteEntry.js&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">shared</span>: &#123;</span><br><span class="line">        <span class="attr">react</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-Tree-Shaking-增强"><a href="#9-2-Tree-Shaking-增强" class="headerlink" title="9.2 Tree Shaking 增强"></a>9.2 Tree Shaking 增强</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">usedExports</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">sideEffects</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">innerGraph</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">concatenateModules</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-最佳实践"><a href="#10-最佳实践" class="headerlink" title="10. 最佳实践"></a>10. 最佳实践</h2><h3 id="10-1-项目结构"><a href="#10-1-项目结构" class="headerlink" title="10.1 项目结构"></a>10.1 项目结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">├── build/                # webpack配置</span><br><span class="line">├── public/              # 静态资源</span><br><span class="line">├── src/                 # 源代码</span><br><span class="line">│   ├── assets/         # 资源文件</span><br><span class="line">│   ├── components/     # 组件</span><br><span class="line">│   ├── views/          # 页面</span><br><span class="line">│   ├── router/         # 路由</span><br><span class="line">│   ├── store/          # 状态管理</span><br><span class="line">│   ├── utils/          # 工具函数</span><br><span class="line">│   ├── App.vue         # 根组件</span><br><span class="line">│   └── main.js         # 入口文件</span><br><span class="line">├── tests/              # 测试文件</span><br><span class="line">├── .env.*              # 环境变量</span><br><span class="line">├── package.json        # 项目配置</span><br><span class="line">└── README.md           # 项目说明</span><br></pre></td></tr></table></figure><h3 id="10-2-性能检查清单"><a href="#10-2-性能检查清单" class="headerlink" title="10.2 性能检查清单"></a>10.2 性能检查清单</h3><ul><li><input disabled="" type="checkbox"> 使用最新版本的 Webpack</li><li><input disabled="" type="checkbox"> 配置合适的 sourceMap</li><li><input disabled="" type="checkbox"> 启用压缩和代码分割</li><li><input disabled="" type="checkbox"> 利用缓存机制</li><li><input disabled="" type="checkbox"> 优化图片资源</li><li><input disabled="" type="checkbox"> 配置 CDN</li><li><input disabled="" type="checkbox"> 使用 Tree Shaking</li><li><input disabled="" type="checkbox"> 配置合理的 splitChunks</li><li><input disabled="" type="checkbox"> 使用动态导入</li><li><input disabled="" type="checkbox"> 优化第三方库的使用</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>⚠️ 定期更新依赖包<br>⚠️ 关注构建性能指标<br>⚠️ 避免过度优化<br>⚠️ 保持配置的可维护性<br>⚠️ 做好错误处理和降级策略</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Webpack-完全指南：从入门到精通&quot;&gt;&lt;a href=&quot;#Webpack-完全指南：从入门到精通&quot; class=&quot;headerlink&quot; title=&quot;Webpack 完全指南：从入门到精通&quot;&gt;&lt;/a&gt;Webpack 完全指南：从入门到精通&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="入门" scheme="https://aoayaoa.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
    <category term="webpack" scheme="https://aoayaoa.github.io/tags/webpack/"/>
    
  </entry>
  
</feed>
